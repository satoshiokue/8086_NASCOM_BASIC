 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 1 - 2023/10/14 12時49分15秒


    1/       0 :                        ;	8088 NASCOM BASIC
    2/       0 :                        ;		Converted source code from 8080/Z80 to 8086
    3/       0 :                        ;	Assembler: Macro Assembler 1.42
    4/       0 :                        ;
    5/       0 :                        ;
    6/       0 :                        ;	SBCV20 NASCOM BASIC
    7/       0 :                        ;	Assembler: asm86.com/asm86.cmd
    8/       0 :                        ;
    9/       0 :                        
   10/   0 :                            	CPU	8086
   11/   0 :                            	ASSUME	CS:CODE, DS:DATA, SS:DATA, ES:NOTHING
   12/   0 :                            
   13/   0 : =0H                        RAM	EQU	0000h	; RAM top
   14/   0 : =8000H                     ROM	EQU	8000h	; Rom top
   15/   0 : =500H                      SYSSTK	EQU	0500h	; Stack top
   16/   0 : =0H                        EMEM	EQU	0000h	; Memory top in emulation mode
   17/   0 : =8200H                     EMROM	EQU	8200h	; Start address in emulation mode
   18/   0 :                            
   19/   0 : =800H                      RAMTOP	EQU	0800h 	; BASIC Work space
   20/   0 :                            
   21/   0 : =0H                        REGAD	EQU	00h	; 8251 data register
   22/   0 : =1H                        REGAC	EQU	01h	; 8251 control register
   23/   0 : =17H                       RTSHIG	EQU	17h	; RTS high
   24/   0 : =37H                       RTSLOW	EQU	37h	; RTS low
   25/   0 :                            ;
   26/   0 : =80H                       BUFSIZ	EQU	128		; Buffer size(2^n, max128)
   27/   0 : =70H                       FULSIZ	EQU	BUFSIZ*14/16	; Buffer almost full
   28/   0 :                            ;
   29/   0 :                            ;
   30/   0 :                            ;	dseg
   31/   0 :                            	SEGMENT	DATA
   32/   0 :                            	ORG	RAM
   33/   0 :                            ;
   34/   0 :                            ;	Interrupt vector
   35/   0 :                            DEVERR	DS	4	; Devide error
   36/   4 :                            BRK_FLG	DS	4	; Break flag
   37/   8 :                            NMIREQ	DS	4	; Non maskable interrupt
   38/   C :                            BR3INS	DS	4	; BRK3 instruction
   39/  10 :                            BRVINS	DS	4	; BRKV instruction
   40/  14 :                            CHKINS	DS	4	; CHKIND instruction
   41/  18 :                            
   42/ 3EC :                            	ORG	0400h-20
   43/ 3EC :                            VGETCH	DS	4	; CALLN 251
   44/ 3F0 :                            VKBHIT	DS	4	; CALLN 252
   45/ 3F4 :                            VPUTCH	DS	4	; CALLN 253
   46/ 3F8 :                            VBRKEM	DS	4	; BRKEM 254
   47/ 3FC :                            INTREQ	DS	4	; External interrupt
   48/ 400 :                            ;
   49/ 400 :                            ;	Receive buffer
   50/ 400 :                            RECBUF	DS	BUFSIZ	; Buffer
   51/ 480 :                            RBFRDP	DS	2	; Read address
   52/ 482 :                            RBFWTP	DS	2	; Write address
   53/ 484 :                            RBFCNT	DS	1	; Count of chars
   54/ 485 :                            ;
   55/ 485 :                            ;	cseg
   56/   0 :                            	SEGMENT	CODE
   57/8000 :                            	ORG	ROM
   58/8000 :                            ;
   59/8000 :                            ;	8251 -> buffer by interrupt
   60/8000 :                            ;
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 2 - 2023/10/14 12時49分15秒


   61/8000 :                            intsr:
   62/8000 : 50                         	push	ax		; Save ax
   63/8001 : 53                         	push	bx		; Save bx
   64/8002 : E4 00                      	in	al,REGAD	; Get char
   65/8004 : 8A E0                      	mov	ah,al		; Save it
   66/8006 :                            ;
   67/8006 : A0 84 04                   	mov	al,[RBFCNT]	; Get count of chars
   68/8009 : 3C 80                      	cmp	al,BUFSIZ	; Buffer full?
   69/800B : 74 1E                      	jz	isext		; If yes, ignore
   70/800D : FE C0                      	inc	al		; Count up
   71/800F : A2 84 04                   	mov	[RBFCNT],al	; Update
   72/8012 : 3C 70                      	cmp	al,FULSIZ	; Buffer almost full?
   73/8014 : 75 04                      	jnz	isst1		; If no, skip flow control
   74/8016 : B0 17                      	mov	al,RTSHIG	; RTS control
   75/8018 : E6 01                      	out	REGAC,al	; Out it
   76/801A :                            ;
   77/801A :                            isst1:
   78/801A : 8B 1E 82 04                	mov	bx,[RBFWTP]	; Get write point
   79/801E : 8A C4                      	mov	al,ah		; Restore char
   80/8020 : 88 07                      	mov	[bx],al		; Write char into buffer
   81/8022 :                            ;
   82/8022 : FE C3                      	inc	bl		; Next write point
   83/8024 : 80 E3 7F                   	and	bl,BUFSIZ-1	; Wrap
   84/8027 : 89 1E 82 04                	mov	[RBFWTP],bx	; Update
   85/802B :                            ;
   86/802B :                            isext:
   87/802B : 5B                         	pop	bx		; Restore bx
   88/802C : 58                         	pop	ax		; Restore ax
   89/802D : FB                         	sti			; Enable interrupt
   90/802E : CF                         	iret
   91/802F :                            ;
   92/802F :                            ;	buffer -> al
   93/802F :                            getch:
   94/802F : 53                         	push	bx		; Save bx
   95/8030 :                            ;
   96/8030 :                            gcst1:
   97/8030 : A0 84 04                   	mov	al,[RBFCNT]	; Get count of chars
   98/8033 : 3C 00                      	cmp	al,0		; Buffer enpty?
   99/8035 : 74 F9                      	jz	gcst1		; If yes, wait
  100/8037 : FA                         	cli			; Disable interrupt
  101/8038 :                            ;
  102/8038 : A0 84 04                   	mov	al,[RBFCNT]	; Critical timing measures
  103/803B : 3C 70                      	cmp	al,FULSIZ	; Need flow control?
  104/803D : 75 08                      	jnz	gcst2		; If no, skip flow control
  105/803F : 8A E0                      	mov	ah,al		; Save char
  106/8041 : B0 37                      	mov	al,RTSLOW	; RTS control
  107/8043 : E6 01                      	out	REGAC,al	; Out it
  108/8045 : 8A C4                      	mov	al,ah		; Restore char
  109/8047 :                            gcst2:
  110/8047 : FE C8                      	dec	AL		; Count down
  111/8049 : A2 84 04                   	mov	[RBFCNT],al	; Update
  112/804C :                            ;
  113/804C : 8B 1E 80 04                	mov	bx,[RBFRDP]	; Get read point
  114/8050 : 8A 07                      	mov	al,[bx]		; Read char from buffer
  115/8052 :                            ;
  116/8052 : FE C3                      	inc	bl		; Next read point
  117/8054 : 80 E3 7F                   	and	bl,BUFSIZ-1	; Wrap
  118/8057 : 89 1E 80 04                	mov	[RBFRDP],bx	; Update
  119/805B :                            ;
  120/805B : 5B                         	pop	bx		; Restore bx
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 3 - 2023/10/14 12時49分15秒


  121/805C : FB                         	sti			; Enable interrupt
  122/805D : C3                         	ret
  123/805E :                            ;
  124/805E :                            ;	al -> 8251
  125/805E :                            putch:
  126/805E : 50                         	push	ax		; Save char
  127/805F :                            ;
  128/805F :                            pcst1:
  129/805F : E4 01                      	in	al,REGAC	; Get status
  130/8061 : 24 01                      	and	al,01h		; check TxBUF enpty
  131/8063 : 74 FA                      	jz	pcst1		; wait for empty
  132/8065 :                            ;
  133/8065 : 58                         	pop	ax		; Restore char
  134/8066 : E6 00                      	out	REGAD,al	; Out it
  135/8068 : C3                         	ret
  136/8069 :                            ;
  137/8069 :                            ;	put string
  138/8069 :                            puts:
  139/8069 : FC                         	cld			; set DF for SI increment
  140/806A :                            ptst1:
  141/806A : AC                         	lodsb			; get data to AL and SI++
  142/806B : 3C 00                      	cmp	al,00h		; check tail
  143/806D : 74 05                      	jz	ptext		; if tail, return
  144/806F : E8 EC FF                   	call	putch		; display a charactor
  145/8072 : EB F6                      	jmp	ptst1		; loop until tail
  146/8074 :                            ptext:
  147/8074 : C3                         	ret
  148/8075 :                            ;;
  149/8075 :                            ;;	message
  150/8075 :                            ;ckcpu	db	13,10,'PROCESSOR: ',0
  151/8075 :                            ;nec	db	'NEC V20(uPD70108)',13,10
  152/8075 :                            ;	db	'It will soon be turned 8080 emulation mode.',13,10,0
  153/8075 :                            ;intel	db	'Intel 8088',13,10
  154/8075 :                            ;	db	'Sorry, It will soon be out of control',13,10,0
  155/8075 :                            ;natv	db	'Returned to native mode.',13,10
  156/8075 :                            ;	db	'There is no code to run, so please reset.',13,10,0
  157/8075 :                            ;
  158/8075 :                            ;	CALLN wrapping
  159/8075 :                            ngetch:
  160/8075 : E8 B7 FF                   	call	getch		; Get a char
  161/8078 : CF                         	iret
  162/8079 :                            nkbhit:
  163/8079 : A0 84 04                   	mov	al,[RBFCNT]	; Get count of char
  164/807C : CF                         	iret
  165/807D :                            nputch:
  166/807D : E8 DE FF                   	call	putch		; Put a char
  167/8080 : CF                         	iret
  168/8081 :                            ;
  169/8081 :                            ;	Start
  170/8081 : 8C C8                      start:	mov	ax,cs		; Set com model
  171/8083 : 8E D8                      	mov	ds,ax		; Overlay ds with cs
  172/8085 : 8E C0                      	mov	es,ax		; Overlay es with cs
  173/8087 : 8E D0                      	mov	ss,ax		; Overlay ss with cs
  174/8089 : BC 00 05                   	mov	sp,SYSSTK	; Set stack
  175/808C :                            ;
  176/808C :                            ;	Vector 251-255 setup
  177/808C : C7 06 EC 03 75 80          	mov	WORD PTR[VGETCH],ngetch
  178/8092 : A3 EE 03                   	mov	[VGETCH+2],ax
  179/8095 : C7 06 F0 03 79 80          	mov	WORD PTR[VKBHIT],nkbhit
  180/809B : A3 F2 03                   	mov	[VKBHIT+2],ax
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 4 - 2023/10/14 12時49分15秒


  181/809E : C7 06 F4 03 7D 80          	mov	WORD PTR[VPUTCH],nputch
  182/80A4 : A3 F6 03                   	mov	[VPUTCH+2],ax
  183/80A7 : C7 06 F8 03 00 82          	mov	WORD PTR[VBRKEM],EMROM
  184/80AD : A3 FA 03                   	mov	[VBRKEM+2],ax
  185/80B0 : C7 06 FC 03 00 80          	mov	WORD PTR[INTREQ],intsr
  186/80B6 : A3 FE 03                   	mov	[INTREQ+2],ax
  187/80B9 :                            ;
  188/80B9 :                            ;	8251 setup
  189/80B9 : BA 01 00                   	mov	dx,REGAC
  190/80BC : B0 00                      	mov	al,00h		; Default mode or no operation
  191/80BE : EE                         	out	dx,al		; Try command
  192/80BF : EE                         	out	dx,al		; Try command
  193/80C0 : EE                         	out	dx,al		; Try command
  194/80C1 : B0 40                      	mov	al,40h		; reset
  195/80C3 : EE                         	out	dx,al		; Out it
  196/80C4 : B9 10 00                   	mov	CX,16		; Delay
  197/80C7 : E2 FE                      	loop	$		; Delay
  198/80C9 : B0 4E                      	mov	al,4eh		; mode
  199/80CB : EE                         	out	dx,al		; Out it
  200/80CC : B0 37                      	mov	al,37h		; command
  201/80CE : EE                         	out	dx,al		; Out it
  202/80CF :                            ;
  203/80CF :                            ;	Buffer initialize
  204/80CF : 32 C0                      	xor	al,al		; Clear al
  205/80D1 : A2 84 04                   	mov	[RBFCNT],al	; Set count of chars
  206/80D4 : A1 00 04                   	mov	ax,[RECBUF]	; Get buffer top
  207/80D7 : A3 80 04                   	mov	[RBFRDP],ax	; Set read point
  208/80DA : A3 82 04                   	mov	[RBFWTP],ax	; Set write point
  209/80DD :                            ;
  210/80DD : FB                         	sti			; Enable interrupt
  211/80DE :                            ;;
  212/80DE :                            ;;	Check CPU
  213/80DE :                            ;	mov	si,offset ckcpu	;set message top
  214/80DE :                            ;	call	puts		;display message
  215/80DE :                            ;;
  216/80DE :                            ;	mov	ax,0101h
  217/80DE :                            ;	db	0d5h,10h	;aad 10h
  218/80DE :                            ;	cmp	al,0bh		;NEC V20 ignores the argument
  219/80DE :                            ;	je	isv20		;If V20, skip follw 3 step
  220/80DE :                            ;	mov	si,offset intel	;8088 message
  221/80DE :                            ;	call	puts		;Out it
  222/80DE :                            ;	jmps	$		;Stop
  223/80DE :                            ;isV20:	call	puts		;V20 message
  224/80DE :                            ;;
  225/80DE :                            ;;	Emulation sequence
  226/80DE :                            ;;	db	0fh,0ffh	;BRKEM
  227/80DE :                            ;;	db	offset VBRKEM/4	;Vector number
  228/80DE :                            
  229/80DE : E9 1F 01                   	JMP	PROG_CODE
  230/80E1 :                            
  231/80E1 :                            ;;
  232/80E1 :                            ;;	Returned native mode
  233/80E1 :                            ;	mov	si,offset natv	;8088 message
  234/80E1 :                            ;	call	puts		;Out it
  235/80E1 :                            ;	jmps	$		;Stop
  236/80E1 :                            ;;
  237/80E1 :                            
  238/80E1 :                            
  239/80E1 :                            ;       MS-BASIC START UP ROUTINE
  240/80E1 :                            ;       TARGET: SBC8080
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 5 - 2023/10/14 12時49分15秒


  241/80E1 :                            ;       ASSEMBLER: ARCPIT XZ80.EXE
  242/80E1 :                            ;
  243/8200 :                            	ORG	EMROM
  244/8200 :                            ;
  245/8200 :                            ;       START BASIC
  246/8200 :                            PROG_CODE:
  247/8200 : EB 06                      	JMP	COLD
  248/8202 :                            
  249/8202 :                            CHKCHR:
  250/8202 : A0 84 04                   	MOV	AL,[RBFCNT]
  251/8205 : 3C 00                      	CMP	AL,00H
  252/8207 : C3                         	RET
  253/8208 :                            
  254/8208 :                            ;
  255/8208 :                            ;==================================================================================
  256/8208 :                            ; The updates to the original BASIC within this file are copyright Grant Searle
  257/8208 :                            ;
  258/8208 :                            ; You have permission to use this for NON COMMERCIAL USE ONLY
  259/8208 :                            ; If you wish to use it elsewhere, please include an acknowledgement to myself.
  260/8208 :                            ;
  261/8208 :                            ; http://searle.hostei.com/grant/index.html
  262/8208 :                            ;
  263/8208 :                            ; eMail: home.micros01@btinternet.com
  264/8208 :                            ;
  265/8208 :                            ; If the above don't work, please perform an Internet search to see if I have
  266/8208 :                            ; updated the web page hosting service.
  267/8208 :                            ;
  268/8208 :                            ;==================================================================================
  269/8208 :                            ;
  270/8208 :                            ; NASCOM ROM BASIC Ver 4.7, (C) 1978 Microsoft
  271/8208 :                            ; Scanned from source published in 80-BUS NEWS from Vol 2, Issue 3
  272/8208 :                            ; (May-June 1983) to Vol 3, Issue 3 (May-June 1984)
  273/8208 :                            ; Adapted for the freeware Zilog Macro Assembler 2.10 to produce
  274/8208 :                            ; the original ROM code (checksum A934H). PA
  275/8208 :                            ;
  276/8208 :                            ; GENERAL EQUATES
  277/8208 :                            ;
  278/8208 : =3H                        CTRLC		EQU	03H	; Control "C"
  279/8208 : =7H                        CTRLG		EQU	07H	; Control "G"
  280/8208 : =8H                        BKSP		EQU	08H	; Back space
  281/8208 : =0AH                       LF		EQU	0AH	; Line feed
  282/8208 : =0CH                       CLRSCRN		EQU	0CH	; Clear screen
  283/8208 : =0DH                       CR		EQU	0DH	; Carriage return
  284/8208 : =0FH                       CTRLO		EQU	0FH	; Control "O"
  285/8208 : =11H                       CTRLQ		EQU	11H	; Control "Q"
  286/8208 : =12H                       CTRLR		EQU	12H	; Control "R"
  287/8208 : =13H                       CTRLS		EQU	13H	; Control "S"
  288/8208 : =15H                       CTRLU		EQU	15H	; Control "U"
  289/8208 : =1BH                       ESC		EQU	1BH	; Escape
  290/8208 : =7FH                       DEL		EQU	7FH	; Delete
  291/8208 :                            ;
  292/8208 :                            ; BASIC WORK SPACE LOCATIONS
  293/8208 :                            ;
  294/8208 : =845H                      WRKSPC		EQU	RAMTOP+45H  ; BASIC Work space
  295/8208 : =848H                      USR		EQU	WRKSPC+3H   ; "USR (x)" jump
  296/8208 : =84BH                      OUTSUB		EQU	WRKSPC+6H   ; "OUT p,n"
  297/8208 : =84CH                      OTPORT		EQU	WRKSPC+7H   ; Port (p)
  298/8208 : =84EH                      DIVSUP		EQU	WRKSPC+9H   ; Division support routine
  299/8208 : =84FH                      DIV1		EQU	WRKSPC+0AH  ; <- Values
  300/8208 :                            ;DIV2		EQU	WRKSPC+0EH  ; <- to
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 6 - 2023/10/14 12時49分15秒


  301/8208 :                            ;DIV3		EQU	WRKSPC+12H  ; <- be
  302/8208 :                            ;DIV4		EQU	WRKSPC+15H  ; <- inserted
  303/8208 : =855H                      DIV2		EQU	WRKSPC+10H  ; <- to
  304/8208 : =85BH                      DIV3		EQU	WRKSPC+16H  ; <- be
  305/8208 : =85FH                      DIV4		EQU	WRKSPC+1AH  ; <- inserted
  306/8208 : =866H                      SEED		EQU	WRKSPC+1CH  +5; Random number seed
  307/8208 : =884H                      LSTRND		EQU	WRKSPC+3AH  +5; Last random number
  308/8208 : =888H                      INPSUB		EQU	WRKSPC+3EH  +5; #INP (x)" Routine
  309/8208 : =889H                      INPORT		EQU	WRKSPC+3FH  +5; PORT (x)
  310/8208 : =88BH                      NULLS		EQU	WRKSPC+41H  +5; Number of nulls
  311/8208 : =88CH                      LWIDTH		EQU	WRKSPC+42H  +5; Terminal width
  312/8208 : =88DH                      COMMAN		EQU	WRKSPC+43H  +5; Width for commas
  313/8208 : =88EH                      NULFLG		EQU	WRKSPC+44H  +5; Null after input byte flag
  314/8208 : =88FH                      CTLOFG		EQU	WRKSPC+45H  +5; Control "O" flag
  315/8208 : =890H                      LINESC		EQU	WRKSPC+46H  +5; Lines counter
  316/8208 : =892H                      LINESN		EQU	WRKSPC+48H  +5; Lines number
  317/8208 : =894H                      CHKSUM		EQU	WRKSPC+4AH  +5; rray load/save check sum
  318/8208 : =896H                      NMIFLG		EQU	WRKSPC+4CH  +5; Flag for NMI break routine
  319/8208 : =897H                      BRKFLG		EQU	WRKSPC+4DH  +5; Break flag
  320/8208 : =898H                      RINPUT		EQU	WRKSPC+4EH  +5; Input reflection
  321/8208 : =89BH                      POINT		EQU	WRKSPC+51H  +5; "POINT" reflection (unused)
  322/8208 : =89EH                      PSET		EQU	WRKSPC+54H  +5; "SET"   reflection
  323/8208 : =8A1H                      RESET		EQU	WRKSPC+57H  +5; "RESET" reflection
  324/8208 : =8A4H                      STRSPC		EQU	WRKSPC+5AH  +5; Bottom of string space
  325/8208 : =8A6H                      LINEAT		EQU	WRKSPC+5CH  +5; Current line number
  326/8208 : =8A8H                      BASTXT		EQU	WRKSPC+5EH  +5; Pointer to start of program
  327/8208 : =8ABH                      BUFFER		EQU	WRKSPC+61H  +5; Input buffer
  328/8208 : =8B0H                      STACK		EQU	WRKSPC+66H  +5; Initial stack
  329/8208 : =8F5H                      CURPOS		EQU	WRKSPC+0ABH +5; Character position on line
  330/8208 : =8F6H                      LCRFLG		EQU	WRKSPC+0ACH +5; Locate/Create flag
  331/8208 : =8F7H                      TYPE		EQU	WRKSPC+0ADH +5; Data type flag
  332/8208 : =8F8H                      DATFLG		EQU	WRKSPC+0AEH +5; Literal statement flag
  333/8208 : =8F9H                      LSTRAM		EQU	WRKSPC+0AFH +5; Last available RAM
  334/8208 : =8FBH                      TMSTPT		EQU	WRKSPC+0B1H +5; Temporary string pointer
  335/8208 : =8FDH                      TMSTPL		EQU	WRKSPC+0B3H +5; Temporary string pool
  336/8208 : =909H                      TMPSTR		EQU	WRKSPC+0BFH +5; Temporary string
  337/8208 : =90DH                      STRBOT		EQU	WRKSPC+0C3H +5; Bottom of string space
  338/8208 : =90FH                      CUROPR		EQU	WRKSPC+0C5H +5; Current operator in EVAL
  339/8208 : =911H                      LOOPST		EQU	WRKSPC+0C7H +5; First statement of loop
  340/8208 : =913H                      DATLIN		EQU	WRKSPC+0C9H +5; Line of current DATA item
  341/8208 : =915H                      FORFLG		EQU	WRKSPC+0CBH +5; "FOR" loop flag
  342/8208 : =916H                      LSTBIN		EQU	WRKSPC+0CCH +5; Last byte entered
  343/8208 : =917H                      READFG		EQU	WRKSPC+0CDH +5; Read/Input flag
  344/8208 : =918H                      BRKLIN		EQU	WRKSPC+0CEH +5; Line of break
  345/8208 : =91AH                      NXTOPR		EQU	WRKSPC+0D0H +5; Next operator in EVAL
  346/8208 : =91CH                      ERRLIN		EQU	WRKSPC+0D2H +5; Line of error
  347/8208 : =91EH                      CONTAD		EQU	WRKSPC+0D4H +5; Where to CONTinue
  348/8208 : =920H                      PROGND		EQU	WRKSPC+0D6H +5; End of program
  349/8208 : =922H                      VAREND		EQU	WRKSPC+0D8H +5; End of variables
  350/8208 : =924H                      ARREND		EQU	WRKSPC+0DAH +5; End of arrays
  351/8208 : =926H                      NXTDAT		EQU	WRKSPC+0DCH +5; Next data item
  352/8208 : =928H                      FNRGNM		EQU	WRKSPC+0DEH +5; Name of FN argument
  353/8208 : =92AH                      FNARG		EQU	WRKSPC+0E0H +5; FN argument value
  354/8208 : =92EH                      FPREG		EQU	WRKSPC+0E4H +5; Floating point register
  355/8208 : =931H                      FPEXP		EQU	FPREG+3       ; Floating point exponent
  356/8208 : =932H                      SGNRES		EQU	WRKSPC+0E8H +5; Sign of result
  357/8208 : =933H                      PBUFF		EQU	WRKSPC+0E9H +5; Number print buffer
  358/8208 : =940H                      MULVAL		EQU	WRKSPC+0F6H +5; Multiplier
  359/8208 : =943H                      PROGST		EQU	WRKSPC+0F9H +5; Start of program text area
  360/8208 : =9A7H                      STLOOK		EQU	WRKSPC+15DH +5; Start of memory test
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 7 - 2023/10/14 12時49分15秒


  361/8208 :                            ;
  362/8208 :                            ; BASIC ERROR CODE VALUES
  363/8208 :                            ;
  364/8208 : =0H                        NF	EQU	00H	; NEXT without FOR
  365/8208 : =2H                        SN	EQU	02H	; Syntax error
  366/8208 : =4H                        RG	EQU	04H	; RETURN without GOSUB
  367/8208 : =6H                        OD	EQU	06H	; Out of DATA
  368/8208 : =8H                        FC	EQU	08H	; Function call error
  369/8208 : =0AH                       OV	EQU	0AH	; Overflow
  370/8208 : =0CH                       OM	EQU	0CH	; Out of memory
  371/8208 : =0EH                       UL	EQU	0EH	; Undefined line number
  372/8208 : =10H                       BS	EQU	10H	; Bad subscript
  373/8208 : =12H                       RD	EQU	12H	; Re-DIMensioned array
  374/8208 : =14H                       DZ	EQU	14H	; Division by zero (/0)
  375/8208 : =16H                       ID	EQU	16H	; Illegal direct
  376/8208 : =18H                       TM	EQU	18H	; Type miss-match
  377/8208 : =1AH                       OS	EQU	1AH	; Out of string space
  378/8208 : =1CH                       LS	EQU	1CH	; String too long
  379/8208 : =1EH                       ST	EQU	1EH	; String formula too complex
  380/8208 : =20H                       CN	EQU	20H	; Can't CONTinue
  381/8208 : =22H                       UF	EQU	22H	; UnDEFined FN function
  382/8208 : =24H                       MO	EQU	24H	; Missing operand
  383/8208 : =26H                       HX	EQU	26H	; HEX error
  384/8208 : =28H                       BN	EQU	28H	; BIN error
  385/8208 :                            ;
  386/8208 :                            COLD:
  387/8208 : EB 03                      	JMP	STARTB			; Jump for cold start jump
  388/820A :                            WARM:
  389/820A : E9 90 00                   	JMP	WARMST			; Jump for warm start jump
  390/820D :                            STARTB:
  391/820D : EB 04                      	JMP	CSTART			; Jump to initialise
  392/820F :                            ;
  393/820F : D1 8C                      	DW	DEINT			; Get integer -32768 to 32767
  394/8211 : 22 97                      	DW	ABPASS			; Return integer in AB
  395/8213 :                            ;
  396/8213 :                            CSTART:
  397/8213 : BB 45 08                   	MOV	BX,WRKSPC		; Start of workspace RAM
  398/8216 : 8B E3                      	MOV	SP,BX			; Set up a temporary stack
  399/8218 : E9 5D 25                   	JMP	INITST			; Go to initialise
  400/821B :                            ;
  401/821B :                            INIT:
  402/821B : BA 16 85                   	MOV	DX,INITAB		; Initialise workspace
  403/821E : B5 68                      	MOV	CH,INITBE-INITAB+3	; Bytes to copy
  404/8220 : BB 45 08                   	MOV	BX,WRKSPC		; Into workspace RAM
  405/8223 :                            COPY:
  406/8223 : 87 DA                      	XCHG	BX,DX
  407/8225 : 8A 07                      	MOV	AL,[BX]			; Get source
  408/8227 : 87 DA                      	XCHG	BX,DX
  409/8229 : 88 07                      	MOV	[BX],AL			; To destination
  410/822B :                            ;	LAHF
  411/822B : 43                         	INC	BX			; Next destination
  412/822C :                            ;	SAHF
  413/822C :                            ;	LAHF
  414/822C : 42                         	INC	DX			; Next source
  415/822D :                            ;	SAHF
  416/822D : FE CD                      	DEC	CH			; Count bytes
  417/822F : 75 F2                      	JNZ	COPY			; More to move
  418/8231 : 8B E3                      	MOV	SP,BX			; Temporary stack
  419/8233 : E8 8C 05                   	CALL	CLREG			; Clear registers and stack
  420/8236 : E8 29 0D                   	CALL	PRCRLF			; Output CRLF
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 8 - 2023/10/14 12時49分15秒


  421/8239 : A2 F4 08                   	MOV	[BUFFER+72+1],AL	; Mark end of buffe
  422/823C : A2 43 09                   	MOV	[PROGST],AL  		; Initialise program area
  423/823F :                            MSIZE:
  424/823F : BB A7 09                   	MOV	BX,STLOOK		; Point to start of RAM
  425/8242 :                            MLOOP:
  426/8242 : 9F                         	LAHF
  427/8243 : 43                         	INC	BX			; Next byte
  428/8244 : 9E                         	SAHF
  429/8245 : 8A C7                      	MOV	AL,BH			; Above address FFFF ?
  430/8247 : 0A C3                      	OR	AL,BL
  431/8249 : 74 0E                      	JZ	SETTOP			; Yes - 64K RAM
  432/824B : 8A 07                      	MOV	AL,[BX]			; Get contents
  433/824D : 8A E8                      	MOV	CH,AL			; Save it
  434/824F : F6 D0                      	NOT	AL			; Flip all bits
  435/8251 : 88 07                      	MOV	[BX],AL			; Put it back
  436/8253 : 3A 07                      	CMP	AL,[BX]			; RAM there if same
  437/8255 : 88 2F                      	MOV	[BX],CH			; Restore old contents
  438/8257 : 74 E9                      	JZ	MLOOP			; If RAM - test next byte
  439/8259 :                            ;
  440/8259 :                            SETTOP:
  441/8259 : 9F                         	LAHF
  442/825A : 4B                         	DEC	BX			; Back one byte
  443/825B : 9E                         	SAHF
  444/825C : BA A6 09                   	MOV	DX,STLOOK-1		; See if enough RAM
  445/825F : E8 55 07                   	CALL	CPDEHL			; Compare DE with HL
  446/8262 : 72 42                      	JC	NEMEM			; If not enough RAM
  447/8264 : BA CE FF                   	MOV	DX,0-50			; 50 Bytes string space
  448/8267 : 89 1E F9 08                	MOV	[LSTRAM],BX		; Save last available RAM
  449/826B : 03 DA                      	ADD	BX,DX			; Allocate string space
  450/826D : 89 1E A4 08                	MOV	[STRSPC],BX		; Save string space
  451/8271 : E8 16 05                   	CALL	CLRPTR			; Clear program area
  452/8274 : 8B 1E A4 08                	MOV	BX,[STRSPC]		; Get end of memory
  453/8278 : BA EF FF                   	MOV	DX,0-17			; Offset for free bytes
  454/827B : 03 DA                      	ADD	BX,DX			; Adjust HL
  455/827D : BA 43 09                   	MOV	DX,PROGST		; Start of program text
  456/8280 : 8A C3                      	MOV	AL,BL			; Get LSB
  457/8282 : 2A C2                      	SUB	AL,DL			; Adjust it
  458/8284 : 8A D8                      	MOV	BL,AL			; Re-save
  459/8286 : 8A C7                      	MOV	AL,BH			; Get MSB
  460/8288 : 1A C6                      	SBB	AL,DH			; Adjust it
  461/828A : 8A F8                      	MOV	BH,AL			; Re-save
  462/828C : 53                         	PUSH	BX			; Save bytes free
  463/828D : BB BD 82                   	MOV	BX,SIGNON		; Sign-on message
  464/8290 : E8 14 16                   	CALL	PRS			; Output string
  465/8293 : 5B                         	POP	BX			; Get bytes free back
  466/8294 : E8 88 1F                   	CALL	PRNTHL			; Output amount of free memory
  467/8297 : BB AE 82                   	MOV	BX,BFREE		; " Bytes free" message
  468/829A : E8 0A 16                   	CALL	PRS			; Output string
  469/829D :                            WARMST:
  470/829D : BC B0 08                   	MOV	SP,STACK		; Temporary stack
  471/82A0 :                            BRKRET:
  472/82A0 : E8 1F 05                   	CALL	CLREG			; Clear registers and s
  473/82A3 : E9 C2 03                   	JMP	PRNTOK			; Go to get command lin
  474/82A6 :                            ;
  475/82A6 :                            NEMEM:
  476/82A6 : BB 04 83                   	MOV	BX,MEMMSG		; Memory size not enough
  477/82A9 : E8 FB 15                   	CALL	PRS			; Print it
  478/82AC :                            XXXXX:
  479/82AC : EB FE                      	JMP	XXXXX			; Stop
  480/82AE :                            ;
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 9 - 2023/10/14 12時49分15秒


  481/82AE :                            BFREE:
  482/82AE : 20 42 79 74 65 73 20 66 72 	DB	" Bytes free",CR,LF,0,0
      82B7 : 65 65 0D 0A 00 00         
  483/82BD :                            ;
  484/82BD :                            SIGNON:
  485/82BD : 49 4E 54 45 4C 38 30 38 30 	DB	"INTEL8080 Based x86 BASIC Ver 4.7b",CR,LF
      82C6 : 20 42 61 73 65 64 20 78 38
      82CF : 36 20 42 41 53 49 43 20 56
      82D8 : 65 72 20 34 2E 37 62 0D 0A
  486/82E1 : 43 6F 70 79 72 69 67 68 74 	DB	"Copyright ",40,"C",41
      82EA : 20 28 43 29               
  487/82EE : 20 31 39 37 38 20 62 79 20 	DB	" 1978 by Microsoft",CR,LF,0,0
      82F7 : 4D 69 63 72 6F 73 6F 66 74
      8300 : 0D 0A 00 00               
  488/8304 :                            ;
  489/8304 :                            MEMMSG:
  490/8304 : 4D 65 6D 6F 72 79 20 73 69 	DB	"Memory size not enough",CR,LF
      830D : 7A 65 20 6E 6F 74 20 65 6E
      8316 : 6F 75 67 68 0D 0A         
  491/831C : 54 68 65 20 73 79 73 74 65 	DB	"The system is stopped.",CR,LF,0,0
      8325 : 6D 20 69 73 20 73 74 6F 70
      832E : 70 65 64 2E 0D 0A 00 00   
  492/8336 :                            ;
  493/8336 :                            ; FUNCTION ADDRESS TABLE
  494/8336 :                            ;
  495/8336 :                            FNCTAB:
  496/8336 : D5 9F                      	DW	SGN
  497/8338 : 0B A1                      	DW	INT
  498/833A : EF 9F                      	DW	ABS
  499/833C : 48 08                      	DW	USR
  500/833E : F4 96                      	DW	FRE
  501/8340 : E9 9B                      	DW	INP
  502/8342 : 30 97                      	DW	POS
  503/8344 : 86 A3                      	DW	SQR
  504/8346 : 95 A4                      	DW	RND
  505/8348 : FD 9D                      	DW	LOG
  506/834A : E6 A3                      	DW	EXP
  507/834C : 24 A5                      	DW	COS
  508/834E : 2A A5                      	DW	SIN
  509/8350 : 97 A5                      	DW	TAN
  510/8352 : AD A5                      	DW	ATN
  511/8354 : 46 9C                      	DW	PEEK
  512/8356 : 1C A6                      	DW	DEEK
  513/8358 : 9B 08                      	DW	POINT
  514/835A : CE 9A                      	DW	LEN
  515/835C : 05 98                      	DW	STR
  516/835E : A1 9B                      	DW	VAL
  517/8360 : E1 9A                      	DW	ASC
  518/8362 : FB 9A                      	DW	CHR
  519/8364 : 46 A6                      	DW	HEX
  520/8366 : 00 A7                      	DW	BIN
  521/8368 : 0D 9B                      	DW	LEFT
  522/836A : 4B 9B                      	DW	RIGHT
  523/836C : 5A 9B                      	DW	MID
  524/836E :                            ;
  525/836E :                            ; RESERVED WORD LIST
  526/836E :                            ;
  527/836E :                            WORDS:
  528/836E : C5 4E 44                   	DB	0C5H,"ND"
  529/8371 : C6 4F 52                   	DB	0C6H,"OR"
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 10 - 2023/10/14 12時49分15秒


  530/8374 : CE 45 58 54                	DB	0CEH,"EXT"
  531/8378 : C4 41 54 41                	DB	0C4H,"ATA"
  532/837C : C9 4E 50 55 54             	DB	0C9H,"NPUT"
  533/8381 : C4 49 4D                   	DB	0C4H,"IM"
  534/8384 : D2 45 41 44                	DB	0D2H,"EAD"
  535/8388 : CC 45 54                   	DB	0CCH,"ET"
  536/838B : C7 4F 54 4F                	DB	0C7H,"OTO"
  537/838F : D2 55 4E                   	DB	0D2H,"UN"
  538/8392 : C9 46                      	DB	0C9H,"F"
  539/8394 : D2 45 53 54 4F 52 45       	DB	0D2H,"ESTORE"
  540/839B :                            
  541/839B : C7 4F 53 55 42             	DB	0C7H,"OSUB"
  542/83A0 : D2 45 54 55 52 4E          	DB	0D2H,"ETURN"
  543/83A6 : D2 45 4D                   	DB	0D2H,"EM"
  544/83A9 : D3 54 4F 50                	DB	0D3H,"TOP"
  545/83AD : CF 55 54                   	DB	0CFH,"UT"
  546/83B0 : CF 4E                      	DB	0CFH,"N"
  547/83B2 : CE 55 4C 4C                	DB	0CEH,"ULL"
  548/83B6 : D7 41 49 54                	DB	0D7H,"AIT"
  549/83BA : C4 45 46                   	DB	0C4H,"EF"
  550/83BD : D0 4F 4B 45                	DB	0D0H,"OKE"
  551/83C1 : C4 4F 4B 45                	DB	0C4H,"OKE"
  552/83C5 : D3 43 52 45 45 4E          	DB	0D3H,"CREEN"
  553/83CB : CC 49 4E 45 53             	DB	0CCH,"INES"
  554/83D0 : C3 4C 53                   	DB	0C3H,"LS"
  555/83D3 : D7 49 44 54 48             	DB	0D7H,"IDTH"
  556/83D8 : CD 4F 4E 49 54 4F 52       	DB	0CDH,"ONITOR"
  557/83DF :                            
  558/83DF : D3 45 54                   	DB	0D3H,"ET"
  559/83E2 : D2 45 53 45 54             	DB	0D2H,"ESET"
  560/83E7 : D0 52 49 4E 54             	DB	0D0H,"RINT"
  561/83EC : C3 4F 4E 54                	DB	0C3H,"ONT"
  562/83F0 : CC 49 53 54                	DB	0CCH,"IST"
  563/83F4 : C3 4C 45 41 52             	DB	0C3H,"LEAR"
  564/83F9 : C3 4C 4F 41 44             	DB	0C3H,"LOAD"
  565/83FE : C3 53 41 56 45             	DB	0C3H,"SAVE"
  566/8403 : CE 45 57                   	DB	0CEH,"EW"
  567/8406 :                            ;
  568/8406 : D4 41 42 28                	DB	0D4H,"AB("
  569/840A : D4 4F                      	DB	0D4H,"O"
  570/840C : C6 4E                      	DB	0C6H,"N"
  571/840E : D3 50 43 28                	DB	0D3H,"PC("
  572/8412 : D4 48 45 4E                	DB	0D4H,"HEN"
  573/8416 : CE 4F 54                   	DB	0CEH,"OT"
  574/8419 : D3 54 45 50                	DB	0D3H,"TEP"
  575/841D :                            ;
  576/841D : AB                         	DB	0ABH
  577/841E : AD                         	DB	0ADH
  578/841F : AA                         	DB	0AAH
  579/8420 : AF                         	DB	0AFH
  580/8421 : DE                         	DB	0DEH
  581/8422 : C1 4E 44                   	DB	0C1H,"ND"
  582/8425 : CF 52                      	DB	0CFH,"R"
  583/8427 : BE                         	DB	0BEH
  584/8428 : BD                         	DB	0BDH
  585/8429 : BC                         	DB	0BCH
  586/842A :                            ;
  587/842A : D3 47 4E                   	DB	0D3H,"GN"
  588/842D : C9 4E 54                   	DB	0C9H,"NT"
  589/8430 : C1 42 53                   	DB	0C1H,"BS"
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 11 - 2023/10/14 12時49分15秒


  590/8433 : D5 53 52                   	DB	0D5H,"SR"
  591/8436 : C6 52 45                   	DB	0C6H,"RE"
  592/8439 : C9 4E 50                   	DB	0C9H,"NP"
  593/843C : D0 4F 53                   	DB	0D0H,"OS"
  594/843F : D3 51 52                   	DB	0D3H,"QR"
  595/8442 : D2 4E 44                   	DB	0D2H,"ND"
  596/8445 : CC 4F 47                   	DB	0CCH,"OG"
  597/8448 : C5 58 50                   	DB	0C5H,"XP"
  598/844B : C3 4F 53                   	DB	0C3H,"OS"
  599/844E : D3 49 4E                   	DB	0D3H,"IN"
  600/8451 : D4 41 4E                   	DB	0D4H,"AN"
  601/8454 : C1 54 4E                   	DB	0C1H,"TN"
  602/8457 : D0 45 45 4B                	DB	0D0H,"EEK"
  603/845B : C4 45 45 4B                	DB	0C4H,"EEK"
  604/845F : D0 4F 49 4E 54             	DB	0D0H,"OINT"
  605/8464 : CC 45 4E                   	DB	0CCH,"EN"
  606/8467 : D3 54 52 24                	DB	0D3H,"TR$"
  607/846B : D6 41 4C                   	DB	0D6H,"AL"
  608/846E : C1 53 43                   	DB	0C1H,"SC"
  609/8471 : C3 48 52 24                	DB	0C3H,"HR$"
  610/8475 : C8 45 58 24                	DB	0C8H,"EX$"
  611/8479 : C2 49 4E 24                	DB	0C2H,"IN$"
  612/847D : CC 45 46 54 24             	DB	0CCH,"EFT$"
  613/8482 : D2 49 47 48 54 24          	DB	0D2H,"IGHT$"
  614/8488 : CD 49 44 24                	DB	0CDH,"ID$"
  615/848C : 80                         	DB	80H         ; End of list marker
  616/848D :                            ;
  617/848D :                            ; KEYWORD ADDRESS TABLE
  618/848D :                            ;
  619/848D :                            WORDTB:
  620/848D : 43 8C                      	DW	PEND
  621/848F : E3 8A                      	DW	FOR
  622/8491 : 48 91                      	DW	NEXT
  623/8493 : 0E 8E                      	DW	DATA
  624/8495 : 00 90                      	DW	INPUT
  625/8497 : 78 94                      	DW	DIM
  626/8499 : 3A 90                      	DW	READ
  627/849B : 31 8E                      	DW	LET
  628/849D : AF 8D                      	DW	GOTO
  629/849F : 87 8D                      	DW	RUN
  630/84A1 : C3 8E                      	DW	IF
  631/84A3 : F0 8B                      	DW	RESTOR
  632/84A5 : 94 8D                      	DW	GOSUB
  633/84A7 : D8 8D                      	DW	RETURN
  634/84A9 : 12 8E                      	DW	REM
  635/84AB : 3C 8C                      	DW	STOP
  636/84AD : F5 9B                      	DW	POUT
  637/84AF : 9C 8E                      	DW	ON
  638/84B1 : A0 8C                      	DW	NULL
  639/84B3 : FB 9B                      	DW	WAIT
  640/84B5 : 39 97                      	DW	DEF
  641/84B7 : 52 9C                      	DW	POKE
  642/84B9 : 29 A6                      	DW	DOKE
  643/84BB : 12 8E                      	DW	REM
  644/84BD : 0D A6                      	DW	LINES
  645/84BF : FF A5                      	DW	CLS
  646/84C1 : 04 A6                      	DW	WIDTH
  647/84C3 : 74 A7                      	DW	MONITR
  648/84C5 : 9E 08                      	DW	PSET
  649/84C7 : A1 08                      	DW	RESET
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 12 - 2023/10/14 12時49分15秒


  650/84C9 : ED 8E                      	DW	PRINT
  651/84CB : 84 8C                      	DW	CONT
  652/84CD : 33 8A                      	DW	LIST
  653/84CF : 29 8D                      	DW	CLEAR
  654/84D1 : 12 8E                      	DW	REM
  655/84D3 : 12 8E                      	DW	REM
  656/84D5 : 87 87                      	DW	NEW
  657/84D7 :                            ;
  658/84D7 :                            ; RESERVED WORD TOKEN VALUES
  659/84D7 :                            ;
  660/84D7 : =80H                       ZEND       EQU      080H        ; END
  661/84D7 : =81H                       ZFOR       EQU      081H        ; FOR
  662/84D7 : =83H                       ZDATA      EQU      083H        ; DATA
  663/84D7 : =88H                       ZGOTO      EQU      088H        ; GOTO
  664/84D7 : =8CH                       ZGOSUB     EQU      08CH        ; GOSUB
  665/84D7 : =8EH                       ZREM       EQU      08EH        ; REM
  666/84D7 : =9EH                       ZPRINT     EQU      09EH        ; PRINT
  667/84D7 : =0A4H                      ZNEW       EQU      0A4H        ; NEW
  668/84D7 :                            ;
  669/84D7 : =0A5H                      ZTAB       EQU      0A5H        ; TAB
  670/84D7 : =0A6H                      ZTO        EQU      0A6H        ; TO
  671/84D7 : =0A7H                      ZFN        EQU      0A7H        ; FN
  672/84D7 : =0A8H                      ZSPC       EQU      0A8H        ; SPC
  673/84D7 : =0A9H                      ZTHEN      EQU      0A9H        ; THEN
  674/84D7 : =0AAH                      ZNOT       EQU      0AAH        ; NOT
  675/84D7 : =0ABH                      ZSTEP      EQU      0ABH        ; STEP
  676/84D7 :                            ;
  677/84D7 : =0ACH                      ZPLUS      EQU      0ACH        ; +
  678/84D7 : =0ADH                      ZMINUS     EQU      0ADH        ; -
  679/84D7 : =0AEH                      ZTIMES     EQU      0AEH        ; *
  680/84D7 : =0AFH                      ZDIV       EQU      0AFH        ; /
  681/84D7 : =0B2H                      ZOR        EQU      0B2H        ; OR
  682/84D7 : =0B3H                      ZGTR       EQU      0B3H        ; >
  683/84D7 : =0B4H                      ZEQUAL     EQU      0B4H        ; M
  684/84D7 : =0B5H                      ZLTH       EQU      0B5H        ; <
  685/84D7 : =0B6H                      ZSGN       EQU      0B6H        ; SGN
  686/84D7 : =0C7H                      ZPOINT     EQU      0C7H        ; POINT
  687/84D7 : =0CFH                      ZLEFT      EQU      0CDH +2     ; LEFT$
  688/84D7 :                            ;
  689/84D7 :                            ; ARITHMETIC PRECEDENCE TABLE
  690/84D7 :                            ;
  691/84D7 :                            PRITAB:
  692/84D7 : 79                         	DB	79H         ; Precedence value
  693/84D8 : FF A1                      	DW	PADD        ; FPREG = <last> + FPREG
  694/84DA :                            ;
  695/84DA : 79                         	DB	79H         ; Precedence value
  696/84DB : 75 9C                      	DW	PSUB        ; FPREG = <last> - FPREG
  697/84DD :                            ;
  698/84DD : 7C                         	DB	7CH         ; Precedence value
  699/84DE : 4C 9E                      	DW	MULT        ; PPREG = <last> * FPREG
  700/84E0 :                            ;
  701/84E0 : 7C                         	DB	7CH         ; Precedence value
  702/84E1 : CB 9E                      	DW	DIV         ; FPREG = <last> / FPREG
  703/84E3 :                            ;
  704/84E3 : 7F                         	DB	7FH         ; Precedence value
  705/84E4 : 8F A3                      	DW	POWER       ; FPREG = <last> ^ FPREG
  706/84E6 :                            ;
  707/84E6 : 50                         	DB	50H         ; Precedence value
  708/84E7 : 69 93                      	DW	PAND        ; FPREG = <last> AND FPREG
  709/84E9 :                            ;
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 13 - 2023/10/14 12時49分15秒


  710/84E9 : 46                         	DB	46H         ; Precedence value
  711/84EA : 65 93                      	DW	POR         ; FPREG = <last> OR FPREG
  712/84EC :                            ;
  713/84EC :                            ; BASIC ERROR CODE LIST
  714/84EC :                            ;
  715/84EC :                            ERRORS:
  716/84EC : 4E 46                      	DB	"NF"        ; NEXT without FOR
  717/84EE : 53 4E                      	DB	"SN"        ; Syntax error
  718/84F0 : 52 47                      	DB	"RG"        ; RETURN without GOSUB
  719/84F2 : 4F 44                      	DB	"OD"        ; Out of DATA
  720/84F4 : 46 43                      	DB	"FC"        ; Illegal function call
  721/84F6 : 4F 56                      	DB	"OV"        ; Overflow error
  722/84F8 : 4F 4D                      	DB	"OM"        ; Out of memory
  723/84FA : 55 4C                      	DB	"UL"        ; Undefined line
  724/84FC : 42 53                      	DB	"BS"        ; Bad subscript
  725/84FE : 44 44                      	DB	"DD"        ; Re-DIMensioned array
  726/8500 : 2F 30                      	DB	"/0"        ; Division by zero
  727/8502 : 49 44                      	DB	"ID"        ; Illegal direct
  728/8504 : 54 4D                      	DB	"TM"        ; Type mis-match
  729/8506 : 4F 53                      	DB	"OS"        ; Out of string space
  730/8508 : 4C 53                      	DB	"LS"        ; String too long
  731/850A : 53 54                      	DB	"ST"        ; String formula too co
  732/850C : 43 4E                      	DB	"CN"        ; Can't CONTinue
  733/850E : 55 46                      	DB	"UF"        ; Undefined FN function
  734/8510 : 4D 4F                      	DB	"MO"        ; Missing operand
  735/8512 : 48 58                      	DB	"HX"        ; HEX error
  736/8514 : 42 4E                      	DB	"BN"        ; BIN error
  737/8516 :                            ;
  738/8516 :                            ; INITIALISATION TABLE --------------------------------
  739/8516 :                            ;
  740/8516 :                            INITAB:
  741/8516 : E9 84 FD                   	JMP	WARMST			; Warm start jump
  742/8519 : E9 CF 07                   	JMP	FCERR			; "USR (X)" jump (Set to Error)
  743/851C : E6 00                      	OUT	0,AL			; "OUT p,n" skeleton
  744/851E : C3                         	RET
  745/851F : 2C 00                      	SUB	AL,0			; Division support routine
  746/8521 : 8A D8                      	MOV	BL,AL
  747/8523 : 8A C7                      	MOV	AL,BH
  748/8525 : 1C 00                      	SBB	AL,0
  749/8527 : 8A F8                      	MOV	BH,AL
  750/8529 : 8A C5                      	MOV	AL,CH
  751/852B : 1C 00                      	SBB	AL,0
  752/852D : 8A E8                      	MOV	CH,AL
  753/852F : B0 00                      	MOV	AL,0
  754/8531 : C3                         	RET
  755/8532 : 00 00 00                   	DB	0,0,0			; Random number seed ta
  756/8535 : 35 4A CA 99                	DB	035H,04AH,0CAH,099H	;-2.65145E+07
  757/8539 : 39 1C 76 98                	DB	039H,01CH,076H,098H	; 1.61291E+07
  758/853D : 22 95 B3 98                	DB	022H,095H,0B3H,098H	;-1.17691E+07
  759/8541 : 0A DD 47 98                	DB	00AH,0DDH,047H,098H	; 1.30983E+07
  760/8545 : 53 D1 99 99                	DB	053H,0D1H,099H,099H	;-2-01612E+07
  761/8549 : 0A 1A 9F 98                	DB	00AH,01AH,09FH,098H	;-1.04269E+07
  762/854D : 65 BC CD 98                	DB	065H,0BCH,0CDH,098H	;-1.34831E+07
  763/8551 : D6 77 3E 98                	DB	0D6H,077H,03EH,098H	; 1.24825E+07
  764/8555 : 52 C7 4F 80                	DB	052H,0C7H,04FH,080H	; Last random n
  765/8559 : E4 00                      	IN	AL,0			; INP (x) skeleton
  766/855B : C3                         	RET
  767/855C : 01                         	DB	1			; POS (x) number (1)
  768/855D : FF                         	DB	255			; Terminal width (255)
  769/855E : 1C                         	DB	28			; Width for commas (3 colums)
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 14 - 2023/10/14 12時49分15秒


  770/855F : 00                         	DB	0			; No nulls after input bytes
  771/8560 : 00                         	DB	0			; Output enabled (^O off)
  772/8561 : 14 00                      	DW	20			; Initial lines counter
  773/8563 : 14 00                      	DW	20			; Initial lines number
  774/8565 : 00 00                      	DW	0			; Array load/save check sum
  775/8567 : 00                         	DB	0			; Break not by NMI
  776/8568 : 00                         	DB	0			; Break flag
  777/8569 : E9 C3 03                   	JMP	TTYLIN			; Input reflection (set to TTY)
  778/856C : E9 91 7A                   	JMP	0000H			; POINT reflection unused
  779/856F : E9 8E 7A                   	JMP	0000H			; SET reflection
  780/8572 : E9 8B 7A                   	JMP	0000H			; RESET reflection
  781/8575 : A7 09                      	DW	STLOOK			; Temp string space
  782/8577 : FE FF                      	DW	-2			; Current line number (old)
  783/8579 : 44 09                      	DW	PROGST+1		; Start of program text
  784/857B :                            INITBE:					; END OF INITIALISATION TABLE
  785/857B :                            ;
  786/857B :                            ; END OF INITIALISATION TABLE -------------------------
  787/857B :                            ;
  788/857B :                            ERRMSG:
  789/857B : 20 45 72 72 6F 72 00       	DB	" Error",0
  790/8582 :                            
  791/8582 :                            INMSG:
  792/8582 : 20 69 6E 20 00             	DB	" in ",0
  793/8587 : =8586H                     ZERBYT	EQU      $-1			; A zero byte
  794/8587 :                            OKMSG:
  795/8587 : 4F 6B 0D 0A 00 00          	DB	"Ok",CR,LF,0,0
  796/858D :                            BRKMSG:
  797/858D : 42 72 65 61 6B 00          	DB	"Break",0
  798/8593 :                            ;
  799/8593 :                            BAKSTK:
  800/8593 : BB 04 00                   	MOV	BX,4			; Look for "FOR" block with
  801/8596 : 03 DC                      	ADD	BX,SP			; same index as specified
  802/8598 :                            LOKFOR:
  803/8598 : 8A 07                      	MOV	AL,[BX]			; Get block ID
  804/859A :                            ;	LAHF
  805/859A : 43                         	INC	BX			; Point to index address
  806/859B :                            ;	SAHF
  807/859B : 3C 81                      	CMP	AL,ZFOR			; Is it a "FOR" token
  808/859D : 74 01                      	JZ	LOKFOR1
  809/859F : C3                         	RET				; No - exit
  810/85A0 :                            LOKFOR1:
  811/85A0 : 8A 0F                      	MOV	CL,[BX]			; BC = Address of "FOR" index
  812/85A2 :                            ;	LAHF
  813/85A2 : 43                         	INC	BX
  814/85A3 :                            ;	SAHF
  815/85A3 : 8A 2F                      	MOV	CH,[BX]
  816/85A5 :                            ;	LAHF
  817/85A5 : 43                         	INC	BX			; Point to sign of STEP
  818/85A6 :                            ;	SAHF
  819/85A6 : 53                         	PUSH	BX			; Save pointer to sign
  820/85A7 : 8B D9                      	MOV	BX,CX			; HL = address of "FOR" index
  821/85A9 : 8A C6                      	MOV	AL,DH			; See if an index was specified
  822/85AB : 0A C2                      	OR	AL,DL			; DE = 0 if no index specified
  823/85AD : 87 DA                      	XCHG	BX,DX			; Specified index into HL
  824/85AF : 74 05                      	JZ	INDFND			; Skip if no index given
  825/85B1 : 87 DA                      	XCHG	BX,DX			; Index back into DE
  826/85B3 : E8 01 04                   	CALL	CPDEHL			; Compare index with one given
  827/85B6 :                            INDFND:
  828/85B6 : B9 0D 00                   	MOV	CX,16-3			; Offset to next block
  829/85B9 : 5B                         	POP	BX			; Restore pointer to sign
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 15 - 2023/10/14 12時49分15秒


  830/85BA : 75 01                      	JNZ	INDFND1
  831/85BC : C3                         	RET				; Return if block found
  832/85BD :                            INDFND1:
  833/85BD : 03 D9                      	ADD	BX,CX			; Point to next block
  834/85BF : EB D7                      	JMP	LOKFOR			; Keep on looking
  835/85C1 :                            ;
  836/85C1 :                            MOVUP:
  837/85C1 : E8 26 00                   	CALL	ENFMEM			; See if enough memory
  838/85C4 :                            MOVSTR:
  839/85C4 : 51                         	PUSH	CX			; Save end of source
  840/85C5 : 8B EC                      	MOV	BP,SP
  841/85C7 : 87 5E 00                   	XCHG	[BP],BX			; Swap source and dest" end
  842/85CA : 59                         	POP	CX			; Get end of destination
  843/85CB :                            MOVLP:
  844/85CB : E8 E9 03                   	CALL	CPDEHL			; See if list moved
  845/85CE : 8A 07                      	MOV	AL,[BX]			; Get byte
  846/85D0 : 87 D9                      	XCHG	BX,CX
  847/85D2 : 88 07                      	MOV	[BX],AL			; Move it
  848/85D4 : 87 D9                      	XCHG	BX,CX
  849/85D6 : 75 01                      	JNZ	MOVLP1
  850/85D8 : C3                         	RET				; Exit if all done
  851/85D9 :                            MOVLP1:
  852/85D9 :                            ;	LAHF
  853/85D9 : 49                         	DEC	CX			; Next byte to move to
  854/85DA :                            ;	SAHF
  855/85DA :                            ;	LAHF
  856/85DA : 4B                         	DEC	BX			; Next byte to move
  857/85DB :                            ;	SAHF
  858/85DB : EB EE                      	JMP	MOVLP			; Loop until all bytes moved
  859/85DD :                            ;
  860/85DD :                            CHKSTK:
  861/85DD : 53                         	PUSH	BX			; Save code string address
  862/85DE : 8B 1E 24 09                	MOV	BX,[ARREND]		; Lowest free memory
  863/85E2 : B5 00                      	MOV	CH,0			; BC = Number of levels to test
  864/85E4 : 03 D9                      	ADD	BX,CX			; 2 Bytes for each level
  865/85E6 : 03 D9                      	ADD	BX,CX
  866/85E8 : EB 01                      	JMP	ENFMEM1			; Skip "PUSH HL"
  867/85EA :                            ENFMEM:
  868/85EA : 53                         	PUSH	BX			; Save code string address
  869/85EB :                            ENFMEM1:
  870/85EB : B0 D0                      	MOV	AL,0D0H			; LOW -48; 48 Bytes minimum RAM
  871/85ED : 2A C3                      	SUB	AL,BL
  872/85EF : 8A D8                      	MOV	BL,AL
  873/85F1 : B0 FF                      	MOV	AL,0FFH			; HIGH (-48); 48 Bytes minimum RAM
  874/85F3 : 1A C7                      	SBB	AL,BH
  875/85F5 : 72 08                      	JC	OMERR			; Not enough - ?OM Erro
  876/85F7 : 8A F8                      	MOV	BH,AL
  877/85F9 : 03 DC                      	ADD	BX,SP			; Test if stack is overflowed
  878/85FB : 5B                         	POP	BX			; Restore code string address
  879/85FC : 73 01                      	JNC	OMERR
  880/85FE : C3                         	RET				; Return if enough memory
  881/85FF :                            OMERR:
  882/85FF : B2 0C                      	MOV	DL,OM			; ?OM Error
  883/8601 : EB 22                      	JMP	ERROR
  884/8603 :                            ;
  885/8603 :                            DATSNR:
  886/8603 : 8B 1E 13 09                	MOV	BX,[DATLIN]		; Get line of current DATA item
  887/8607 : 89 1E A6 08                	MOV	[LINEAT],BX		; Save as current line
  888/860B :                            SNERR:
  889/860B : B2 02                      	MOV	DL,SN			; ?SN Error
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 16 - 2023/10/14 12時49分15秒


  890/860D : EB 16                      	JMP	ERROR
  891/860F :                            DZERR:
  892/860F : B2 14                      	MOV	DL,DZ			; ?/0 Error
  893/8611 : EB 12                      	JMP	ERROR
  894/8613 :                            NFERR:
  895/8613 : B2 00                      	MOV	DL,NF			; ?NF Error
  896/8615 : EB 0E                      	JMP	ERROR
  897/8617 :                            DDERR:
  898/8617 : B2 12                      	MOV	DL,RD			; ?DD Error
  899/8619 : EB 0A                      	JMP	ERROR
  900/861B :                            UFERR:
  901/861B : B2 22                      	MOV	DL,UF			; ?UF Error
  902/861D : EB 06                      	JMP	ERROR
  903/861F :                            OVERR:
  904/861F : B2 0A                      	MOV	DL,OV			; ?OV Error
  905/8621 : EB 02                      	JMP	ERROR
  906/8623 :                            TMERR:
  907/8623 : B2 18                      	MOV	DL,TM			; ?TM Error
  908/8625 :                            ;
  909/8625 :                            ERROR:
  910/8625 : E8 9A 01                   	CALL	CLREG			; Clear registers and stack
  911/8628 : A2 8F 08                   	MOV	[CTLOFG],AL		; Enable output (A is 0)
  912/862B : E8 26 09                   	CALL	STTLIN			; Start new line
  913/862E : BB EC 84                   	MOV	BX,ERRORS		; Point to error codes
  914/8631 : 8A F0                      	MOV	DH,AL			; D = 0 (A is 0)
  915/8633 : B0 3F                      	MOV	AL,'?'
  916/8635 : E8 A4 03                   	CALL	OUTC			; Output '?'
  917/8638 : 03 DA                      	ADD	BX,DX			; Offset to correct error code
  918/863A : 8A 07                      	MOV	AL,[BX]			; First character
  919/863C : E8 9D 03                   	CALL	OUTC			; Output it
  920/863F : E8 9A 05                   	CALL	GETCHR			; Get next character
  921/8642 : E8 97 03                   	CALL	OUTC			; Output it
  922/8645 : BB 7B 85                   	MOV	BX,ERRMSG		; "Error" message
  923/8648 :                            ERRIN:
  924/8648 : E8 5C 12                   	CALL	PRS			; Output message
  925/864B : 8B 1E A6 08                	MOV	BX,[LINEAT]		; Get line of error
  926/864F : BA FE FF                   	MOV	DX,-2			; Cold start error if -2
  927/8652 : E8 62 03                   	CALL	CPDEHL			; See if cold start error
  928/8655 : 75 03                      	JNZ	ERRIN1			; Cold start error - Restart
  929/8657 : E9 B9 FB                   	JMP	CSTART
  930/865A :                            ERRIN1:
  931/865A : 8A C7                      	MOV	AL,BH			; Was it a direct error
  932/865C : 22 C3                      	AND	AL,BL			; Line = -1 if direct error
  933/865E : FE C0                      	INC	AL
  934/8660 : 74 06                      	JZ	PRNTOK
  935/8662 : E8 B2 1B                   	CALL	LINEIN			; No - output line of error
  936/8665 : EB 01                      	JMP	PRNTOK			; Skip "POP BC"
  937/8667 :                            POPNOK:
  938/8667 : 59                         	POP	CX			; Drop address in input buffer
  939/8668 :                            ;
  940/8668 :                            PRNTOK:
  941/8668 : 32 C0                      	XOR	AL,AL			; Output "Ok" and get command
  942/866A : A2 8F 08                   	MOV	[CTLOFG],AL		; Enable output
  943/866D : E8 E4 08                   	CALL	STTLIN			; Start new line
  944/8670 : BB 87 85                   	MOV	BX,OKMSG		; "Ok" message
  945/8673 : E8 31 12                   	CALL	PRS			; Output "Ok"
  946/8676 :                            GETCMD:
  947/8676 : BB FF FF                   	MOV	BX,-1			; Flag direct mode
  948/8679 : 89 1E A6 08                	MOV	[LINEAT],BX		; Save as current line
  949/867D : E8 AF 02                   	CALL	GETLIN			; Get an input line
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 17 - 2023/10/14 12時49分15秒


  950/8680 : 72 F4                      	JC	GETCMD			; Get line again if break
  951/8682 : E8 57 05                   	CALL	GETCHR			; Get first character
  952/8685 : FE C0                      	INC	AL			; Test if end of line
  953/8687 : FE C8                      	DEC	AL			; Without affecting Carry
  954/8689 : 74 EB                      	JZ	GETCMD			; Nothing entered - Get another
  955/868B : 9F                         	LAHF
  956/868C : 86 E0                      	XCHG	AH,AL
  957/868E : 50                         	PUSH	AX			; Save Carry status
  958/868F : 86 E0                      	XCHG	AH,AL
  959/8691 : E8 5C 06                   	CALL	ATOH			; Get line number into DE
  960/8694 : 52                         	PUSH	DX			; Save line number
  961/8695 : E8 5D 01                   	CALL	CRUNCH			; Tokenise rest of line
  962/8698 : 8A E8                      	MOV	CH,AL			; Length of tokenised line
  963/869A : 5A                         	POP	DX			; Restore line number
  964/869B : 58                         	POP	AX			; Restore Carry
  965/869C : 86 E0                      	XCHG	AH,AL
  966/869E : 9E                         	SAHF
  967/869F : 72 03                      	JC	GETCMD1
  968/86A1 : E9 09 05                   	JMP	EXCUTE			; No line number - Direct mode
  969/86A4 :                            GETCMD1:
  970/86A4 : 52                         	PUSH	DX			; Save line number
  971/86A5 : 51                         	PUSH	CX			; Save length of tokenised line
  972/86A6 : 32 C0                      	XOR	AL,AL
  973/86A8 : A2 16 09                   	MOV	[LSTBIN],AL		; Clear last byte input
  974/86AB : E8 2E 05                   	CALL	GETCHR			; Get next character
  975/86AE : 0A C0                      	OR	AL,AL			; Set flags
  976/86B0 : 9F                         	LAHF
  977/86B1 : 86 E0                      	XCHG	AH,AL
  978/86B3 : 50                         	PUSH	AX			; And save them
  979/86B4 : 86 E0                      	XCHG	AH,AL
  980/86B6 : E8 9C 00                   	CALL	SRCHLN			; Search for line numbe
  981/86B9 : 72 11                      	JC	LINFND			; Jump if line found
  982/86BB : 58                         	POP	AX			; Get status
  983/86BC : 86 E0                      	XCHG	AH,AL
  984/86BE : 9E                         	SAHF
  985/86BF : 9F                         	LAHF
  986/86C0 : 86 E0                      	XCHG	AH,AL
  987/86C2 : 50                         	PUSH	AX			; And re-save
  988/86C3 : 86 E0                      	XCHG	AH,AL
  989/86C5 : 75 03                      	JNZ	GETCMD2
  990/86C7 : E9 09 07                   	JMP	ULERR			; Nothing after number - Error
  991/86CA :                            GETCMD2:
  992/86CA : 0A C0                      	OR	AL,AL			; Clear Carry
  993/86CC :                            LINFND:
  994/86CC : 51                         	PUSH	CX			; Save address of line in prog
  995/86CD : 73 21                      	JNC	INEWLN			; Line not found - Inseer new
  996/86CF : 87 DA                      	XCHG	BX,DX			; Next line address in DE
  997/86D1 : 8B 1E 20 09                	MOV	BX,[PROGND]		; End of program
  998/86D5 :                            SFTPRG:
  999/86D5 : 87 DA                      	XCHG	BX,DX
 1000/86D7 : 8A 07                      	MOV	AL,[BX]			; Shift rest of program down
 1001/86D9 : 87 DA                      	XCHG	BX,DX
 1002/86DB : 87 D9                      	XCHG	BX,CX
 1003/86DD : 88 07                      	MOV	[BX],AL
 1004/86DF : 87 D9                      	XCHG	BX,CX
 1005/86E1 : 9F                         	LAHF
 1006/86E2 : 41                         	INC	CX			; Next destination
 1007/86E3 : 42                         	INC	DX			; Next source
 1008/86E4 : 9E                         	SAHF
 1009/86E5 : E8 CF 02                   	CALL	CPDEHL			; All done?
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 18 - 2023/10/14 12時49分15秒


 1010/86E8 : 75 EB                      	JNZ	SFTPRG			; More to do
 1011/86EA : 8B D9                      	MOV	BX,CX			; HL - New end of program
 1012/86EC : 89 1E 20 09                	MOV	[PROGND],BX		; Update end of program
 1013/86F0 :                            ;
 1014/86F0 :                            INEWLN:
 1015/86F0 : 5A                         	POP	DX			; Get address of line,
 1016/86F1 : 58                         	POP	AX			; Get status
 1017/86F2 : 86 E0                      	XCHG	AH,AL
 1018/86F4 : 9E                         	SAHF
 1019/86F5 : 74 35                      	JZ	SETPTR			; No text - Set up pointers
 1020/86F7 : 8B 1E 20 09                	MOV	BX,[PROGND]		; Get end of program
 1021/86FB : 8B EC                      	MOV	BP,SP
 1022/86FD : 87 5E 00                   	XCHG	[BP],BX			; Get length of input line
 1023/8700 : 59                         	POP	CX			; End of program to BC
 1024/8701 : 03 D9                      	ADD	BX,CX			; Find new end
 1025/8703 : 53                         	PUSH	BX			; Save new end
 1026/8704 : E8 BA FE                   	CALL	MOVUP			; Make space for line
 1027/8707 : 5B                         	POP	BX			; Restore new end
 1028/8708 : 89 1E 20 09                	MOV	[PROGND],BX		; Update end of program pointer
 1029/870C : 87 DA                      	XCHG	BX,DX			; Get line to move up in HL
 1030/870E : 88 3F                      	MOV	[BX],BH			; Save MSB
 1031/8710 : 5A                         	POP	DX			; Get new line number
 1032/8711 : 9F                         	LAHF
 1033/8712 : 43                         	INC	BX			; Skip pointer
 1034/8713 : 43                         	INC	BX
 1035/8714 : 88 17                      	MOV	[BX],DL			; Save LSB of line numb
 1036/8716 : 43                         	INC	BX
 1037/8717 : 88 37                      	MOV	[BX],DH			; Save MSB of line numb
 1038/8719 : 43                         	INC	BX			; To first byte in line
 1039/871A : 9E                         	SAHF
 1040/871B : BA AB 08                   	MOV	DX,BUFFER		; Copy buffer to program
 1041/871E :                            MOVBUF:
 1042/871E : 87 DA                      	XCHG	BX,DX
 1043/8720 : 8A 07                      	MOV	AL,[BX]			; Get source
 1044/8722 : 87 DA                      	XCHG	BX,DX
 1045/8724 : 88 07                      	MOV	[BX],AL			; Save destinations
 1046/8726 : 43                         	INC	BX			; Next source
 1047/8727 : 42                         	INC	DX			; Next destination
 1048/8728 : 0A C0                      	OR	AL,AL			; Done?
 1049/872A : 75 F2                      	JNZ	MOVBUF			; No - Repeat
 1050/872C :                            SETPTR:
 1051/872C : E8 6F 00                   	CALL	RUNFST			; Set line pointers
 1052/872F : 9F                         	LAHF
 1053/8730 : 43                         	INC	BX			; To LSB of pointer
 1054/8731 : 9E                         	SAHF
 1055/8732 : 87 DA                      	XCHG	BX,DX			; Address to DE
 1056/8734 :                            PTRLP:
 1057/8734 : 8B DA                      	MOV	BX,DX			; Address to HL
 1058/8736 : 8A 07                      	MOV	AL,[BX]			; Get LSB of pointer
 1059/8738 : 43                         	INC	BX			; To MSB of pointer
 1060/8739 : 0A 07                      	OR	AL,[BX]			; Compare with MSB poiner
 1061/873B : 75 03                      	JNZ	PTRLP1
 1062/873D : E9 36 FF                   	JMP	GETCMD			; Get command line if end
 1063/8740 :                            PTRLP1:
 1064/8740 : 43                         	INC	BX			; To LSB of line number
 1065/8741 : 43                         	INC	BX			; Skip line number
 1066/8742 : 43                         	INC	BX			; Point to first byte i
 1067/8743 : 32 C0                      	XOR	AL,AL			; Looking for 00 byte
 1068/8745 :                            FNDEND:
 1069/8745 : 3A 07                      	CMP	AL,[BX]			; Found end of line?
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 19 - 2023/10/14 12時49分15秒


 1070/8747 : 9F                         	LAHF
 1071/8748 : 43                         	INC	BX			; Move to next byte
 1072/8749 : 9E                         	SAHF
 1073/874A : 75 F9                      	JNZ	FNDEND			; No - Keep looking
 1074/874C : 87 DA                      	XCHG	BX,DX			; Next line address to HL
 1075/874E : 88 17                      	MOV	[BX],DL			; Save LSB of pointer
 1076/8750 : 43                         	INC	BX
 1077/8751 : 88 37                      	MOV	[BX],DH			; Save MSB of pointer
 1078/8753 : EB DF                      	JMP	PTRLP			; Do next line
 1079/8755 :                            ;
 1080/8755 :                            SRCHLN:
 1081/8755 : 8B 1E A8 08                	MOV	BX,[BASTXT]		; Start of program text
 1082/8759 :                            SRCHLP:
 1083/8759 : 8B CB                      	MOV	CX,BX			; BC = Address to look at
 1084/875B : 8A 07                      	MOV	AL,[BX]			; Get address of next line
 1085/875D :                            ;	LAHF
 1086/875D : 43                         	INC	BX
 1087/875E :                            ;	SAHF
 1088/875E : 0A 07                      	OR	AL,[BX]			; End of program found?
 1089/8760 : 9F                         	LAHF
 1090/8761 : 4B                         	DEC	BX
 1091/8762 : 9E                         	SAHF
 1092/8763 : 75 01                      	JNZ	SRCHLP1
 1093/8765 : C3                         	RET				; Yes - Line not found
 1094/8766 :                            SRCHLP1:
 1095/8766 :                            ;	LAHF
 1096/8766 : 43                         	INC	BX
 1097/8767 :                            ;	SAHF
 1098/8767 :                            ;	LAHF
 1099/8767 : 43                         	INC	BX
 1100/8768 :                            ;	SAHF
 1101/8768 : 8A 07                      	MOV	AL,[BX]			; Get LSB of line number
 1102/876A :                            ;	LAHF
 1103/876A : 43                         	INC	BX
 1104/876B :                            ;	SAHF
 1105/876B : 8A 3F                      	MOV	BH,[BX]			; Get MSB of line number
 1106/876D : 8A D8                      	MOV	BL,AL
 1107/876F : E8 45 02                   	CALL	CPDEHL			; Compare with line in DE
 1108/8772 : 8B D9                      	MOV	BX,CX			; HL = Start of this line
 1109/8774 : 8A 07                      	MOV	AL,[BX]			; Get LSB of next line address
 1110/8776 : 9F                         	LAHF
 1111/8777 : 43                         	INC	BX
 1112/8778 : 9E                         	SAHF
 1113/8779 : 8A 3F                      	MOV	BH,[BX]			; Get MSB of next line address
 1114/877B : 8A D8                      	MOV	BL,AL			; Next line to HL
 1115/877D : F5                         	CMC
 1116/877E : 75 01                      	JNZ	SRCHLP2
 1117/8780 : C3                         	RET				; Lines found - Exit
 1118/8781 :                            SRCHLP2:
 1119/8781 : F5                         	CMC
 1120/8782 : 72 01                      	JC	SRCHLP3
 1121/8784 : C3                         	RET				; Line not found,at line after
 1122/8785 :                            SRCHLP3:
 1123/8785 : EB D2                      	JMP	SRCHLP			; Keep looking
 1124/8787 :                            ;
 1125/8787 :                            NEW:
 1126/8787 : 74 01                      	JZ	CLRPTR
 1127/8789 : C3                         	RET				; Return if any more on line
 1128/878A :                            CLRPTR:
 1129/878A : 8B 1E A8 08                	MOV	BX,[BASTXT]		; Point to start of program
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 20 - 2023/10/14 12時49分15秒


 1130/878E : 32 C0                      	XOR	AL,AL			; Set program area to empty
 1131/8790 : 88 07                      	MOV	[BX],AL			; Save LSB = 00
 1132/8792 : 9F                         	LAHF
 1133/8793 : 43                         	INC	BX
 1134/8794 : 9E                         	SAHF
 1135/8795 : 88 07                      	MOV	[BX],AL			; Save MSB = 00
 1136/8797 : 9F                         	LAHF
 1137/8798 : 43                         	INC	BX
 1138/8799 : 9E                         	SAHF
 1139/879A : 89 1E 20 09                	MOV	[PROGND],BX		; Set program end
 1140/879E :                            ;
 1141/879E :                            RUNFST:
 1142/879E : 8B 1E A8 08                	MOV	BX,[BASTXT]		; Clear all variables
 1143/87A2 : 9F                         	LAHF
 1144/87A3 : 4B                         	DEC	BX
 1145/87A4 : 9E                         	SAHF
 1146/87A5 :                            ;
 1147/87A5 :                            INTVAR:
 1148/87A5 : 89 1E 18 09                	MOV	[BRKLIN],BX		; Initialise RUN variables
 1149/87A9 : 8B 1E F9 08                	MOV	BX,[LSTRAM]		; Get end of RAM
 1150/87AD : 89 1E 0D 09                	MOV	[STRBOT],BX		; Clear string space
 1151/87B1 : 32 C0                      	XOR	AL,AL
 1152/87B3 : E8 3A 04                   	CALL	RESTOR			; Reset DATA pointers
 1153/87B6 : 8B 1E 20 09                	MOV	BX,[PROGND]		; Get end of program
 1154/87BA : 89 1E 22 09                	MOV	[VAREND],BX		; Clear variables
 1155/87BE : 89 1E 24 09                	MOV	[ARREND],BX		; Clear arrays
 1156/87C2 :                            ;
 1157/87C2 :                            CLREG:
 1158/87C2 : 59                         	POP	CX			; Save return address
 1159/87C3 : 8B 1E A4 08                	MOV	BX,[STRSPC]		; Get end of working RAM
 1160/87C7 : 8B E3                      	MOV	SP,BX			; Set stack
 1161/87C9 : BB FD 08                   	MOV	BX,TMSTPL		; Temporary string pool
 1162/87CC : 89 1E FB 08                	MOV	[TMSTPT],BX		; Reset temporary string ptr
 1163/87D0 : 32 C0                      	XOR	AL,AL			; A = 00
 1164/87D2 : 8A D8                      	MOV	BL,AL			; HL = 0000
 1165/87D4 : 8A F8                      	MOV	BH,AL
 1166/87D6 : 89 1E 1E 09                	MOV	[CONTAD],BX		; No CONTinue
 1167/87DA : A2 15 09                   	MOV	[FORFLG],AL		; Clear FOR flag
 1168/87DD : 89 1E 28 09                	MOV	[FNRGNM],BX		 ; Clear FN argument
 1169/87E1 : 53                         	PUSH	BX			; HL = 0000
 1170/87E2 : 51                         	PUSH	CX			; Put back return
 1171/87E3 :                            DOAGN:
 1172/87E3 : 8B 1E 18 09                	MOV	BX,[BRKLIN]		; Get address of code t
 1173/87E7 : C3                         	RET				; Return to execution d
 1174/87E8 :                            ;
 1175/87E8 :                            PROMPT:
 1176/87E8 : B0 3F                      	MOV	AL,'?'			; '?'
 1177/87EA : E8 EF 01                   	CALL	OUTC			; Output character
 1178/87ED : B0 20                      	MOV	AL,' '			; Space
 1179/87EF : E8 EA 01                   	CALL	OUTC			; Output character
 1180/87F2 :                            ;	JMP	RINPUT			; Get input line
 1181/87F2 : E9 3A 01                   	JMP	GETLIN			; Get input line
 1182/87F5 :                            ;
 1183/87F5 :                            CRUNCH:
 1184/87F5 : 32 C0                      	XOR	AL,AL			; Tokenise line @ HL to BUFFER
 1185/87F7 : A2 F8 08                   	MOV	[DATFLG],AL		; Reset literal flag
 1186/87FA : B1 05                      	MOV	CL,2+3			; 2 byte number and 3 nulls
 1187/87FC : BA AB 08                   	MOV	DX,BUFFER		; Start of input buffer
 1188/87FF :                            CRNCLP:
 1189/87FF : 8A 07                      	MOV	AL,[BX]			; Get byte
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 21 - 2023/10/14 12時49分15秒


 1190/8801 : 3C 20                      	CMP	AL,' '			; Is it a space?
 1191/8803 : 75 03                      	JNZ	CRNCLP1			; Yes - Copy direct
 1192/8805 : E9 9E 00                   	JMP	MOVDIR
 1193/8808 :                            CRNCLP1:
 1194/8808 : 8A E8                      	MOV	CH,AL			; Save character
 1195/880A : 3C 22                      	CMP	AL,'"'			; Is it a quote?
 1196/880C : 75 03                      	JNZ	CRNCLP2			; Yes - Copy literal string
 1197/880E : E9 C1 00                   	JMP	CPYLIT
 1198/8811 :                            CRNCLP2:
 1199/8811 : 0A C0                      	OR	AL,AL			; Is it end of buffer?
 1200/8813 : 75 03                      	JNZ	CRNCLP3			; Yes - End buffer
 1201/8815 : E9 CA 00                   	JMP	ENDBUF
 1202/8818 :                            CRNCLP3:
 1203/8818 : A0 F8 08                   	MOV	AL,[DATFLG]		; Get data type
 1204/881B : 0A C0                      	OR	AL,AL			; Literal?
 1205/881D : 8A 07                      	MOV	AL,[BX]			; Get byte to copy
 1206/881F : 74 03                      	JZ	CRNCLP4			; Literal - Copy direct
 1207/8821 : E9 82 00                   	JMP	MOVDIR
 1208/8824 :                            CRNCLP4:
 1209/8824 : 3C 3F                      	CMP	AL,'?'			; Is it '?' short for PRING
 1210/8826 : B0 9E                      	MOV	AL,ZPRINT		; "PRINT" token
 1211/8828 : 75 02                      	JNZ	CRNCLP5			; Yes - replace it
 1212/882A : EB 7A                      	JMP	MOVDIR
 1213/882C :                            CRNCLP5:
 1214/882C : 8A 07                      	MOV	AL,[BX]			; Get byte again
 1215/882E : 3C 30                      	CMP	AL,'0'			; Is it less than '0'
 1216/8830 : 72 06                      	JC	FNDWRD			; Yes - Look for reserved words
 1217/8832 : 3C 3C                      	CMP	AL,60			; ";"+1; Is it "0123456789:;" ?
 1218/8834 : 73 02                      	JNC	FNDWRD			; Yes - copy it direct
 1219/8836 : EB 6E                      	JMP	MOVDIR
 1220/8838 :                            FNDWRD:
 1221/8838 : 52                         	PUSH	DX			; Look for reserved words
 1222/8839 : BA 6D 83                   	MOV	DX,WORDS-1		; Point to table
 1223/883C : 51                         	PUSH	CX			; Save count
 1224/883D : B9 A0 88                   	MOV	CX,RETNAD		; Where to return to
 1225/8840 : 51                         	PUSH	CX			; Save return address
 1226/8841 : B5 7F                      	MOV	CH,ZEND-1		; First token value -1
 1227/8843 : 8A 07                      	MOV	AL,[BX]			; Get byte
 1228/8845 : 3C 61                      	CMP	AL,'a'			; Less than 'a' ?
 1229/8847 : 72 08                      	JC	SEARCH			; Yes - search for words
 1230/8849 : 3C 7B                      	CMP	AL,'z'+1		; Greater than 'z' ?
 1231/884B : 73 04                      	JNC	SEARCH			; Yes - search for words
 1232/884D : 24 5F                      	AND	AL,01011111B		; Force upper case
 1233/884F : 88 07                      	MOV	[BX],AL			; Replace byte
 1234/8851 :                            SEARCH:
 1235/8851 : 8A 0F                      	MOV	CL,[BX]			; Search for a word
 1236/8853 : 87 DA                      	XCHG	BX,DX
 1237/8855 :                            GETNXT:
 1238/8855 : 9F                         	LAHF
 1239/8856 : 43                         	INC	BX
 1240/8857 : 9E                         	SAHF				; Get next reserved word
 1241/8858 : 0A 07                      	OR	AL,[BX]			; Start of word?
 1242/885A : 79 F9                      	JNS	GETNXT			; No - move on
 1243/885C : FE C5                      	INC	CH			; Increment token value
 1244/885E : 8A 07                      	MOV	AL,[BX]			; Get byte from table
 1245/8860 : 24 7F                      	AND	AL,01111111B		; Strip bit 7
 1246/8862 : 75 01                      	JNZ	GETNXT1
 1247/8864 : C3                         	RET				; Return if end of list
 1248/8865 :                            GETNXT1:
 1249/8865 : 3A C1                      	CMP	AL,CL			; Same character as in buffer?
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 22 - 2023/10/14 12時49分15秒


 1250/8867 : 75 EC                      	JNZ	GETNXT			; No - get next word
 1251/8869 : 87 DA                      	XCHG	BX,DX
 1252/886B : 53                         	PUSH	BX			; Save start of word
 1253/886C :                            ;
 1254/886C :                            NXTBYT:
 1255/886C : 9F                         	LAHF
 1256/886D : 42                         	INC	DX			; Look through rest of word
 1257/886E : 9E                         	SAHF
 1258/886F : 87 DA                      	XCHG	BX,DX
 1259/8871 : 8A 07                      	MOV	AL,[BX]			; Get byte from table
 1260/8873 : 87 DA                      	XCHG	BX,DX
 1261/8875 : 0A C0                      	OR	AL,AL			; End of word ?
 1262/8877 : 78 1E                      	JS	MATCH			; Yes - Match found
 1263/8879 : 8A C8                      	MOV	CL,AL			; Save it
 1264/887B : 8A C5                      	MOV	AL,CH			; Get token value
 1265/887D : 3C 88                      	CMP	AL,ZGOTO		; Is it "GOTO" token ?
 1266/887F : 75 06                      	JNZ	NOSPC			; No - Don't allow spaces
 1267/8881 : E8 58 03                   	CALL	GETCHR			; Get next character
 1268/8884 : 9F                         	LAHF
 1269/8885 : 4B                         	DEC	BX			; Cancel increment fromGETCHR
 1270/8886 : 9E                         	SAHF
 1271/8887 :                            NOSPC:
 1272/8887 :                            ;	LAHF
 1273/8887 : 43                         	INC	BX
 1274/8888 :                            ;	SAHF				; Next byte
 1275/8888 : 8A 07                      	MOV	AL,[BX]			; Get byte
 1276/888A : 3C 61                      	CMP	AL,'a'			; Less than 'a' ?
 1277/888C : 72 02                      	JC	NOCHNG			; Yes - don't change
 1278/888E : 24 5F                      	AND	AL,01011111B		; Make upper case
 1279/8890 :                            NOCHNG:
 1280/8890 : 3A C1                      	CMP	AL,CL			; Same as in buffer ?
 1281/8892 : 74 D8                      	JZ	NXTBYT			; Yes - keep testing
 1282/8894 : 5B                         	POP	BX			; Get back start of word
 1283/8895 : EB BA                      	JMP	SEARCH			; Look at next word
 1284/8897 :                            ;
 1285/8897 :                            MATCH:
 1286/8897 : 8A CD                      	MOV	CL,CH			; Word found - Save token value
 1287/8899 : 58                         	POP	AX			; Throw away return
 1288/889A : 86 E0                      	XCHG	AH,AL
 1289/889C : 9E                         	SAHF
 1290/889D : 87 DA                      	XCHG	BX,DX
 1291/889F : C3                         	RET				; Return to "RETNAD"
 1292/88A0 :                            RETNAD:
 1293/88A0 : 87 DA                      	XCHG	BX,DX			; Get address in string
 1294/88A2 : 8A C1                      	MOV	AL,CL			; Get token value
 1295/88A4 : 59                         	POP	CX			; Restore buffer length
 1296/88A5 : 5A                         	POP	DX			; Get destination address
 1297/88A6 :                            MOVDIR:
 1298/88A6 : 9F                         	LAHF
 1299/88A7 : 43                         	INC	BX			; Next source in buffer
 1300/88A8 : 9E                         	SAHF
 1301/88A9 : 87 DA                      	XCHG	BX,DX
 1302/88AB : 88 07                      	MOV	[BX],AL			; Put byte in buffer
 1303/88AD : 87 DA                      	XCHG	BX,DX
 1304/88AF : 9F                         	LAHF
 1305/88B0 : 42                         	INC	DX			; Move up buffer
 1306/88B1 : 9E                         	SAHF
 1307/88B2 : FE C1                      	INC	CL			; Increment length of buffer
 1308/88B4 : 2C 3A                      	SUB	AL,':'			; End of statement?
 1309/88B6 : 74 04                      	JZ	SETLIT			; Jump if multi-stateme line
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 23 - 2023/10/14 12時49分15秒


 1310/88B8 : 3C 49                      	CMP	AL,ZDATA-3AH		; Is it DATA statement ?
 1311/88BA : 75 03                      	JNZ	TSTREM			; No - see if REM
 1312/88BC :                            SETLIT:
 1313/88BC : A2 F8 08                   	MOV	[DATFLG],AL		; Set literal flag
 1314/88BF :                            TSTREM:
 1315/88BF : 2C 54                      	SUB	AL,ZREM-3AH		; Is it REM?
 1316/88C1 : 74 03                      	JZ	TSTREM1			; No - Leave flag
 1317/88C3 : E9 39 FF                   	JMP	CRNCLP
 1318/88C6 :                            TSTREM1:
 1319/88C6 : 8A E8                      	MOV	CH,AL			; Copy rest of buffer
 1320/88C8 :                            NXTCHR:
 1321/88C8 : 8A 07                      	MOV	AL,[BX]			; Get byte
 1322/88CA : 0A C0                      	OR	AL,AL			; End of line ?
 1323/88CC : 74 14                      	JZ	ENDBUF			; Yes - Terminate buffe
 1324/88CE : 3A C5                      	CMP	AL,CH			; End of statement ?
 1325/88D0 : 74 D4                      	JZ	MOVDIR			; Yes - Get next one
 1326/88D2 :                            CPYLIT:
 1327/88D2 : 9F                         	LAHF
 1328/88D3 : 43                         	INC	BX			; Move up source string
 1329/88D4 : 9E                         	SAHF
 1330/88D5 : 87 DA                      	XCHG	BX,DX
 1331/88D7 : 88 07                      	MOV	[BX],AL			; Save in destination
 1332/88D9 : 87 DA                      	XCHG	BX,DX
 1333/88DB : FE C1                      	INC	CL			; Increment length
 1334/88DD : 9F                         	LAHF
 1335/88DE : 42                         	INC	DX			; Move up destination
 1336/88DF : 9E                         	SAHF
 1337/88E0 : EB E6                      	JMP	NXTCHR			; Repeat
 1338/88E2 :                            ;
 1339/88E2 :                            ENDBUF:
 1340/88E2 : BB AA 08                   	MOV	BX,BUFFER-1		; Point to start of buffer
 1341/88E5 : 87 DA                      	XCHG	BX,DX
 1342/88E7 : 88 07                      	MOV	[BX],AL			; Mark end of buffer (A = 00)
 1343/88E9 : 87 DA                      	XCHG	BX,DX
 1344/88EB :                            ;	LAHF
 1345/88EB : 42                         	INC	DX
 1346/88EC :                            ;	SAHF
 1347/88EC : 87 DA                      	XCHG	BX,DX
 1348/88EE : 88 07                      	MOV	[BX],AL			; A = 00
 1349/88F0 : 87 DA                      	XCHG	BX,DX
 1350/88F2 :                            ;	LAHF
 1351/88F2 : 42                         	INC	DX
 1352/88F3 :                            ;	SAHF
 1353/88F3 : 87 DA                      	XCHG	BX,DX
 1354/88F5 : 88 07                      	MOV	[BX],AL			; A = 00
 1355/88F7 : 87 DA                      	XCHG	BX,DX
 1356/88F9 : C3                         	RET
 1357/88FA :                            ;
 1358/88FA :                            DODEL:
 1359/88FA : A0 8E 08                   	MOV	AL,[NULFLG]		; Get null flag status
 1360/88FD : 0A C0                      	OR	AL,AL			; Is it zero?
 1361/88FF : B0 00                      	MOV	AL,0			; Zero A - Leave flags
 1362/8901 : A2 8E 08                   	MOV	[NULFLG],AL		; Zero null flag
 1363/8904 : 75 09                      	JNZ	ECHDEL			; Set - Echo it
 1364/8906 : FE CD                      	DEC	CH			; Decrement length
 1365/8908 : 74 25                      	JZ	GETLIN			; Get line again if empty
 1366/890A : E8 CF 00                   	CALL	OUTC			; Output null character
 1367/890D : EB 02                      	JMP	ECHDEL1			; Skip "DEC B"
 1368/890F :                            ECHDEL:
 1369/890F : FE CD                      	DEC	CH			; Count bytes in buffer
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 24 - 2023/10/14 12時49分15秒


 1370/8911 :                            ECHDEL1:
 1371/8911 : 9F                         	LAHF
 1372/8912 : 4B                         	DEC	BX			; Back space buffer
 1373/8913 : 9E                         	SAHF
 1374/8914 : 74 11                      	JZ	OTKLN			; No buffer - Try again
 1375/8916 : 8A 07                      	MOV	AL,[BX]			; Get deleted byte
 1376/8918 : E8 C1 00                   	CALL	OUTC			; Echo it
 1377/891B : EB 1C                      	JMP	MORINP			; Get more input
 1378/891D :                            ;
 1379/891D :                            DELCHR:
 1380/891D : FE CD                      	DEC	CH			; Count bytes in buffer
 1381/891F : 9F                         	LAHF
 1382/8920 : 4B                         	DEC	BX			; Back space buffer
 1383/8921 : 9E                         	SAHF
 1384/8922 : E8 B7 00                   	CALL	OUTC			; Output character in A
 1385/8925 : 75 12                      	JNZ	MORINP			; Not end - Get more
 1386/8927 :                            OTKLN:
 1387/8927 : E8 B2 00                   	CALL	OUTC			; Output character in A
 1388/892A :                            KILIN:
 1389/892A : E8 35 06                   	CALL	PRCRLF			; Output CRLF
 1390/892D : EB 00                      	JMP	TTYLIN			; Get line again
 1391/892F :                            ;
 1392/892F :                            GETLIN:
 1393/892F :                            TTYLIN:
 1394/892F : BB AB 08                   	MOV	BX,BUFFER		; Get a line by charact
 1395/8932 : B5 01                      	MOV	CH,1			; Set buffer as empty
 1396/8934 : 32 C0                      	XOR	AL,AL
 1397/8936 : A2 8E 08                   	MOV	[NULFLG],AL		; Clear null flag
 1398/8939 :                            MORINP:
 1399/8939 : E8 E2 00                   	CALL	CLOTST			; Get character and test ^O
 1400/893C : 8A C8                      	MOV	CL,AL			; Save character in C
 1401/893E : 3C 7F                      	CMP	AL,DEL			; Delete character?
 1402/8940 : 74 B8                      	JZ	DODEL			; Yes - Process it
 1403/8942 : A0 8E 08                   	MOV	AL,[NULFLG]		; Get null flag
 1404/8945 : 0A C0                      	OR	AL,AL			; Test null flag status
 1405/8947 : 74 0A                      	JZ	PROCES			; Reset - Process character
 1406/8949 : B0 00                      	MOV	AL,0			; Set a null
 1407/894B : E8 8E 00                   	CALL	OUTC			; Output null
 1408/894E : 32 C0                      	XOR	AL,AL			; Clear A
 1409/8950 : A2 8E 08                   	MOV	[NULFLG],AL		; Reset null flag
 1410/8953 :                            PROCES:
 1411/8953 : 8A C1                      	MOV	AL,CL			; Get character
 1412/8955 : 3C 07                      	CMP	AL,CTRLG		; Bell?
 1413/8957 : 74 3E                      	JZ	PUTCTL			; Yes - Save it
 1414/8959 : 3C 03                      	CMP	AL,CTRLC		; Is it control "C"?
 1415/895B : 75 03                      	JNZ	PROCES1
 1416/895D : E8 02 06                   	CALL	PRCRLF			; Yes - Output CRLF
 1417/8960 :                            PROCES1:
 1418/8960 : F9                         	STC				; Flag break
 1419/8961 : 75 01                      	JNZ	PROCES2
 1420/8963 : C3                         	RET				; Return if control "C"
 1421/8964 :                            PROCES2:
 1422/8964 : 3C 0D                      	CMP	AL,CR			; Is it enter?
 1423/8966 : 75 03                      	JNZ	PROCES3			; Yes - Terminate input
 1424/8968 : E9 F1 05                   	JMP	ENDINP
 1425/896B :                            PROCES3:
 1426/896B : 3C 15                      	CMP	AL,CTRLU		; Is it control "U"?
 1427/896D : 74 BB                      	JZ	KILIN			; Yes - Get another line
 1428/896F : 3C 40                      	CMP	AL,'@'			; Is it "kill line"?
 1429/8971 : 74 B4                      	JZ	OTKLN			; Yes - Kill line
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 25 - 2023/10/14 12時49分15秒


 1430/8973 : 3C 5F                      	CMP	AL,'_'			; Is it delete?
 1431/8975 : 74 A6                      	JZ	DELCHR			; Yes - Delete character
 1432/8977 : 3C 08                      	CMP	AL,BKSP			; Is it backspace?
 1433/8979 : 74 A2                      	JZ	DELCHR			; Yes - Delete character
 1434/897B : 3C 12                      	CMP	AL,CTRLR		; Is it control "R"?
 1435/897D : 75 14                      	JNZ	PUTBUF			; No - Put in buffer
 1436/897F : 51                         	PUSH	CX			; Save buffer length
 1437/8980 : 52                         	PUSH	DX			; Save DE
 1438/8981 : 53                         	PUSH	BX			; Save buffer address
 1439/8982 : C6 07 00                   	MOV	BYTE PTR [BX],0		; Mark end of buffer
 1440/8985 : E8 05 1E                   	CALL	OUTNCR			; Output and do CRLF
 1441/8988 : BB AB 08                   	MOV	BX,BUFFER		; Point to buffer start
 1442/898B : E8 19 0F                   	CALL	PRS			; Output buffer
 1443/898E : 5B                         	POP	BX			; Restore buffer address
 1444/898F : 5A                         	POP	DX			; Restore DE
 1445/8990 : 59                         	POP	CX			; Restore buffer length
 1446/8991 : EB A6                      	JMP	MORINP			; Get another character
 1447/8993 :                            ;
 1448/8993 :                            PUTBUF:
 1449/8993 : 3C 20                      	CMP	AL,' '			; Is it a control code?
 1450/8995 : 72 A2                      	JC	MORINP			; Yes - Ignore
 1451/8997 :                            PUTCTL:
 1452/8997 : 8A C5                      	MOV	AL,CH			; Get number of bytes in buffer
 1453/8999 : 3C 49                      	CMP	AL,72+1			; Test for line overflow
 1454/899B : B0 07                      	MOV	AL,CTRLG		; Set a bell
 1455/899D : 73 11                      	JNC	OUTNBS			; Ring bell if buffer full
 1456/899F : 8A C1                      	MOV	AL,CL			; Get character
 1457/89A1 : 88 0F                      	MOV	[BX],CL			; Save in buffer
 1458/89A3 : A2 16 09                   	MOV	[LSTBIN],AL		; Save last input byte
 1459/89A6 : 9F                         	LAHF
 1460/89A7 : 43                         	INC	BX			; Move up buffer
 1461/89A8 : 9E                         	SAHF
 1462/89A9 : FE C5                      	INC	CH			; Increment length
 1463/89AB :                            OUTIT:
 1464/89AB : E8 2E 00                   	CALL	OUTC			; Output the character entered
 1465/89AE : EB 89                      	JMP	MORINP			; Get another character
 1466/89B0 :                            ;
 1467/89B0 :                            OUTNBS:
 1468/89B0 : E8 29 00                   	CALL	OUTC			; Output bell and back over it
 1469/89B3 : B0 08                      	MOV	AL,BKSP			; Set back space
 1470/89B5 : EB F4                      	JMP	OUTIT			; Output it and get more
 1471/89B7 :                            ;
 1472/89B7 :                            ; Z or Overflow
 1473/89B7 :                            CPDEHL:
 1474/89B7 : 8A C7                      	MOV	AL,BH			; Get H
 1475/89B9 : 2A C6                      	SUB	AL,DH			; Compare with D
 1476/89BB : 74 01                      	JZ	CPDEHL1
 1477/89BD : C3                         	RET				; Different - Exit
 1478/89BE :                            CPDEHL1:
 1479/89BE : 8A C3                      	MOV	AL,BL			; Get L
 1480/89C0 : 2A C2                      	SUB	AL,DL			; Compare with E
 1481/89C2 : C3                         	RET				; Return status
 1482/89C3 :                            ;
 1483/89C3 :                            CHKSYN:
 1484/89C3 : 8A 07                      	MOV	AL,[BX]			; Check syntax of character
 1485/89C5 : 8B EC                      	MOV	BP,SP
 1486/89C7 : 87 5E 00                   	XCHG	[BP],BX			; Address of test byte
 1487/89CA : 3A 07                      	CMP	AL,[BX]			; Same as in code string?
 1488/89CC : 9F                         	LAHF
 1489/89CD : 43                         	INC	BX			; Return address
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 26 - 2023/10/14 12時49分15秒


 1490/89CE : 9E                         	SAHF
 1491/89CF : 8B EC                      	MOV	BP,SP
 1492/89D1 : 87 5E 00                   	XCHG	[BP],BX			; Put it back
 1493/89D4 : 75 03                      	JNZ	CHKSYN1			; Yes - Get next character
 1494/89D6 : E9 03 02                   	JMP	GETCHR
 1495/89D9 :                            CHKSYN1:
 1496/89D9 : E9 2F FC                   	JMP	SNERR			; Different - ?SN Error
 1497/89DC :                            ;
 1498/89DC :                            OUTC:
 1499/89DC : 9F                         	LAHF
 1500/89DD : 86 E0                      	XCHG	AH,AL
 1501/89DF : 50                         	PUSH	AX			; Save character
 1502/89E0 : 86 E0                      	XCHG	AH,AL
 1503/89E2 : A0 8F 08                   	MOV	AL,[CTLOFG]		; Get control "O" flag
 1504/89E5 : 0A C0                      	OR	AL,AL			; Is it set?
 1505/89E7 : 74 03                      	JZ	OUTC1			; Yes - don't output
 1506/89E9 : E9 0F 0F                   	JMP	POPAF
 1507/89EC :                            OUTC1:
 1508/89EC : 58                         	POP	AX			; Restore character
 1509/89ED : 86 E0                      	XCHG	AH,AL
 1510/89EF : 9E                         	SAHF
 1511/89F0 : 51                         	PUSH	CX			; Save buffer length
 1512/89F1 : 9F                         	LAHF
 1513/89F2 : 86 E0                      	XCHG	AH,AL
 1514/89F4 : 50                         	PUSH	AX			; Save character
 1515/89F5 : 86 E0                      	XCHG	AH,AL
 1516/89F7 : 3C 20                      	CMP	AL,' '			; Is it a control code?
 1517/89F9 : 72 1A                      	JC	DINPOS			; Yes - Don't INC POS(X)
 1518/89FB : A0 8C 08                   	MOV	AL,[LWIDTH]		; Get line width
 1519/89FE : 8A E8                      	MOV	CH,AL			; To B
 1520/8A00 : A0 F5 08                   	MOV	AL,[CURPOS]		; Get cursor position
 1521/8A03 : FE C5                      	INC	CH			; Width 255?
 1522/8A05 : 74 09                      	JZ	INCLEN			; Yes - No width limit
 1523/8A07 : FE CD                      	DEC	CH			; Restore width
 1524/8A09 : 3A C5                      	CMP	AL,CH			; At end of line?
 1525/8A0B : 75 03                      	JNZ	INCLEN
 1526/8A0D : E8 52 05                   	CALL	PRCRLF			; Yes - output CRLF
 1527/8A10 :                            INCLEN:
 1528/8A10 : FE C0                      	INC	AL			; Move on one character
 1529/8A12 : A2 F5 08                   	MOV	[CURPOS],AL		; Save new position
 1530/8A15 :                            DINPOS:
 1531/8A15 : 58                         	POP	AX			; Restore character
 1532/8A16 : 86 E0                      	XCHG	AH,AL
 1533/8A18 : 9E                         	SAHF
 1534/8A19 : 59                         	POP	CX			; Restore buffer length
 1535/8A1A : E8 41 F6                   	CALL	putch			; Send it
 1536/8A1D : C3                         	RET
 1537/8A1E :                            ;
 1538/8A1E :                            CLOTST:
 1539/8A1E : E8 0E F6                   	CALL	getch			; Get input character
 1540/8A21 : 24 7F                      	AND	AL,01111111B		; Strip bit 7
 1541/8A23 : 3C 0F                      	CMP	AL,CTRLO		; Is it control "O"?
 1542/8A25 : 74 01                      	JZ	CLOTST1
 1543/8A27 : C3                         	RET				; No don't flip flag
 1544/8A28 :                            CLOTST1:
 1545/8A28 : A0 8F 08                   	MOV	AL,[CTLOFG]		; Get flag
 1546/8A2B : F6 D0                      	NOT	AL			; Flip it
 1547/8A2D : A2 8F 08                   	MOV	[CTLOFG],AL		; Put it back
 1548/8A30 : 32 C0                      	XOR	AL,AL			; Null character
 1549/8A32 : C3                         	RET
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 27 - 2023/10/14 12時49分15秒


 1550/8A33 :                            ;
 1551/8A33 :                            LIST:
 1552/8A33 : E8 BA 02                   	CALL	ATOH			; ASCII number to DE
 1553/8A36 : 74 01                      	JZ	LIST1
 1554/8A38 : C3                         	RET				; Return if anything extra
 1555/8A39 :                            LIST1:
 1556/8A39 : 59                         	POP	CX			; Rubbish - Not needed
 1557/8A3A : E8 18 FD                   	CALL	SRCHLN			; Search for line number in DE
 1558/8A3D : 51                         	PUSH	CX			; Save address of line
 1559/8A3E : E8 65 00                   	CALL	SETLIN			; Set up lines counter
 1560/8A41 :                            LISTLP:
 1561/8A41 : 5B                         	POP	BX			; Restore address of line
 1562/8A42 : 8A 0F                      	MOV	CL,[BX]			; Get LSB of next line
 1563/8A44 :                            ;	LAHF
 1564/8A44 : 43                         	INC	BX
 1565/8A45 :                            ;	SAHF
 1566/8A45 : 8A 2F                      	MOV	CH,[BX]			; Get MSB of next line
 1567/8A47 :                            ;	LAHF
 1568/8A47 : 43                         	INC	BX
 1569/8A48 :                            ;	SAHF
 1570/8A48 : 8A C5                      	MOV	AL,CH			; BC = 0 (End of program)?
 1571/8A4A : 0A C1                      	OR	AL,CL
 1572/8A4C : 75 03                      	JNZ	LISTLP1			; Yes - Go to command mode
 1573/8A4E : E9 17 FC                   	JMP	PRNTOK
 1574/8A51 :                            LISTLP1:
 1575/8A51 : E8 5D 00                   	CALL	COUNT			; Count lines
 1576/8A54 : E8 BC 01                   	CALL	TSTBRK			; Test for break key
 1577/8A57 : 51                         	PUSH	CX			; Save address of next line
 1578/8A58 : E8 07 05                   	CALL	PRCRLF			; Output CRLF
 1579/8A5B : 8A 17                      	MOV	DL,[BX]			; Get LSB of line numbe
 1580/8A5D : 9F                         	LAHF
 1581/8A5E : 43                         	INC	BX
 1582/8A5F : 9E                         	SAHF
 1583/8A60 : 8A 37                      	MOV	DH,[BX]			; Get MSB of line number
 1584/8A62 : 9F                         	LAHF
 1585/8A63 : 43                         	INC	BX
 1586/8A64 : 9E                         	SAHF
 1587/8A65 : 53                         	PUSH	BX			; Save address of line start
 1588/8A66 : 87 DA                      	XCHG	BX,DX			; Line number to HL
 1589/8A68 : E8 B4 17                   	CALL	PRNTHL			; Output line number in decimal
 1590/8A6B : B0 20                      	MOV	AL,' '			; Space after line number
 1591/8A6D : 5B                         	POP	BX			; Restore start of line address
 1592/8A6E :                            LSTLP2:
 1593/8A6E : E8 6B FF                   	CALL	OUTC			; Output character in A
 1594/8A71 :                            LSTLP3:
 1595/8A71 : 8A 07                      	MOV	AL,[BX]			; Get next byte in line
 1596/8A73 : 0A C0                      	OR	AL,AL			; End of line?
 1597/8A75 : 9F                         	LAHF
 1598/8A76 : 43                         	INC	BX			; To next byte in line
 1599/8A77 : 9E                         	SAHF
 1600/8A78 : 74 C7                      	JZ	LISTLP			; Yes - get next line
 1601/8A7A : 79 F2                      	JNS	LSTLP2			; No token - output it
 1602/8A7C : 2C 7F                      	SUB	AL,ZEND-1		; Find and output word
 1603/8A7E : 8A C8                      	MOV	CL,AL			; Token offset+1 to C
 1604/8A80 : BA 6E 83                   	MOV	DX,WORDS		; Reserved word list
 1605/8A83 :                            FNDTOK:
 1606/8A83 : 87 DA                      	XCHG	BX,DX
 1607/8A85 : 8A 07                      	MOV	AL,[BX]			; Get character in list
 1608/8A87 : 87 DA                      	XCHG	BX,DX
 1609/8A89 :                            ;	LAHF
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 28 - 2023/10/14 12時49分15秒


 1610/8A89 : 42                         	INC	DX			; Move on to next
 1611/8A8A :                            ;	SAHF
 1612/8A8A : 0A C0                      	OR	AL,AL			; Is it start of word?
 1613/8A8C : 79 F5                      	JNS	FNDTOK			; No - Keep looking for word
 1614/8A8E : FE C9                      	DEC	CL			; Count words
 1615/8A90 : 75 F1                      	JNZ	FNDTOK			; Not there - keep look
 1616/8A92 :                            OUTWRD:
 1617/8A92 : 24 7F                      	AND	AL,01111111B		; Strip bit 7
 1618/8A94 : E8 45 FF                   	CALL	OUTC			; Output first character
 1619/8A97 : 87 DA                      	XCHG	BX,DX
 1620/8A99 : 8A 07                      	MOV	AL,[BX]			; Get next character
 1621/8A9B : 87 DA                      	XCHG	BX,DX
 1622/8A9D : 9F                         	LAHF
 1623/8A9E : 42                         	INC	DX			; Move on to next
 1624/8A9F : 9E                         	SAHF
 1625/8AA0 : 0A C0                      	OR	AL,AL			; Is it end of word?
 1626/8AA2 : 79 EE                      	JNS	OUTWRD			; No - output the rest
 1627/8AA4 : EB CB                      	JMP	LSTLP3			; Next byte in line
 1628/8AA6 :                            ;
 1629/8AA6 :                            SETLIN:
 1630/8AA6 : 53                         	PUSH	BX			; Set up LINES counter
 1631/8AA7 : 8B 1E 92 08                	MOV	BX,[LINESN]		; Get LINES number
 1632/8AAB : 89 1E 90 08                	MOV	[LINESC],BX		; Save in LINES counter
 1633/8AAF : 5B                         	POP	BX
 1634/8AB0 : C3                         	RET
 1635/8AB1 :                            ;
 1636/8AB1 :                            COUNT:
 1637/8AB1 : 53                         	PUSH	BX			; Save code string address
 1638/8AB2 : 52                         	PUSH	DX
 1639/8AB3 : 8B 1E 90 08                	MOV	BX,[LINESC]		; Get LINES counter
 1640/8AB7 : BA FF FF                   	MOV	DX,-1
 1641/8ABA : 13 DA                      	ADC	BX,DX			; Decrement
 1642/8ABC :                            ;
 1643/8ABC : 89 1E 90 08                	MOV	[LINESC],BX		; Put it back
 1644/8AC0 : 5A                         	POP	DX
 1645/8AC1 : 5B                         	POP	BX			; Restore code string address
 1646/8AC2 : 78 01                      	JS	COUNT1
 1647/8AC4 : C3                         	RET				; Return if more lines to go
 1648/8AC5 :                            COUNT1:
 1649/8AC5 : 53                         	PUSH	BX			; Save code string address
 1650/8AC6 : 8B 1E 92 08                	MOV	BX,[LINESN]		; Get LINES number
 1651/8ACA : 89 1E 90 08                	MOV	[LINESC],BX		; Reset LINES counter
 1652/8ACE : E8 5E F5                   	CALL	getch			; Get input character
 1653/8AD1 : 3C 03                      	CMP	AL,CTRLC		; Is it control "C"?
 1654/8AD3 : 74 03                      	JZ	RSLNBK			; Yes - Reset LINES an break
 1655/8AD5 : 5B                         	POP	BX			; Restore code string address
 1656/8AD6 : EB D9                      	JMP	COUNT			; Keep on counting
 1657/8AD8 :                            ;
 1658/8AD8 :                            RSLNBK:
 1659/8AD8 : 8B 1E 92 08                	MOV	BX,[LINESN]		; Get LINES number
 1660/8ADC : 89 1E 90 08                	MOV	[LINESC],BX		; Reset LINES counter
 1661/8AE0 : E9 BD F7                   	JMP	BRKRET			; Go and output "Break"
 1662/8AE3 :                            ;
 1663/8AE3 :                            FOR:
 1664/8AE3 : B0 64                      	MOV	AL,64H			; Flag "FOR" assignment
 1665/8AE5 : A2 15 09                   	MOV	[FORFLG],AL		; Save "FOR" flag
 1666/8AE8 : E8 46 03                   	CALL	LET			; Set up initial index
 1667/8AEB : 59                         	POP	CX			; Drop RETurn address
 1668/8AEC : 53                         	PUSH	BX			; Save code string address
 1669/8AED : E8 1E 03                   	CALL	DATA			; Get next statement address
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 29 - 2023/10/14 12時49分15秒


 1670/8AF0 : 89 1E 11 09                	MOV	[LOOPST],BX		; Save it for start of loop
 1671/8AF4 : BB 02 00                   	MOV	BX,2			; Offset for "FOR" block
 1672/8AF7 : 03 DC                      	ADD	BX,SP			; Point to it
 1673/8AF9 :                            FORSLP:
 1674/8AF9 : E8 9C FA                   	CALL	LOKFOR			; Look for existing "FOR" block
 1675/8AFC : 5A                         	POP	DX			; Get code string address
 1676/8AFD : 75 19                      	JNZ	FORFND			; No nesting found
 1677/8AFF : 03 D9                      	ADD	BX,CX			; Move into "FOR" block
 1678/8B01 : 52                         	PUSH	DX			; Save code string address
 1679/8B02 :                            ;	LAHF
 1680/8B02 : 4B                         	DEC	BX
 1681/8B03 :                            ;	SAHF
 1682/8B03 : 8A 37                      	MOV	DH,[BX]			; Get MSB of loop statement
 1683/8B05 :                            ;	LAHF
 1684/8B05 : 4B                         	DEC	BX
 1685/8B06 :                            ;	SAHF
 1686/8B06 : 8A 17                      	MOV	DL,[BX]			; Get LSB of loop statement
 1687/8B08 :                            ;	LAHF
 1688/8B08 : 43                         	INC	BX
 1689/8B09 :                            ;	SAHF
 1690/8B09 :                            ;	LAHF
 1691/8B09 : 43                         	INC	BX
 1692/8B0A :                            ;	SAHF
 1693/8B0A : 53                         	PUSH	BX			; Save block address
 1694/8B0B : 8B 1E 11 09                	MOV	BX,[LOOPST]		; Get address of loop statement
 1695/8B0F : E8 A5 FE                   	CALL	CPDEHL			; Compare the FOR loops
 1696/8B12 : 5B                         	POP	BX			; Restore block address
 1697/8B13 : 75 E4                      	JNZ	FORSLP			; Different FORs - Find another
 1698/8B15 : 5A                         	POP	DX			; Restore code string address
 1699/8B16 : 8B E3                      	MOV	SP,BX			; Remove all nested loops
 1700/8B18 :                            ;
 1701/8B18 :                            FORFND:
 1702/8B18 : 87 DA                      	XCHG	BX,DX			; Code string address to HL
 1703/8B1A : B1 08                      	MOV	CL,8
 1704/8B1C : E8 BE FA                   	CALL	CHKSTK			; Check for 8 levels of stack
 1705/8B1F : 53                         	PUSH	BX			; Save code string address
 1706/8B20 : 8B 1E 11 09                	MOV	BX,[LOOPST]		; Get first statement of loop
 1707/8B24 : 8B EC                      	MOV	BP,SP
 1708/8B26 : 87 5E 00                   	XCHG	[BP],BX			; Save and restore code string
 1709/8B29 : 53                         	PUSH	BX			; Re-save code string address
 1710/8B2A : 8B 1E A6 08                	MOV	BX,[LINEAT]		; Get current line number
 1711/8B2E : 8B EC                      	MOV	BP,SP
 1712/8B30 : 87 5E 00                   	XCHG	[BP],BX			; Save and restore code string
 1713/8B33 : E8 79 06                   	CALL	TSTNUM			; Make sure it's a number
 1714/8B36 : E8 8A FE                   	CALL	CHKSYN			; Make sure "TO" is next
 1715/8B39 : A6                         	DB	ZTO			; "TO" token
 1716/8B3A : E8 6F 06                   	CALL	GETNUM			; Get "TO" expression value
 1717/8B3D : 53                         	PUSH	BX			; Save code string address
 1718/8B3E : E8 E9 14                   	CALL	BCDEFP			; Move "TO" value to BCDE
 1719/8B41 : 5B                         	POP	BX			; Restore code string address
 1720/8B42 : 51                         	PUSH	CX			; Save "TO" value in block
 1721/8B43 : 52                         	PUSH	DX
 1722/8B44 : B9 00 81                   	MOV	CX,8100H		; BCDE - 1 (default STE
 1723/8B47 : 8A F1                      	MOV	DH,CL			; C=0
 1724/8B49 : 8A D6                      	MOV	DL,DH			; D=0
 1725/8B4B : 8A 07                      	MOV	AL,[BX]			; Get next byte in code string
 1726/8B4D : 3C AB                      	CMP	AL,ZSTEP		; See if "STEP" is stated
 1727/8B4F : B0 01                      	MOV	AL,1			; Sign of step = 1
 1728/8B51 : 75 0E                      	JNZ	SAVSTP			; No STEP given - Default to 1
 1729/8B53 : E8 86 00                   	CALL	GETCHR			; Jump over "STEP" token
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 30 - 2023/10/14 12時49分15秒


 1730/8B56 : E8 53 06                   	CALL	GETNUM			; Get step value
 1731/8B59 : 53                         	PUSH	BX			; Save code string address
 1732/8B5A : E8 CD 14                   	CALL	BCDEFP			; Move STEP to BCDE
 1733/8B5D : E8 5A 14                   	CALL	TSTSGN			; Test sign of FPREG
 1734/8B60 : 5B                         	POP	BX			; Restore code string address
 1735/8B61 :                            SAVSTP:
 1736/8B61 : 51                         	PUSH	CX			; Save the STEP value in block
 1737/8B62 : 52                         	PUSH	DX
 1738/8B63 : 9F                         	LAHF
 1739/8B64 : 86 E0                      	XCHG	AH,AL			; Save sign of STEP
 1740/8B66 : 50                         	PUSH	AX
 1741/8B67 : 86 E0                      	XCHG	AH,AL
 1742/8B69 : 44                         	INC	SP			; Don't save flags
 1743/8B6A : 53                         	PUSH	BX			; Save code string address
 1744/8B6B : 8B 1E 18 09                	MOV	BX,[BRKLIN]		; Get address of index variable
 1745/8B6F : 8B EC                      	MOV	BP,SP
 1746/8B71 : 87 5E 00                   	XCHG	[BP],BX			; Save and restore code string
 1747/8B74 :                            PUTFID:
 1748/8B74 : B5 81                      	MOV	CH,ZFOR			; "FOR" block marker
 1749/8B76 : 51                         	PUSH	CX			; Save it
 1750/8B77 : 44                         	INC	SP			; Don't save C
 1751/8B78 :                            ;
 1752/8B78 :                            RUNCNT:
 1753/8B78 : E8 98 00                   	CALL	TSTBRK			; Execution driver - Test break
 1754/8B7B : 89 1E 18 09                	MOV	[BRKLIN],BX		; Save code address for a key
 1755/8B7F : 8A 07                      	MOV	AL,[BX]			; Get next byte in code string
 1756/8B81 : 3C 3A                      	CMP	AL,':'			; Multi statement line?
 1757/8B83 : 74 28                      	JZ	EXCUTE			; Yes - Execute it
 1758/8B85 : 0A C0                      	OR	AL,AL			; End of line?
 1759/8B87 : 74 03                      	JZ	RUNCNT1			; No - Syntax error
 1760/8B89 : E9 7F FA                   	JMP	SNERR
 1761/8B8C :                            RUNCNT1:
 1762/8B8C : 9F                         	LAHF
 1763/8B8D : 43                         	INC	BX			; Point to address of next line
 1764/8B8E : 9E                         	SAHF
 1765/8B8F : 8A 07                      	MOV	AL,[BX]			; Get LSB of line point
 1766/8B91 : 9F                         	LAHF
 1767/8B92 : 43                         	INC	BX
 1768/8B93 : 9E                         	SAHF
 1769/8B94 : 0A 07                      	OR	AL,[BX]			; Is it zero (End of prog)?
 1770/8B96 : 75 03                      	JNZ	RUNCNT2			; Yes - Terminate execution
 1771/8B98 : E9 B4 00                   	JMP	ENDPRG
 1772/8B9B :                            RUNCNT2:
 1773/8B9B : 9F                         	LAHF
 1774/8B9C : 43                         	INC	BX			; Point to line number
 1775/8B9D : 9E                         	SAHF
 1776/8B9E : 8A 17                      	MOV	DL,[BX]			; Get LSB of line numbe
 1777/8BA0 : 9F                         	LAHF
 1778/8BA1 : 43                         	INC	BX
 1779/8BA2 : 9E                         	SAHF
 1780/8BA3 : 8A 37                      	MOV	DH,[BX]			; Get MSB of line numbe
 1781/8BA5 : 87 DA                      	XCHG	BX,DX			; Line number to HL
 1782/8BA7 : 89 1E A6 08                	MOV	[LINEAT],BX		; Save as current line number
 1783/8BAB : 87 DA                      	XCHG	BX,DX			; Line number back to DE
 1784/8BAD :                            EXCUTE:
 1785/8BAD : E8 2C 00                   	CALL	GETCHR			; Get key word
 1786/8BB0 : BA 78 8B                   	MOV	DX,RUNCNT		; Where to RETurn to
 1787/8BB3 : 52                         	PUSH	DX			; Save for RETurn
 1788/8BB4 :                            IFJMP:
 1789/8BB4 : 75 01                      	JNZ	ONJMP
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 31 - 2023/10/14 12時49分15秒


 1790/8BB6 : C3                         	RET				; Go to RUNCNT if end of STMT
 1791/8BB7 :                            ONJMP:
 1792/8BB7 : 2C 80                      	SUB	AL,ZEND			; Is it a token?
 1793/8BB9 : 73 03                      	JNC	ONJMP1
 1794/8BBB : E9 73 02                   	JMP	LET			; No - try to assign it
 1795/8BBE :                            ONJMP1:
 1796/8BBE : 3C 25                      	CMP	AL,ZNEW+1-ZEND		; END to NEW ?
 1797/8BC0 : 72 03                      	JC	ONJMP2
 1798/8BC2 : E9 46 FA                   	JMP	SNERR			; Not a key word - ?SN Error
 1799/8BC5 :                            ONJMP2:
 1800/8BC5 : D0 C0                      	ROL	AL,1			; Double it
 1801/8BC7 : 8A C8                      	MOV	CL,AL			; BC = Offset into table
 1802/8BC9 : B5 00                      	MOV	CH,0
 1803/8BCB : 87 DA                      	XCHG	BX,DX			; Save code string address
 1804/8BCD : BB 8D 84                   	MOV	BX,WORDTB		; Keyword address table
 1805/8BD0 : 03 D9                      	ADD	BX,CX			; Point to routine address
 1806/8BD2 : 8A 0F                      	MOV	CL,[BX]			; Get LSB of routine address
 1807/8BD4 : 9F                         	LAHF
 1808/8BD5 : 43                         	INC	BX
 1809/8BD6 : 9E                         	SAHF
 1810/8BD7 : 8A 2F                      	MOV	CH,[BX]			; Get MSB of routine address
 1811/8BD9 : 51                         	PUSH	CX			; Save routine address
 1812/8BDA : 87 DA                      	XCHG	BX,DX			; Restore code string address
 1813/8BDC :                            ;
 1814/8BDC :                            GETCHR:
 1815/8BDC :                            ;	LAHF
 1816/8BDC : 43                         	INC	BX			; Point to next character
 1817/8BDD :                            ;	SAHF
 1818/8BDD : 8A 07                      	MOV	AL,[BX]			; Get next code string byte
 1819/8BDF : 3C 3A                      	CMP	AL,':'			; Z if ':'
 1820/8BE1 : 72 01                      	JC	GETCHR1
 1821/8BE3 : C3                         	RET				; NC if > "9"
 1822/8BE4 :                            GETCHR1:
 1823/8BE4 : 3C 20                      	CMP	AL,' '
 1824/8BE6 : 74 F4                      	JZ	GETCHR			; Skip over spaces
 1825/8BE8 : 3C 30                      	CMP	AL,'0'
 1826/8BEA : F5                         	CMC				; NC if < '0'
 1827/8BEB : FE C0                      	INC	AL			; Test for zero - Leave carry
 1828/8BED : FE C8                      	DEC	AL			; Z if Null
 1829/8BEF : C3                         	RET
 1830/8BF0 :                            ;
 1831/8BF0 :                            RESTOR:
 1832/8BF0 : 87 DA                      	XCHG	BX,DX			; Save code string address
 1833/8BF2 : 8B 1E A8 08                	MOV	BX,[BASTXT]		; Point to start of program
 1834/8BF6 : 74 11                      	JZ	RESTNL			; Just RESTORE - reset pointer
 1835/8BF8 : 87 DA                      	XCHG	BX,DX			; Restore code string address
 1836/8BFA : E8 F3 00                   	CALL	ATOH			; Get line number to DE
 1837/8BFD : 53                         	PUSH	BX			; Save code string address
 1838/8BFE : E8 54 FB                   	CALL	SRCHLN			; Search for line number in DE
 1839/8C01 : 8B D9                      	MOV	BX,CX			; HL = Address of line
 1840/8C03 : 5A                         	POP	DX			; Restore code string address
 1841/8C04 : 72 03                      	JC	RESTNL
 1842/8C06 : E9 CA 01                   	JMP	ULERR			; ?UL Error if not found
 1843/8C09 :                            RESTNL:
 1844/8C09 : 9F                         	LAHF
 1845/8C0A : 4B                         	DEC	BX			; Byte before DATA statement
 1846/8C0B : 9E                         	SAHF
 1847/8C0C :                            UPDATA:
 1848/8C0C : 89 1E 26 09                	MOV	[NXTDAT],BX		; Update DATA pointer
 1849/8C10 : 87 DA                      	XCHG	BX,DX			; Restore code string address
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 32 - 2023/10/14 12時49分15秒


 1850/8C12 : C3                         	RET
 1851/8C13 :                            ;
 1852/8C13 :                            
 1853/8C13 :                            TSTBRK:
 1854/8C13 : E8 EC F5                   	CALL	CHKCHR			; Check input status
 1855/8C16 : 75 01                      	JNZ	TSTBRK1
 1856/8C18 : C3                         	RET				; No key, go back
 1857/8C19 :                            TSTBRK1:
 1858/8C19 : E8 13 F4                   	CALL	getch			; Get the key into A
 1859/8C1C : 3C 1B                      	CMP	AL,ESC			; Escape key?
 1860/8C1E : 74 17                      	JZ	BRK			; Yes, break
 1861/8C20 : 3C 03                      	CMP	AL,CTRLC		; <Ctrl-C>
 1862/8C22 : 74 13                      	JZ	BRK			; Yes, break
 1863/8C24 : 3C 13                      	CMP	AL,CTRLS		; Stop scrolling?
 1864/8C26 : 74 01                      	JZ	STALL
 1865/8C28 : C3                         	RET				; Other key, ignore
 1866/8C29 :                            ;
 1867/8C29 :                            
 1868/8C29 :                            STALL:
 1869/8C29 : E8 03 F4                   	CALL	getch			; Wait for key
 1870/8C2C : 3C 11                      	CMP	AL,CTRLQ		; Resume scrolling?
 1871/8C2E : 75 01                      	JNZ	STALL1
 1872/8C30 : C3                         	RET				; Release the chokehold
 1873/8C31 :                            STALL1:
 1874/8C31 : 3C 03                      	CMP	AL,CTRLC		; Second break?
 1875/8C33 : 74 07                      	JZ	STOP			; Break during hold exit
 1876/8C35 : EB F2                      	JMP	STALL			; Loop until <Ctrl-Q> o
 1877/8C37 :                            ;
 1878/8C37 :                            BRK:
 1879/8C37 : B0 FF                      	MOV	AL,0FFH      		; Set BRKFLG
 1880/8C39 : A2 97 08                   	MOV	[BRKFLG],AL		; Store it
 1881/8C3C :                            ;
 1882/8C3C :                            
 1883/8C3C :                            STOP:
 1884/8C3C : 74 01                      	JZ	STOP1
 1885/8C3E : C3                         	RET				; Exit if anything else
 1886/8C3F :                            STOP1:
 1887/8C3F : 0C C0                      	OR	AL,11000000B		; Flag "STOP"
 1888/8C41 : EB 03                      	JMP	PEND1
 1889/8C43 :                            PEND:
 1890/8C43 : 74 01                      	JZ	PEND1
 1891/8C45 : C3                         	RET				; Exit if anything else
 1892/8C46 :                            PEND1:
 1893/8C46 : 89 1E 18 09                	MOV	[BRKLIN],BX		; Save point of break
 1894/8C4A : EB 02                      	JMP	INPBRK1			; Skip "OR AL,11111111B"
 1895/8C4C :                            INPBRK:
 1896/8C4C : 0C FF                      	OR	AL,11111111B		; Flag "Break" wanted
 1897/8C4E :                            INPBRK1:
 1898/8C4E : 59                         	POP	CX			; Return not needed and more
 1899/8C4F :                            ENDPRG:
 1900/8C4F : 8B 1E A6 08                	MOV	BX,[LINEAT]		; Get current line number
 1901/8C53 : 9F                         	LAHF
 1902/8C54 : 86 E0                      	XCHG	AH,AL
 1903/8C56 : 50                         	PUSH	AX			; Save STOP / END statu
 1904/8C57 : 86 E0                      	XCHG	AH,AL
 1905/8C59 : 8A C3                      	MOV	AL,BL			; Is it direct break?
 1906/8C5B : 22 C7                      	AND	AL,BH
 1907/8C5D : FE C0                      	INC	AL			; Line is -1 if direct break
 1908/8C5F : 74 0C                      	JZ	NOLIN			; Yes - No line number
 1909/8C61 : 89 1E 1C 09                	MOV	[ERRLIN],BX		; Save line of break
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 33 - 2023/10/14 12時49分15秒


 1910/8C65 : 8B 1E 18 09                	MOV	BX,[BRKLIN]		; Get point of break
 1911/8C69 : 89 1E 1E 09                	MOV	[CONTAD],BX		; Save point to CONTinue
 1912/8C6D :                            NOLIN:
 1913/8C6D : 32 C0                      	XOR	AL,AL
 1914/8C6F : A2 8F 08                   	MOV	[CTLOFG],AL		; Enable output
 1915/8C72 : E8 DF 02                   	CALL	STTLIN			; Start a new line
 1916/8C75 : 58                         	POP	AX			; Restore STOP / END status
 1917/8C76 : 86 E0                      	XCHG	AH,AL
 1918/8C78 : 9E                         	SAHF
 1919/8C79 : BB 8D 85                   	MOV	BX,BRKMSG		; "Break" message
 1920/8C7C : 74 03                      	JZ	NOLIN1
 1921/8C7E : E9 C7 F9                   	JMP	ERRIN			; "in line" wanted?
 1922/8C81 :                            NOLIN1:
 1923/8C81 : E9 E4 F9                   	JMP	PRNTOK			; Go to command mode
 1924/8C84 :                            ;
 1925/8C84 :                            CONT:
 1926/8C84 : 8B 1E 1E 09                	MOV	BX,[CONTAD]		; Get CONTinue address
 1927/8C88 : 8A C7                      	MOV	AL,BH			; Is it zero?
 1928/8C8A : 0A C3                      	OR	AL,BL
 1929/8C8C : B2 20                      	MOV	DL,CN			; ?CN Error
 1930/8C8E : 75 03                      	JNZ	CONT1
 1931/8C90 : E9 92 F9                   	JMP	ERROR			; Yes - output "?CN Error"
 1932/8C93 :                            CONT1:
 1933/8C93 : 87 DA                      	XCHG	BX,DX			; Save code string address
 1934/8C95 : 8B 1E 1C 09                	MOV	BX,[ERRLIN]		; Get line of last break
 1935/8C99 : 89 1E A6 08                	MOV	[LINEAT],BX		; Set up current line number
 1936/8C9D : 87 DA                      	XCHG	BX,DX			; Restore code string address
 1937/8C9F : C3                         	RET				; CONTinue where left off
 1938/8CA0 :                            ;
 1939/8CA0 :                            NULL:
 1940/8CA0 : E8 8D 0F                   	CALL	GETINT			; Get integer 0-255
 1941/8CA3 : 74 01                      	JZ	NULL1
 1942/8CA5 : C3                         	RET				; Return if bad value
 1943/8CA6 :                            NULL1:
 1944/8CA6 : A2 8B 08                   	MOV	[NULLS],AL		; Set nulls number
 1945/8CA9 : C3                         	RET
 1946/8CAA :                            ;
 1947/8CAA :                            
 1948/8CAA :                            ACCSUM:
 1949/8CAA : 53                         	PUSH	BX			; Save address in array
 1950/8CAB : 8B 1E 94 08                	MOV	BX,[CHKSUM]		; Get check sum
 1951/8CAF : B5 00                      	MOV	CH,0			; BC - Value of byte
 1952/8CB1 : 8A C8                      	MOV	CL,AL
 1953/8CB3 : 03 D9                      	ADD	BX,CX			; Add byte to check sum
 1954/8CB5 : 89 1E 94 08                	MOV	[CHKSUM],BX		; Re-save check sum
 1955/8CB9 : 5B                         	POP	BX			; Restore address in array
 1956/8CBA : C3                         	RET
 1957/8CBB :                            ;
 1958/8CBB :                            CHKLTR:
 1959/8CBB : 8A 07                      	MOV	AL,[BX]			; Get byte
 1960/8CBD : 3C 41                      	CMP	AL,'A'			; < 'A' ?
 1961/8CBF : 73 01                      	JNC	CHKLTR1
 1962/8CC1 : C3                         	RET         			  ; Carry set if not letter
 1963/8CC2 :                            CHKLTR1:
 1964/8CC2 : 3C 5B                      	CMP	AL,'Z'+1		; > 'Z' ?
 1965/8CC4 : F5                         	CMC
 1966/8CC5 : C3                         	RET				; Carry set if not letter
 1967/8CC6 :                            ;
 1968/8CC6 :                            FPSINT:
 1969/8CC6 : E8 13 FF                   	CALL	GETCHR			; Get next character
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 34 - 2023/10/14 12時49分15秒


 1970/8CC9 :                            POSINT:
 1971/8CC9 : E8 E0 04                   	CALL	GETNUM			; Get integer 0 to 32767
 1972/8CCC :                            DEPINT:
 1973/8CCC : E8 EB 12                   	CALL	TSTSGN			; Test sign of FPREG
 1974/8CCF : 78 1A                      	JS	FCERR			; Negative - ?FC Error
 1975/8CD1 :                            DEINT:
 1976/8CD1 : A0 31 09                   	MOV	AL,[FPEXP]		; Get integer value to DE
 1977/8CD4 : 3C 90                      	CMP	AL,80H+16		; Exponent in range (16 bits)?
 1978/8CD6 : 73 03                      	JNC	DEINT1
 1979/8CD8 : E9 EC 13                   	JMP	FPINT			; Yes - convert it
 1980/8CDB :                            DEINT1:
 1981/8CDB : B9 80 90                   	MOV	CX,9080H		; BCDE = -32768
 1982/8CDE : BA 00 00                   	MOV	DX,0000
 1983/8CE1 : 53                         	PUSH	BX			; Save code string address
 1984/8CE2 : E8 90 13                   	CALL	CMPNUM			; Compare FPREG with BCDE
 1985/8CE5 : 5B                         	POP	BX			; Restore code string address
 1986/8CE6 : 8A F1                      	MOV	DH,CL			; MSB to D
 1987/8CE8 : 75 01                      	JNZ	FCERR
 1988/8CEA : C3                         	RET				; Return if in range
 1989/8CEB :                            FCERR:
 1990/8CEB : B2 08                      	MOV	DL,FC			; ?FC Error
 1991/8CED : E9 35 F9                   	JMP	ERROR			; Output error-
 1992/8CF0 :                            ;
 1993/8CF0 :                            ATOH:
 1994/8CF0 : 9F                         	LAHF
 1995/8CF1 : 4B                         	DEC	BX			; ASCII number to DE binary
 1996/8CF2 : 9E                         	SAHF
 1997/8CF3 :                            GETLN:
 1998/8CF3 : BA 00 00                   	MOV	DX,0			; Get number to DE
 1999/8CF6 :                            GTLNLP:
 2000/8CF6 : E8 E3 FE                   	CALL	GETCHR			; Get next character
 2001/8CF9 : 72 01                      	JC	GTLNLP1
 2002/8CFB : C3                         	RET				; Exit if not a digit
 2003/8CFC :                            GTLNLP1:
 2004/8CFC : 53                         	PUSH	BX			; Save code string address
 2005/8CFD : 9F                         	LAHF
 2006/8CFE : 86 E0                      	XCHG	AH,AL
 2007/8D00 : 50                         	PUSH	AX			; Save digit
 2008/8D01 : 86 E0                      	XCHG	AH,AL
 2009/8D03 : BB 98 19                   	MOV	BX,65529/10		; Largest number 65529
 2010/8D06 : E8 AE FC                   	CALL	CPDEHL			; Number in range?
 2011/8D09 : 73 03                      	JNC	GTLNLP2			; No - ?SN Error
 2012/8D0B : E9 FD F8                   	JMP	SNERR
 2013/8D0E :                            GTLNLP2:
 2014/8D0E : 8B DA                      	MOV	BX,DX			; HL = Number
 2015/8D10 : 03 DA                      	ADD	BX,DX			; Times 2
 2016/8D12 : 03 DB                      	ADD	BX,BX			; Times 4
 2017/8D14 : 03 DA                      	ADD	BX,DX			; Times 5
 2018/8D16 : 03 DB                      	ADD	BX,BX			; Times 10
 2019/8D18 : 58                         	POP	AX			; Restore digit
 2020/8D19 : 86 E0                      	XCHG	AH,AL
 2021/8D1B : 9E                         	SAHF
 2022/8D1C : 2C 30                      	SUB	AL,'0'			; Make it 0 to 9
 2023/8D1E : 8A D0                      	MOV	DL,AL			; DE = Value of digit
 2024/8D20 : B6 00                      	MOV	DH,0
 2025/8D22 : 03 DA                      	ADD	BX,DX			; Add to number
 2026/8D24 : 87 DA                      	XCHG	BX,DX			; Number to DE
 2027/8D26 : 5B                         	POP	BX			; Restore code string address
 2028/8D27 : EB CD                      	JMP	GTLNLP			; Go to next character
 2029/8D29 :                            ;
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 35 - 2023/10/14 12時49分15秒


 2030/8D29 :                            CLEAR:
 2031/8D29 : 75 03                      	JNZ	CLEAR1
 2032/8D2B : E9 77 FA                   	JMP	INTVAR			; Just "CLEAR" Keep parameters
 2033/8D2E :                            CLEAR1:
 2034/8D2E : E8 98 FF                   	CALL	POSINT			; Get integer 0 to 32767 to DE
 2035/8D31 :                            ;	LAHF
 2036/8D31 : 4B                         	DEC	BX			; Cancel increment
 2037/8D32 :                            ;	SAHF
 2038/8D32 : E8 A7 FE                   	CALL	GETCHR			; Get next character
 2039/8D35 : 53                         	PUSH	BX			; Save code string address
 2040/8D36 : 8B 1E F9 08                	MOV	BX,[LSTRAM]		; Get end of RAM
 2041/8D3A : 74 19                      	JZ	STORED			; No value given - Use stored
 2042/8D3C : 5B                         	POP	BX			; Restore code string address
 2043/8D3D : E8 83 FC                   	CALL	CHKSYN			; Check for comma
 2044/8D40 : 2C                         	DB	','
 2045/8D41 : 52                         	PUSH	DX			; Save number
 2046/8D42 : E8 84 FF                   	CALL	POSINT			; Get integer 0 to 32767
 2047/8D45 :                            ;	LAHF
 2048/8D45 : 4B                         	DEC	BX			; Cancel increment
 2049/8D46 :                            ;	SAHF
 2050/8D46 : E8 93 FE                   	CALL	GETCHR			; Get next character
 2051/8D49 : 74 03                      	JZ	CLEAR2
 2052/8D4B : E9 BD F8                   	JMP	SNERR			; ?SN Error if more on line
 2053/8D4E :                            CLEAR2:
 2054/8D4E : 8B EC                      	MOV	BP,SP
 2055/8D50 : 87 5E 00                   	XCHG	[BP],BX			; Save code string address
 2056/8D53 : 87 DA                      	XCHG	BX,DX			; Number to DE
 2057/8D55 :                            STORED:
 2058/8D55 : 8A C3                      	MOV	AL,BL			; Get LSB of new RAM top
 2059/8D57 : 2A C2                      	SUB	AL,DL			; Subtract LSB of string space
 2060/8D59 : 8A D0                      	MOV	DL,AL			; Save LSB
 2061/8D5B : 8A C7                      	MOV	AL,BH			; Get MSB of new RAM top
 2062/8D5D : 1A C6                      	SBB	AL,DH			; Subtract MSB of string space
 2063/8D5F : 8A F0                      	MOV	DH,AL			; Save MSB
 2064/8D61 : 73 03                      	JNC	STORED1
 2065/8D63 : E9 99 F8                   	JMP	OMERR			; ?OM Error if not enough mem
 2066/8D66 :                            STORED1:
 2067/8D66 : 53                         	PUSH	BX			; Save RAM top
 2068/8D67 : 8B 1E 20 09                	MOV	BX,[PROGND]		; Get program end
 2069/8D6B : B9 28 00                   	MOV	CX,40			; 40 Bytes minimum working RAM
 2070/8D6E : 03 D9                      	ADD	BX,CX			; Get lowest address
 2071/8D70 : E8 44 FC                   	CALL	CPDEHL			; Enough memory?
 2072/8D73 : 72 03                      	JC	STORED2
 2073/8D75 : E9 87 F8                   	JMP	OMERR			; No - ?OM Error
 2074/8D78 :                            STORED2:
 2075/8D78 : 87 DA                      	XCHG	BX,DX			; RAM top to HL
 2076/8D7A : 89 1E A4 08                	MOV	[STRSPC],BX		; Set new string space
 2077/8D7E : 5B                         	POP	BX			; End of memory to use
 2078/8D7F : 89 1E F9 08                	MOV	[LSTRAM],BX		; Set new top of RAM
 2079/8D83 : 5B                         	POP	BX			; Restore code string address
 2080/8D84 : E9 1E FA                   	JMP	INTVAR			; Initialise variables
 2081/8D87 :                            ;
 2082/8D87 :                            RUN:
 2083/8D87 : 75 03                      	JNZ	RUN1
 2084/8D89 : E9 12 FA                   	JMP	RUNFST			; RUN from start if just RUN
 2085/8D8C :                            RUN1:
 2086/8D8C : E8 16 FA                   	CALL	INTVAR			; Initialise variables
 2087/8D8F : B9 78 8B                   	MOV	CX,RUNCNT		; Execution driver loop
 2088/8D92 : EB 1A                      	JMP	RUNLIN			; RUN from line number
 2089/8D94 :                            ;
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 36 - 2023/10/14 12時49分15秒


 2090/8D94 :                            GOSUB:
 2091/8D94 : B1 03                      	MOV	CL,3			; 3 Levels of stack needed
 2092/8D96 : E8 44 F8                   	CALL	CHKSTK			; Check for 3 levels of stack
 2093/8D99 : 59                         	POP	CX			; Get return address
 2094/8D9A : 53                         	PUSH	BX			; Save code string for RETURN
 2095/8D9B : 53                         	PUSH	BX			; And for GOSUB routine
 2096/8D9C : 8B 1E A6 08                	MOV	BX,[LINEAT]		; Get current line
 2097/8DA0 : 8B EC                      	MOV	BP,SP
 2098/8DA2 : 87 5E 00                   	XCHG	[BP],BX			; Into stack - Code string out
 2099/8DA5 : B0 8C                      	MOV	AL,ZGOSUB		; "GOSUB" token
 2100/8DA7 : 9F                         	LAHF
 2101/8DA8 : 86 E0                      	XCHG	AH,AL
 2102/8DAA : 50                         	PUSH	AX			; Save token
 2103/8DAB : 86 E0                      	XCHG	AH,AL
 2104/8DAD : 44                         	INC	SP			; Don't save flags
 2105/8DAE :                            ;
 2106/8DAE :                            RUNLIN:
 2107/8DAE : 51                         	PUSH	CX			; Save return address
 2108/8DAF :                            GOTO:
 2109/8DAF : E8 3E FF                   	CALL	ATOH			; ASCII number to DE binary
 2110/8DB2 : E8 5D 00                   	CALL	REM			; Get end of line
 2111/8DB5 : 53                         	PUSH	BX			; Save end of line
 2112/8DB6 : 8B 1E A6 08                	MOV	BX,[LINEAT]		; Get current line
 2113/8DBA : E8 FA FB                   	CALL	CPDEHL			; Line after current?
 2114/8DBD : 5B                         	POP	BX			; Restore end of line
 2115/8DBE : 9F                         	LAHF
 2116/8DBF : 43                         	INC	BX			; Start of next line
 2117/8DC0 : 9E                         	SAHF
 2118/8DC1 : 73 03                      	JNC	GOTO1
 2119/8DC3 : E8 93 F9                   	CALL	SRCHLP			; Line is after current line
 2120/8DC6 :                            GOTO1:
 2121/8DC6 : 72 03                      	JC	GOTO2
 2122/8DC8 : E8 8A F9                   	CALL	SRCHLN			; Line is before current line
 2123/8DCB :                            GOTO2:
 2124/8DCB : 8B D9                      	MOV	BX,CX			; Set up code string address
 2125/8DCD : 9F                         	LAHF
 2126/8DCE : 4B                         	DEC	BX			; Incremented after
 2127/8DCF : 9E                         	SAHF
 2128/8DD0 : 73 01                      	JNC	ULERR
 2129/8DD2 : C3                         	RET				; Line found
 2130/8DD3 :                            ULERR:
 2131/8DD3 : B2 0E                      	MOV	DL,UL			; ?UL Error
 2132/8DD5 : E9 4D F8                   	JMP	ERROR			; Output error message
 2133/8DD8 :                            ;
 2134/8DD8 :                            RETURN:
 2135/8DD8 : 74 01                      	JZ	RETURN1
 2136/8DDA : C3                         	RET				; Return if not just RETURN
 2137/8DDB :                            RETURN1:
 2138/8DDB : B6 FF                      	MOV	DH,-1			; Flag "GOSUB" search
 2139/8DDD : E8 B3 F7                   	CALL	BAKSTK			; Look "GOSUB" block
 2140/8DE0 : 8B E3                      	MOV	SP,BX			; Kill all FORs in subroutine
 2141/8DE2 : 3C 8C                      	CMP	AL,ZGOSUB		; Test for "GOSUB" token
 2142/8DE4 : B2 04                      	MOV	DL,RG			; ?RG Error
 2143/8DE6 : 74 03                      	JZ	RETURN2
 2144/8DE8 : E9 3A F8                   	JMP	ERROR			; Error if no "GOSUB" found
 2145/8DEB :                            RETURN2:
 2146/8DEB : 5B                         	POP	BX			; Get RETURN line number
 2147/8DEC : 89 1E A6 08                	MOV	[LINEAT],BX		; Save as current
 2148/8DF0 : 9F                         	LAHF
 2149/8DF1 : 43                         	INC	BX			; Was it from direct statement?
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 37 - 2023/10/14 12時49分15秒


 2150/8DF2 : 9E                         	SAHF
 2151/8DF3 : 8A C7                      	MOV	AL,BH
 2152/8DF5 : 0A C3                      	OR	AL,BL			; Return to line
 2153/8DF7 : 75 0A                      	JNZ	RETLIN			; No - Return to line
 2154/8DF9 : A0 16 09                   	MOV	AL,[LSTBIN]		; Any INPUT in subroutine?
 2155/8DFC : 0A C0                      	OR	AL,AL			; If so buffer is corrupted
 2156/8DFE : 74 03                      	JZ	RETLIN
 2157/8E00 : E9 64 F8                   	JMP	POPNOK			; Yes - Go to command mode
 2158/8E03 :                            RETLIN:
 2159/8E03 : BB 78 8B                   	MOV	BX,RUNCNT		; Execution driver loop
 2160/8E06 : 8B EC                      	MOV	BP,SP
 2161/8E08 : 87 5E 00                   	XCHG	[BP],BX			; Into stack - Code string out
 2162/8E0B : EB 01                      	JMP	DATA			; Skip "POP BX"
 2163/8E0D :                            NXTDTA:
 2164/8E0D : 5B                         	POP	BX			; Restore code string address
 2165/8E0E :                            ;
 2166/8E0E :                            DATA:
 2167/8E0E : B1 3A                      	MOV	CL,':'			; ":" End of statemen
 2168/8E10 : EB 02                      	JMP	REM1
 2169/8E12 :                            REM:
 2170/8E12 : B1 00                      	MOV	CL,0			; 00 End of statemen
 2171/8E14 :                            REM1:
 2172/8E14 : B5 00                      	MOV	CH,0
 2173/8E16 :                            NXTSTL:
 2174/8E16 : 8A C1                      	MOV	AL,CL			; Statement and byte
 2175/8E18 : 8A CD                      	MOV	CL,CH
 2176/8E1A : 8A E8                      	MOV	CH,AL			; Statement end byte
 2177/8E1C :                            NXTSTT:
 2178/8E1C : 8A 07                      	MOV	AL,[BX]			; Get byte
 2179/8E1E : 0A C0                      	OR	AL,AL			; End of line?
 2180/8E20 : 75 01                      	JNZ	NXTSTT1
 2181/8E22 : C3                         	RET				; Yes - Exit
 2182/8E23 :                            NXTSTT1:
 2183/8E23 : 3A C5                      	CMP	AL,CH			; End of statement?
 2184/8E25 : 75 01                      	JNZ	NXTSTT2
 2185/8E27 : C3                         	RET				; Yes - Exit
 2186/8E28 :                            NXTSTT2:
 2187/8E28 : 9F                         	LAHF
 2188/8E29 : 43                         	INC	BX
 2189/8E2A : 9E                         	SAHF				; Next byte
 2190/8E2B : 3C 22                      	CMP	AL,'"'			; Literal string?
 2191/8E2D : 74 E7                      	JZ	NXTSTL			; Yes - Look for another '"'
 2192/8E2F : EB EB                      	JMP	NXTSTT			; Keep looking
 2193/8E31 :                            ;
 2194/8E31 :                            LET:
 2195/8E31 : E8 4C 06                   	CALL	GETVAR			; Get variable name
 2196/8E34 : E8 8C FB                   	CALL	CHKSYN			; Make sure "=" follows
 2197/8E37 : B4                         	DB	ZEQUAL			; "=" token
 2198/8E38 : 52                         	PUSH	DX			; Save address of variable
 2199/8E39 : A0 F7 08                   	MOV	AL,[TYPE]		; Get data type
 2200/8E3C : 9F                         	LAHF
 2201/8E3D : 86 E0                      	XCHG	AH,AL
 2202/8E3F : 50                         	PUSH	AX			; Save type
 2203/8E40 : 86 E0                      	XCHG	AH,AL
 2204/8E42 : E8 80 03                   	CALL	EVAL			; Evaluate expression
 2205/8E45 : 58                         	POP	AX			; Restore type
 2206/8E46 : 86 E0                      	XCHG	AH,AL
 2207/8E48 : 9E                         	SAHF
 2208/8E49 : 8B EC                      	MOV	BP,SP
 2209/8E4B : 87 5E 00                   	XCHG	[BP],BX			; Save code - Get var addr
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 38 - 2023/10/14 12時49分15秒


 2210/8E4E : 89 1E 18 09                	MOV	[BRKLIN],BX		; Save address of variable
 2211/8E52 : D0 D8                      	RCR	AL,1			; Adjust type
 2212/8E54 : E8 5D 03                   	CALL	CHKTYP			; Check types are the same
 2213/8E57 : 74 3C                      	JZ	LETNUM			; Numeric - Move value
 2214/8E59 :                            LETSTR:
 2215/8E59 : 53                         	PUSH	BX			; Save address of string var
 2216/8E5A : 8B 1E 2E 09                	MOV	BX,[FPREG]		; Pointer to string entry
 2217/8E5E : 53                         	PUSH	BX			; Save it on stack
 2218/8E5F :                            ;	LAHF
 2219/8E5F : 43                         	INC	BX			; Skip over length
 2220/8E60 :                            ;	SAHF
 2221/8E60 :                            ;	LAHF
 2222/8E60 : 43                         	INC	BX
 2223/8E61 :                            ;	SAHF
 2224/8E61 : 8A 17                      	MOV	DL,[BX]			; LSB of string address
 2225/8E63 :                            ;	LAHF
 2226/8E63 : 43                         	INC	BX
 2227/8E64 :                            ;	SAHF
 2228/8E64 : 8A 37                      	MOV	DH,[BX]			; MSB of string address
 2229/8E66 : 8B 1E A8 08                	MOV	BX,[BASTXT]		; Point to start of program
 2230/8E6A : E8 4A FB                   	CALL	CPDEHL			; Is string before program?
 2231/8E6D : 73 14                      	JNC	CRESTR			; Yes - Create string entry
 2232/8E6F : 8B 1E A4 08                	MOV	BX,[STRSPC]		; Point to string space
 2233/8E73 : E8 41 FB                   	CALL	CPDEHL			; Is string literal in program?
 2234/8E76 : 5A                         	POP	DX			; Restore address of string
 2235/8E77 : 73 13                      	JNC	MVSTPT			; Yes - Set up pointer
 2236/8E79 : BB 09 09                   	MOV	BX,TMPSTR		; Temporary string pool
 2237/8E7C : E8 38 FB                   	CALL	CPDEHL			; Is string in temporary pool?
 2238/8E7F : 73 0B                      	JNC	MVSTPT			; No - Set up pointer
 2239/8E81 : EB 01                      	JMP	CRESTR1			; Skip "POP DX"
 2240/8E83 :                            CRESTR:
 2241/8E83 : 5A                         	POP	DX			; Restore address of string
 2242/8E84 :                            CRESTR1:
 2243/8E84 : E8 30 0C                   	CALL	BAKTMP			; Back to last tmp-str entry
 2244/8E87 : 87 DA                      	XCHG	BX,DX			; Address of string entry
 2245/8E89 : E8 89 09                   	CALL	SAVSTR			; Save string in string area
 2246/8E8C :                            MVSTPT:
 2247/8E8C : E8 28 0C                   	CALL	BAKTMP			; Back to last tmp-str entry
 2248/8E8F : 5B                         	POP	BX			; Get string pointer
 2249/8E90 : E8 AE 11                   	CALL	DETHL4			; Move string pointer to var
 2250/8E93 : 5B                         	POP	BX			; Restore code string adress
 2251/8E94 : C3                         	RET
 2252/8E95 :                            ;
 2253/8E95 :                            LETNUM:
 2254/8E95 : 53                         	PUSH	BX			; Save address of variable
 2255/8E96 : E8 A5 11                   	CALL	FPTHL			; Move value to variable
 2256/8E99 : 5A                         	POP	DX			; Restore address of variable
 2257/8E9A : 5B                         	POP	BX			; Restore code string address
 2258/8E9B : C3                         	RET
 2259/8E9C :                            ;
 2260/8E9C :                            ON:
 2261/8E9C : E8 91 0D                   	CALL	GETINT			; Get integer 0-255
 2262/8E9F : 8A 07                      	MOV	AL,[BX]			; Get "GOTO" or "GOSUB" token
 2263/8EA1 : 8A E8                      	MOV	CH,AL			; Save in B
 2264/8EA3 : 3C 8C                      	CMP	AL,ZGOSUB		; "GOSUB" token?
 2265/8EA5 : 74 07                      	JZ	ONGO			; Yes - Find line numbe
 2266/8EA7 : E8 19 FB                   	CALL	CHKSYN			; Make sure it's "GOTO"
 2267/8EAA : 88                         	DB	ZGOTO			; "GOTO" token
 2268/8EAB : 9F                         	LAHF
 2269/8EAC : 4B                         	DEC	BX			; Cancel increment
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 39 - 2023/10/14 12時49分15秒


 2270/8EAD : 9E                         	SAHF
 2271/8EAE :                            ONGO:
 2272/8EAE : 8A CA                      	MOV	CL,DL			; Integer of branch value
 2273/8EB0 :                            ONGOLP:
 2274/8EB0 : FE C9                      	DEC	CL			; Count branches
 2275/8EB2 : 8A C5                      	MOV	AL,CH			; Get "GOTO" or "GOSUB" token
 2276/8EB4 : 75 03                      	JNZ	ONGOLP1
 2277/8EB6 : E9 FE FC                   	JMP	ONJMP			; Go to that line if right one
 2278/8EB9 :                            ONGOLP1:
 2279/8EB9 : E8 37 FE                   	CALL	GETLN			; Get line number to DE
 2280/8EBC : 3C 2C                      	CMP	AL,','			; Another line number?
 2281/8EBE : 74 F0                      	JZ	ONGOLP
 2282/8EC0 : C3                         	RET				; No - Drop through
 2283/8EC1 : EB ED                      	JMP	ONGOLP			; Yes - loop
 2284/8EC3 :                            ;
 2285/8EC3 :                            IF:
 2286/8EC3 : E8 FF 02                   	CALL	EVAL			; Evaluate expression
 2287/8EC6 : 8A 07                      	MOV	AL,[BX]			; Get token
 2288/8EC8 : 3C 88                      	CMP	AL,ZGOTO		; "GOTO" token?
 2289/8ECA : 74 07                      	JZ	IFGO			; Yes - Get line
 2290/8ECC : E8 F4 FA                   	CALL	CHKSYN			; Make sure it's "THEN"
 2291/8ECF : A9                         	DB	ZTHEN			; "THEN" token
 2292/8ED0 : 9F                         	LAHF
 2293/8ED1 : 4B                         	DEC	BX			; Cancel increment
 2294/8ED2 : 9E                         	SAHF
 2295/8ED3 :                            IFGO:
 2296/8ED3 : E8 D9 02                   	CALL	TSTNUM			; Make sure it's numeric
 2297/8ED6 : E8 E1 10                   	CALL	TSTSGN			; Test state of expression
 2298/8ED9 : 75 03                      	JNZ	IFGO1
 2299/8EDB : E9 34 FF                   	JMP	REM			; False - Drop through
 2300/8EDE :                            IFGO1:
 2301/8EDE : E8 FB FC                   	CALL	GETCHR			; Get next character
 2302/8EE1 : 73 03                      	JNC	IFGO2
 2303/8EE3 : E9 C9 FE                   	JMP	GOTO			; Number - GOTO that line
 2304/8EE6 :                            IFGO2:
 2305/8EE6 : E9 CB FC                   	JMP	IFJMP			; Otherwise do statemen
 2306/8EE9 :                            ;
 2307/8EE9 :                            MRPRNT:
 2308/8EE9 :                            ;	LAHF
 2309/8EE9 : 4B                         	DEC	BX			; DEC 'cos GETCHR INCs
 2310/8EEA :                            ;	SAHF
 2311/8EEA : E8 EF FC                   	CALL	GETCHR			; Get next character
 2312/8EED :                            PRINT:
 2313/8EED : 74 73                      	JZ	PRCRLF			; CRLF if just PRINT
 2314/8EEF :                            PRNTLP:
 2315/8EEF : 75 01                      	JNZ	PRNTLP1
 2316/8EF1 : C3                         	RET				; End of list - Exit
 2317/8EF2 :                            PRNTLP1:
 2318/8EF2 : 3C A5                      	CMP	AL,ZTAB			; "TAB(" token?
 2319/8EF4 : 75 03                      	JNZ	PRNTLP2
 2320/8EF6 : E9 AA 00                   	JMP	DOTAB			; Yes - Do TAB routine
 2321/8EF9 :                            PRNTLP2:
 2322/8EF9 : 3C A8                      	CMP	AL,ZSPC			; "SPC(" token?
 2323/8EFB : 75 03                      	JNZ	PRNTLP3
 2324/8EFD : E9 A3 00                   	JMP	DOTAB			; Yes - Do SPC routine
 2325/8F00 :                            PRNTLP3:
 2326/8F00 : 53                         	PUSH	BX			; Save code string address
 2327/8F01 : 3C 2C                      	CMP	AL,','			; Comma?
 2328/8F03 : 75 03                      	JNZ	PRNTLP4
 2329/8F05 : E9 82 00                   	JMP	DOCOM			; Yes - Move to next zone
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 40 - 2023/10/14 12時49分15秒


 2330/8F08 :                            PRNTLP4:
 2331/8F08 : 3C 3B                      	CMP	AL,';'			; Semi-colon?
 2332/8F0A : 75 03                      	JNZ	PRNTLP5
 2333/8F0C : E9 C3 00                   	JMP	NEXITM			; Do semi-colon routine
 2334/8F0F :                            PRNTLP5:
 2335/8F0F : 59                         	POP	CX			; Code string address to BC
 2336/8F10 : E8 B2 02                   	CALL	EVAL			; Evaluate expression
 2337/8F13 : 53                         	PUSH	BX			; Save code string address
 2338/8F14 : A0 F7 08                   	MOV	AL,[TYPE]		; Get variable type
 2339/8F17 : 0A C0                      	OR	AL,AL			; Is it a string variable?
 2340/8F19 : 75 31                      	JNZ	PRNTST			; Yes - Output string contents
 2341/8F1B : E8 0E 13                   	CALL	NUMASC			; Convert number to text
 2342/8F1E : E8 2B 09                   	CALL	CRTST			; Create temporary strig
 2343/8F21 : C6 07 20                   	MOV	BYTE PTR [BX],' '	; Followed by a space
 2344/8F24 : 8B 1E 2E 09                	MOV	BX,[FPREG]		; Get length of output
 2345/8F28 : FE 07                      	INC	BYTE PTR [BX]		; Plus 1 for the space
 2346/8F2A : 8B 1E 2E 09                	MOV	BX,[FPREG]		; < Not needed >
 2347/8F2E : A0 8C 08                   	MOV	AL,[LWIDTH]		; Get width of line
 2348/8F31 : 8A E8                      	MOV	CH,AL			; To B
 2349/8F33 : FE C5                      	INC	CH			; Width 255 (No limit)?
 2350/8F35 : 74 10                      	JZ	PRNTNB			; Yes - Output number string
 2351/8F37 : FE C5                      	INC	CH			; Adjust it
 2352/8F39 : A0 F5 08                   	MOV	AL,[CURPOS]		; Get cursor position
 2353/8F3C : 02 07                      	ADD	AL,[BX]			; Add length of string
 2354/8F3E : FE C8                      	DEC	AL			; Adjust it
 2355/8F40 : 3A C5                      	CMP	AL,CH			; Will output fit on this line?
 2356/8F42 : 72 03                      	JC	PRNTNB
 2357/8F44 : E8 1B 00                   	CALL	PRCRLF			; No - CRLF first
 2358/8F47 :                            PRNTNB:
 2359/8F47 : E8 60 09                   	CALL	PRS1			; Output string at (HL)
 2360/8F4A : 32 C0                      	XOR	AL,AL			; Skip CALL by setting address
 2361/8F4C :                            PRNTST:
 2362/8F4C : 74 03                      	JZ	PRNTST1
 2363/8F4E : E8 59 09                   	CALL	PRS1			; Output string at (HL)
 2364/8F51 :                            PRNTST1:
 2365/8F51 : 5B                         	POP	BX			; Restore code string address
 2366/8F52 : EB 95                      	JMP	MRPRNT			; See if more to PRINT
 2367/8F54 :                            ;
 2368/8F54 :                            STTLIN:
 2369/8F54 : A0 F5 08                   	MOV	AL,[CURPOS]		; Make sure on new line
 2370/8F57 : 0A C0                      	OR	AL,AL			; Already at start?
 2371/8F59 : 75 07                      	JNZ	PRCRLF			; Start a new line
 2372/8F5B : C3                         	RET				; Yes - Do nothing
 2373/8F5C :                            ;	JMP	PRCRLF			; Start a new line
 2374/8F5C :                            ;
 2375/8F5C :                            ENDINP:
 2376/8F5C : C6 07 00                   	MOV	BYTE PTR [BX],0		; Mark end of buffer
 2377/8F5F : BB AA 08                   	MOV	BX,BUFFER-1		; Point to buffer
 2378/8F62 :                            PRCRLF:
 2379/8F62 : B0 0D                      	MOV	AL,CR			; Load a CR
 2380/8F64 : E8 75 FA                   	CALL	OUTC			; Output character
 2381/8F67 : B0 0A                      	MOV	AL,LF			; Load a LF
 2382/8F69 : E8 70 FA                   	CALL	OUTC			; Output character
 2383/8F6C :                            DONULL:
 2384/8F6C : 32 C0                      	XOR	AL,AL			; Set to position 0
 2385/8F6E : A2 F5 08                   	MOV	[CURPOS],AL		; Store it
 2386/8F71 : A0 8B 08                   	MOV	AL,[NULLS]		; Get number of nulls
 2387/8F74 :                            NULLP:
 2388/8F74 : FE C8                      	DEC	AL			; Count them
 2389/8F76 : 75 01                      	JNZ	NULLP1
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 41 - 2023/10/14 12時49分15秒


 2390/8F78 : C3                         	RET				; Return if done
 2391/8F79 :                            NULLP1:
 2392/8F79 : 9F                         	LAHF
 2393/8F7A : 86 E0                      	XCHG	AH,AL
 2394/8F7C : 50                         	PUSH	AX			; Save count
 2395/8F7D : 86 E0                      	XCHG	AH,AL
 2396/8F7F : 32 C0                      	XOR	AL,AL			; Load a null
 2397/8F81 : E8 58 FA                   	CALL	OUTC			; Output it
 2398/8F84 : 58                         	POP	AX			; Restore count
 2399/8F85 : 86 E0                      	XCHG	AH,AL
 2400/8F87 : 9E                         	SAHF
 2401/8F88 : EB EA                      	JMP	NULLP			; Keep counting
 2402/8F8A :                            ;
 2403/8F8A :                            DOCOM:
 2404/8F8A : A0 8D 08                   	MOV	AL,[COMMAN]		; Get comma width
 2405/8F8D : 8A E8                      	MOV	CH,AL			; Save in B
 2406/8F8F : A0 F5 08                   	MOV	AL,[CURPOS]		; Get current position
 2407/8F92 : 3A C5                      	CMP	AL,CH			; Within the limit?
 2408/8F94 : 72 03                      	JC	DOCOM1
 2409/8F96 : E8 C9 FF                   	CALL	PRCRLF			; No - output CRLF
 2410/8F99 :                            DOCOM1:
 2411/8F99 : 73 37                      	JNC	NEXITM			; Get next item
 2412/8F9B :                            ZONELP:
 2413/8F9B : 2C 0E                      	SUB	AL,14			; Next zone of 14 characters
 2414/8F9D : 73 FC                      	JNC	ZONELP			; Repeat if more zones
 2415/8F9F : F6 D0                      	NOT	AL			; Number of spaces to output
 2416/8FA1 : EB 22                      	JMP	ASPCS			; Output them
 2417/8FA3 :                            ;
 2418/8FA3 :                            DOTAB:
 2419/8FA3 : 9F                         	LAHF
 2420/8FA4 : 86 E0                      	XCHG	AH,AL
 2421/8FA6 : 50                         	PUSH	AX			; Save token
 2422/8FA7 : 86 E0                      	XCHG	AH,AL
 2423/8FA9 : E8 81 0C                   	CALL	FNDNUM			; Evaluate expression
 2424/8FAC : E8 14 FA                   	CALL	CHKSYN			; Make sure ")" follows
 2425/8FAF : 29                         	DB	")"
 2426/8FB0 : 9F                         	LAHF
 2427/8FB1 : 4B                         	DEC	BX			; Back space on to ")"
 2428/8FB2 : 9E                         	SAHF
 2429/8FB3 : 58                         	POP	AX			; Restore token
 2430/8FB4 : 86 E0                      	XCHG	AH,AL
 2431/8FB6 : 9E                         	SAHF
 2432/8FB7 : 2C A8                      	SUB	AL,ZSPC			; Was it "SPC(" ?
 2433/8FB9 : 53                         	PUSH	BX			; Save code string address
 2434/8FBA : 74 03                      	JZ	DOSPC			; Yes - Do 'E' spaces
 2435/8FBC : A0 F5 08                   	MOV	AL,[CURPOS]		; Get current position
 2436/8FBF :                            DOSPC:
 2437/8FBF : F6 D0                      	NOT	AL			; Number of spaces to print to
 2438/8FC1 : 02 C2                      	ADD	AL,DL			; Total number to print
 2439/8FC3 : 73 0D                      	JNC	NEXITM			; TAB < Current POS(X)
 2440/8FC5 :                            ASPCS:
 2441/8FC5 : FE C0                      	INC	AL			; Output A spaces
 2442/8FC7 : 8A E8                      	MOV	CH,AL			; Save number to print
 2443/8FC9 : B0 20                      	MOV	AL,' '			; Space
 2444/8FCB :                            SPCLP:
 2445/8FCB : E8 0E FA                   	CALL	OUTC			; Output character in A
 2446/8FCE : FE CD                      	DEC	CH			; Count them
 2447/8FD0 : 75 F9                      	JNZ	SPCLP			; Repeat if more
 2448/8FD2 :                            NEXITM:
 2449/8FD2 : 5B                         	POP	BX			; Restore code string address
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 42 - 2023/10/14 12時49分15秒


 2450/8FD3 : E8 06 FC                   	CALL	GETCHR			; Get next character
 2451/8FD6 : E9 16 FF                   	JMP	PRNTLP			; More to print
 2452/8FD9 :                            ;
 2453/8FD9 :                            REDO:
 2454/8FD9 : 3F 52 65 64 6F 20 66 72 6F 	DB	"?Redo from start",CR,LF,0
      8FE2 : 6D 20 73 74 61 72 74 0D 0A
      8FEB : 00                        
 2455/8FEC :                            
 2456/8FEC :                            ;
 2457/8FEC :                            BADINP:
 2458/8FEC : A0 17 09                   	MOV	AL,[READFG]		; READ or INPUT?
 2459/8FEF : 0A C0                      	OR	AL,AL
 2460/8FF1 : 74 03                      	JZ	BADINP1			; READ - ?SN Error
 2461/8FF3 : E9 0D F6                   	JMP	DATSNR
 2462/8FF6 :                            BADINP1:
 2463/8FF6 : 59                         	POP	CX			; Throw away code string addr
 2464/8FF7 : BB D9 8F                   	MOV	BX,REDO			; "Redo from start" message
 2465/8FFA : E8 AA 08                   	CALL	PRS			; Output string
 2466/8FFD : E9 E3 F7                   	JMP	DOAGN			; Do last INPUT again
 2467/9000 :                            ;
 2468/9000 :                            INPUT:
 2469/9000 : E8 DA 07                   	CALL	IDTEST			; Test for illegal direct
 2470/9003 : 8A 07                      	MOV	AL,[BX]			; Get character after "INPUT"
 2471/9005 : 3C 22                      	CMP	AL,'"'			; Is there a prompt string?
 2472/9007 : B0 00                      	MOV	AL,0			; Clear A and leave flags
 2473/9009 : A2 8F 08                   	MOV	[CTLOFG],AL		; Enable output
 2474/900C : 75 0D                      	JNZ	NOPMPT			; No prompt - get input
 2475/900E : E8 3E 08                   	CALL	QTSTR			; Get string terminated by '"'
 2476/9011 : E8 AF F9                   	CALL	CHKSYN			; Check for ';' after prompt
 2477/9014 : 3B                         	DB	';'
 2478/9015 : 53                         	PUSH	BX			; Save code string address
 2479/9016 : E8 91 08                   	CALL	PRS1			; Output prompt string
 2480/9019 : EB 01                      	JMP	NOPMPT1			; Skip "PUSH BX"
 2481/901B :                            NOPMPT:
 2482/901B : 53                         	PUSH	BX			; Save code string addr
 2483/901C :                            NOPMPT1:
 2484/901C : E8 C9 F7                   	CALL	PROMPT			; Get input with "? " prompt
 2485/901F : 59                         	POP	CX			; Restore code string address
 2486/9020 : 73 03                      	JNC	NOPMPT2
 2487/9022 : E9 27 FC                   	JMP	INPBRK			; Break pressed - Exit
 2488/9025 :                            NOPMPT2:
 2489/9025 : 9F                         	LAHF
 2490/9026 : 43                         	INC	BX			; Next byte
 2491/9027 : 9E                         	SAHF
 2492/9028 : 8A 07                      	MOV	AL,[BX]			; Get it
 2493/902A : 0A C0                      	OR	AL,AL			; End of line?
 2494/902C : 9F                         	LAHF
 2495/902D : 4B                         	DEC	BX			; Back again
 2496/902E : 9E                         	SAHF
 2497/902F : 51                         	PUSH	CX			; Re-save code string address
 2498/9030 : 75 03                      	JNZ	NOPMPT3			; Yes - Find next DATA stmt
 2499/9032 : E9 D8 FD                   	JMP	NXTDTA
 2500/9035 :                            NOPMPT3:
 2501/9035 : C6 07 2C                   	MOV	BYTE PTR [BX],','	; Store comma as separator
 2502/9038 : EB 09                      	JMP	NXTITM			; Get next item
 2503/903A :                            ;
 2504/903A :                            READ:
 2505/903A : 53                         	PUSH	BX			; Save code string address
 2506/903B : 8B 1E 26 09                	MOV	BX,[NXTDAT]		; Next DATA statement
 2507/903F : 0C AF                      	OR	AL,0AFH			; Flag "READ"
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 43 - 2023/10/14 12時49分15秒


 2508/9041 : EB 02                      	JMP	NXTITM1
 2509/9043 :                            NXTITM:
 2510/9043 : 32 C0                      	XOR	AL,AL			; Flag "INPUT"
 2511/9045 :                            NXTITM1:
 2512/9045 : A2 17 09                   	MOV	[READFG],AL		; Save "READ"/"INPUT" flag
 2513/9048 : 8B EC                      	MOV	BP,SP
 2514/904A : 87 5E 00                   	XCHG	[BP],BX			; Get code str' , Save pointer
 2515/904D : EB 04                      	JMP	GTVLUS			; Get values
 2516/904F :                            ;
 2517/904F :                            NEDMOR:
 2518/904F : E8 71 F9                   	CALL	CHKSYN			; Check for comma between items
 2519/9052 : 2C                         	DB	','
 2520/9053 :                            GTVLUS:
 2521/9053 : E8 2A 04                   	CALL	GETVAR			; Get variable name
 2522/9056 : 8B EC                      	MOV	BP,SP
 2523/9058 : 87 5E 00                   	XCHG	[BP],BX			; Save code str" , Get pointer
 2524/905B : 52                         	PUSH	DX			; Save variable address
 2525/905C : 8A 07                      	MOV	AL,[BX]			; Get next "INPUT"/"DATA" byte
 2526/905E : 3C 2C                      	CMP	AL,','			; Comma?
 2527/9060 : 74 2A                      	JZ	ANTVLU			; Yes - Get another value
 2528/9062 : A0 17 09                   	MOV	AL,[READFG]		; Is it READ?
 2529/9065 : 0A C0                      	OR	AL,AL
 2530/9067 : 74 03                      	JZ	GTVLUS1			; Yes - Find next DATA stmt
 2531/9069 : E9 A8 00                   	JMP	FDTLP
 2532/906C :                            GTVLUS1:
 2533/906C : B0 3F                      	MOV	AL,'?'			; More INPUT needed
 2534/906E : E8 6B F9                   	CALL	OUTC			; Output character
 2535/9071 : E8 74 F7                   	CALL	PROMPT			; Get INPUT with prompt
 2536/9074 : 5A                         	POP	DX			; Variable address
 2537/9075 : 59                         	POP	CX			; Code string address
 2538/9076 : 73 03                      	JNC	GTVLUS2
 2539/9078 : E9 D1 FB                   	JMP	INPBRK			; Break pressed
 2540/907B :                            GTVLUS2:
 2541/907B : 9F                         	LAHF
 2542/907C : 43                         	INC	BX			; Point to next DATA byte
 2543/907D : 9E                         	SAHF
 2544/907E : 8A 07                      	MOV	AL,[BX]			; Get byte
 2545/9080 : 0A C0                      	OR	AL,AL			; Is it zero (No input) ?
 2546/9082 : 9F                         	LAHF
 2547/9083 : 4B                         	DEC	BX			; Back space INPUT pointer
 2548/9084 : 9E                         	SAHF
 2549/9085 : 51                         	PUSH	CX			; Save code string address
 2550/9086 : 75 03                      	JNZ	GTVLUS3			; Find end of buffer
 2551/9088 : E9 82 FD                   	JMP	NXTDTA
 2552/908B :                            GTVLUS3:
 2553/908B : 52                         	PUSH	DX			; Save variable address
 2554/908C :                            ANTVLU:
 2555/908C : A0 F7 08                   	MOV	AL,[TYPE]		; Check data type
 2556/908F : 0A C0                      	OR	AL,AL			; Is it numeric?
 2557/9091 : 74 2C                      	JZ	INPBIN			; Yes - Convert to binary
 2558/9093 : E8 46 FB                   	CALL	GETCHR			; Get next character
 2559/9096 : 8A F0                      	MOV	DH,AL			; Save input character
 2560/9098 : 8A E8                      	MOV	CH,AL			; Again
 2561/909A : 3C 22                      	CMP	AL,'"'			; Start of literal sting?
 2562/909C : 74 10                      	JZ	STRENT			; Yes - Create string entry
 2563/909E : A0 17 09                   	MOV	AL,[READFG]		; "READ" or "INPUT" ?
 2564/90A1 : 0A C0                      	OR	AL,AL
 2565/90A3 : 8A F0                      	MOV	DH,AL			; Save 00 if "INPUT"
 2566/90A5 : 74 02                      	JZ	ITMSEP			; "INPUT" - End with 00
 2567/90A7 : B6 3A                      	MOV	DH,':'			; "DATA" - End with 00 or ":"
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 44 - 2023/10/14 12時49分15秒


 2568/90A9 :                            ITMSEP:
 2569/90A9 : B5 2C                      	MOV	CH,','			; Item separator
 2570/90AB : 9F                         	LAHF
 2571/90AC : 4B                         	DEC	BX			; Back space for DTSTR
 2572/90AD : 9E                         	SAHF
 2573/90AE :                            STRENT:
 2574/90AE : E8 A2 07                   	CALL	DTSTR			; Get string terminated by D
 2575/90B1 : 87 DA                      	XCHG	BX,DX			; String address to DE
 2576/90B3 : BB CE 90                   	MOV	BX,LTSTND		; Where to go after LETSTR
 2577/90B6 : 8B EC                      	MOV	BP,SP
 2578/90B8 : 87 5E 00                   	XCHG	[BP],BX			; Save HL , get input ppinter
 2579/90BB : 52                         	PUSH	DX			; Save address of string
 2580/90BC : E9 9A FD                   	JMP	LETSTR			; Assign string to variable
 2581/90BF :                            ;
 2582/90BF :                            INPBIN:
 2583/90BF : E8 1A FB                   	CALL	GETCHR			; Get next character
 2584/90C2 : E8 96 10                   	CALL	ASCTFP			; Convert ASCII to FP number
 2585/90C5 : 8B EC                      	MOV	BP,SP
 2586/90C7 : 87 5E 00                   	XCHG	[BP],BX			; Save input ptr, Get var addr
 2587/90CA : E8 71 0F                   	CALL	FPTHL			; Move FPREG to variable
 2588/90CD : 5B                         	POP	BX			; Restore input pointer
 2589/90CE :                            LTSTND:
 2590/90CE :                            ;	LAHF
 2591/90CE : 4B                         	DEC	BX			; DEC 'cos GETCHR INCs
 2592/90CF :                            ;	SAHF
 2593/90CF : E8 0A FB                   	CALL	GETCHR			; Get next character
 2594/90D2 : 74 07                      	JZ	MORDT			; End of line - More needed?
 2595/90D4 : 3C 2C                      	CMP	AL,','			; Another value?
 2596/90D6 : 74 03                      	JZ	MORDT			; No - Bad input
 2597/90D8 : E9 11 FF                   	JMP	BADINP
 2598/90DB :                            MORDT:
 2599/90DB : 8B EC                      	MOV	BP,SP
 2600/90DD : 87 5E 00                   	XCHG	[BP],BX			; Get code string address
 2601/90E0 :                            ;	LAHF
 2602/90E0 : 4B                         	DEC	BX			; DEC 'cos GETCHR INCs
 2603/90E1 :                            ;	SAHF
 2604/90E1 : E8 F8 FA                   	CALL	GETCHR			; Get next character
 2605/90E4 : 74 03                      	JZ	MORDT1			; More needed - Get it
 2606/90E6 : E9 66 FF                   	JMP	NEDMOR
 2607/90E9 :                            MORDT1:
 2608/90E9 : 5A                         	POP	DX			; Restore DATA pointer
 2609/90EA : A0 17 09                   	MOV	AL,[READFG]		; "READ" or "INPUT" ?
 2610/90ED : 0A C0                      	OR	AL,AL
 2611/90EF : 87 DA                      	XCHG	BX,DX			; DATA pointer to HL
 2612/90F1 : 74 03                      	JZ	MORDT2
 2613/90F3 : E9 16 FB                   	JMP	UPDATA			; Update DATA pointer if "READ"
 2614/90F6 :                            MORDT2:
 2615/90F6 : 52                         	PUSH	DX			; Save code string address
 2616/90F7 : 0A 07                      	OR	AL,[BX]			; More input given?
 2617/90F9 : BB 03 91                   	MOV	BX,EXTIG		; "?Extra ignored" message
 2618/90FC : 74 03                      	JZ	MORDT3
 2619/90FE : E8 A6 07                   	CALL	PRS			; Output string if extra given
 2620/9101 :                            MORDT3:
 2621/9101 : 5B                         	POP	BX			; Restore code string address
 2622/9102 : C3                         	RET
 2623/9103 :                            ;
 2624/9103 :                            EXTIG:
 2625/9103 : 3F 45 78 74 72 61 20 69 67 	DB	"?Extra ignored",CR,LF,0
      910C : 6E 6F 72 65 64 0D 0A 00   
 2626/9114 :                            
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 45 - 2023/10/14 12時49分15秒


 2627/9114 :                            
 2628/9114 :                            ;
 2629/9114 :                            FDTLP:
 2630/9114 : E8 F7 FC                   	CALL	DATA			; Get next statement
 2631/9117 : 0A C0                      	OR	AL,AL			; End of line?
 2632/9119 : 75 23                      	JNZ	FANDT			; No - See if DATA statement
 2633/911B : 9F                         	LAHF
 2634/911C : 43                         	INC	BX
 2635/911D : 9E                         	SAHF
 2636/911E : 8A 07                      	MOV	AL,[BX]			; End of program?
 2637/9120 : 9F                         	LAHF
 2638/9121 : 43                         	INC	BX
 2639/9122 : 9E                         	SAHF
 2640/9123 : 0A 07                      	OR	AL,[BX]			; 00 00 Ends program
 2641/9125 : B2 06                      	MOV	DL,OD			; ?OD Error
 2642/9127 : 75 03                      	JNZ	FDTLP1
 2643/9129 : E9 F9 F4                   	JMP	ERROR			; Yes - Out of DATA
 2644/912C :                            FDTLP1:
 2645/912C : 9F                         	LAHF
 2646/912D : 43                         	INC	BX
 2647/912E : 9E                         	SAHF
 2648/912F : 8A 17                      	MOV	DL,[BX]			; LSB of line number
 2649/9131 : 9F                         	LAHF
 2650/9132 : 43                         	INC	BX
 2651/9133 : 9E                         	SAHF
 2652/9134 : 8A 37                      	MOV	DH,[BX]			; MSB of line number
 2653/9136 : 87 DA                      	XCHG	BX,DX
 2654/9138 : 89 1E 13 09                	MOV	[DATLIN],BX		; Set line of current DATA item
 2655/913C : 87 DA                      	XCHG	BX,DX
 2656/913E :                            FANDT:
 2657/913E : E8 9B FA                   	CALL	GETCHR			; Get next character
 2658/9141 : 3C 83                      	CMP	AL,ZDATA		; "DATA" token
 2659/9143 : 75 CF                      	JNZ	FDTLP			; No "DATA" - Keep looking
 2660/9145 : E9 44 FF                   	JMP	ANTVLU			; Found - Convert input
 2661/9148 :                            ;
 2662/9148 :                            NEXT:
 2663/9148 : BA 00 00                   	MOV	DX,0			; In case no index given
 2664/914B :                            NEXT1:
 2665/914B : 74 03                      	JZ	NEXT2
 2666/914D : E8 30 03                   	CALL	GETVAR			; Get index address
 2667/9150 :                            NEXT2:
 2668/9150 : 89 1E 18 09                	MOV	[BRKLIN],BX		; Save code string address
 2669/9154 : E8 3C F4                   	CALL	BAKSTK			; Look for "FOR" block
 2670/9157 : 74 03                      	JZ	NEXT3
 2671/9159 : E9 B7 F4                   	JMP	NFERR			; No "FOR" - ?NF Error
 2672/915C :                            NEXT3:
 2673/915C : 8B E3                      	MOV	SP,BX			; Clear nested loops
 2674/915E : 52                         	PUSH	DX			; Save index address
 2675/915F : 8A 07                      	MOV	AL,[BX]			; Get sign of STEP
 2676/9161 : 9F                         	LAHF
 2677/9162 : 43                         	INC	BX
 2678/9163 : 9E                         	SAHF
 2679/9164 : 9F                         	LAHF
 2680/9165 : 86 E0                      	XCHG	AH,AL
 2681/9167 : 50                         	PUSH	AX			; Save sign of STEP
 2682/9168 : 86 E0                      	XCHG	AH,AL
 2683/916A : 52                         	PUSH	DX			; Save index address
 2684/916B : E8 AA 0E                   	CALL	PHLTFP			; Move index value to FPREG
 2685/916E : 8B EC                      	MOV	BP,SP
 2686/9170 : 87 5E 00                   	XCHG	[BP],BX			; Save address of TO value
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 46 - 2023/10/14 12時49分15秒


 2687/9173 : 53                         	PUSH	BX			; Save address of index
 2688/9174 : E8 F4 0A                   	CALL	ADDPHL			; Add STEP to index valiable
 2689/9177 : 5B                         	POP	BX			; Restore address of index
 2690/9178 : E8 C3 0E                   	CALL	FPTHL			; Move value to index variable
 2691/917B : 5B                         	POP	BX			; Restore address of TO value
 2692/917C : E8 AE 0E                   	CALL	LOADFP			; Move TO value to BCDE
 2693/917F : 53                         	PUSH	BX			; Save address of line of FOR
 2694/9180 : E8 F2 0E                   	CALL	CMPNUM			; Compare index with TO value
 2695/9183 : 5B                         	POP	BX			; Restore address of line num
 2696/9184 : 59                         	POP	CX			; Address of sign of STEP
 2697/9185 : 2A C5                      	SUB	AL,CH			; Compare with expected sign
 2698/9187 : E8 A3 0E                   	CALL	LOADFP			; BC = Loop stmt,DE = Line num
 2699/918A : 74 0B                      	JZ	KILFOR			; Loop finished - Terminal it
 2700/918C : 87 DA                      	XCHG	BX,DX			; Loop statement line number
 2701/918E : 89 1E A6 08                	MOV	[LINEAT],BX		; Set loop line number
 2702/9192 : 8B D9                      	MOV	BX,CX			; Set code string to loop
 2703/9194 : E9 DD F9                   	JMP	PUTFID			; Put back "FOR" and continue
 2704/9197 :                            ;
 2705/9197 :                            KILFOR:
 2706/9197 : 8B E3                      	MOV	SP,BX			; Remove "FOR" block
 2707/9199 : 8B 1E 18 09                	MOV	BX,[BRKLIN]		; Code string after "NE XT"
 2708/919D : 8A 07                      	MOV	AL,[BX]			; Get next byte in code string
 2709/919F : 3C 2C                      	CMP	AL,','			; More NEXTs ?
 2710/91A1 : 74 03                      	JZ	KILFOR1			; No - Do next statemen
 2711/91A3 : E9 D2 F9                   	JMP	RUNCNT
 2712/91A6 :                            KILFOR1:
 2713/91A6 : E8 33 FA                   	CALL	GETCHR			; Position to index nam
 2714/91A9 : E8 9F FF                   	CALL	NEXT1			; Re-enter NEXT routine
 2715/91AC :                            ; < will not RETurn to here , Exit to RUNCNT or Loop >
 2716/91AC :                            ;
 2717/91AC :                            GETNUM:
 2718/91AC : E8 16 00                   	CALL	EVAL			; Get a numeric expression
 2719/91AF :                            TSTNUM:
 2720/91AF : 0A C0                      	OR	AL,AL			; Clear carry (numeric)
 2721/91B1 : EB 01                      	JMP	CHKTYP
 2722/91B3 :                            TSTSTR:
 2723/91B3 : F9                         	STC				; Set carry (string)
 2724/91B4 :                            CHKTYP:
 2725/91B4 : A0 F7 08                   	MOV	AL,[TYPE]		; Check types match
 2726/91B7 : 12 C0                      	ADC	AL,AL			; Expected + actual
 2727/91B9 : 0A C0                      	OR	AL,AL			; Clear carry , set parity
 2728/91BB : 7B 01                      	JPO	CHKTYP1			; RET PE
 2729/91BD : C3                         	RET				; Even parity - Types match
 2730/91BE :                            CHKTYP1:
 2731/91BE : E9 62 F4                   	JMP	TMERR			; Different types - Error
 2732/91C1 :                            ;
 2733/91C1 :                            OPNPAR:
 2734/91C1 : E8 FF F7                   	CALL	CHKSYN			; Make sure "(" follows
 2735/91C4 : 28                         	DB	"("
 2736/91C5 :                            EVAL:
 2737/91C5 : 9F                         	LAHF
 2738/91C6 : 4B                         	DEC	BX
 2739/91C7 : 9E                         	SAHF				; Evaluate expression & save
 2740/91C8 : B6 00                      	MOV	DH,0			; Precedence value
 2741/91CA :                            EVAL1:
 2742/91CA : 52                         	PUSH	DX			; Save precedence
 2743/91CB : B1 01                      	MOV	CL,1
 2744/91CD : E8 0D F4                   	CALL	CHKSTK			; Check for 1 level of stack
 2745/91D0 : E8 9B 00                   	CALL	OPRND			; Get next expression value
 2746/91D3 :                            EVAL2:
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 47 - 2023/10/14 12時49分15秒


 2747/91D3 : 89 1E 1A 09                	MOV	[NXTOPR],BX		; Save address of next operator
 2748/91D7 :                            EVAL3:
 2749/91D7 : 8B 1E 1A 09                	MOV	BX,[NXTOPR]		; Restore address of next opt
 2750/91DB : 59                         	POP	CX			; Precedence value and operator
 2751/91DC : 8A C5                      	MOV	AL,CH			; Get precedence value
 2752/91DE : 3C 78                      	CMP	AL,78H			; "AND" or "OR" ?
 2753/91E0 : 72 03                      	JC	EVAL4
 2754/91E2 : E8 CA FF                   	CALL	TSTNUM			; No - Make sure it's a number
 2755/91E5 :                            EVAL4:
 2756/91E5 : 8A 07                      	MOV	AL,[BX]			; Get next operator / function
 2757/91E7 : B6 00                      	MOV	DH,0			; Clear Last relation
 2758/91E9 :                            RLTLP:
 2759/91E9 : 2C B3                      	SUB	AL,ZGTR			; ">" Token
 2760/91EB : 72 1C                      	JC	FOPRND			; + - * / ^ AND OR - Test it
 2761/91ED : 3C 03                      	CMP	AL,ZLTH+1-ZGTR		; < = >
 2762/91EF : 73 18                      	JNC	FOPRND			; Function - Call it
 2763/91F1 : 3C 01                      	CMP	AL,ZEQUAL-ZGTR		; "="
 2764/91F3 : D0 D0                      	RCL	AL,1			; <- Test for legal
 2765/91F5 : 32 C6                      	XOR	AL,DH			; <- combinations of < = >
 2766/91F7 : 3A C6                      	CMP	AL,DH			; <- by combining last token
 2767/91F9 : 8A F0                      	MOV	DH,AL			; <- with current one
 2768/91FB : 73 03                      	JNC	RLTLP1
 2769/91FD : E9 0B F4                   	JMP	SNERR			; Error if "<<' '==" or ">>"
 2770/9200 :                            RLTLP1:
 2771/9200 : 89 1E 0F 09                	MOV	[CUROPR],BX		; Save address of current token
 2772/9204 : E8 D5 F9                   	CALL	GETCHR			; Get next character
 2773/9207 : EB E0                      	JMP	RLTLP			; Treat the two as one
 2774/9209 :                            ;
 2775/9209 :                            FOPRND:
 2776/9209 : 8A C6                      	MOV	AL,DH			; < = > found ?
 2777/920B : 0A C0                      	OR	AL,AL
 2778/920D : 74 03                      	JZ	FOPRND1
 2779/920F : E9 9F 01                   	JMP	TSTRED			; Yes - Test for reduction
 2780/9212 :                            FOPRND1:
 2781/9212 : 8A 07                      	MOV	AL,[BX]			; Get operator token
 2782/9214 : 89 1E 0F 09                	MOV	[CUROPR],BX		; Save operator address
 2783/9218 : 2C AC                      	SUB	AL,ZPLUS		; Operator or function?
 2784/921A : 73 01                      	JNC	FOPRND2
 2785/921C : C3                         	RET				; Neither - Exit
 2786/921D :                            FOPRND2:
 2787/921D : 3C 07                      	CMP	AL,ZOR+1-ZPLUS		; Is it + - * / ^ AND OR ?
 2788/921F : 72 01                      	JC	FOPRND3
 2789/9221 : C3                         	RET				; No - Exit
 2790/9222 :                            FOPRND3:
 2791/9222 : 8A D0                      	MOV	DL,AL			; Coded operator
 2792/9224 : A0 F7 08                   	MOV	AL,[TYPE]		; Get data type
 2793/9227 : FE C8                      	DEC	AL			; FF = numeric , 00 = string
 2794/9229 : 0A C2                      	OR	AL,DL			; Combine with coded operator
 2795/922B : 8A C2                      	MOV	AL,DL			; Get coded operator
 2796/922D : 75 03                      	JNZ	FOPRND4			; String concatenation
 2797/922F : E9 E2 07                   	JMP	CONCAT
 2798/9232 :                            FOPRND4:
 2799/9232 : D0 C0                      	ROL	AL,1			; Times 2
 2800/9234 : 02 C2                      	ADD	AL,DL			; Times 3
 2801/9236 : 8A D0                      	MOV	DL,AL			; To DE (D is 0)
 2802/9238 : BB D7 84                   	MOV	BX,PRITAB		; Precedence table
 2803/923B : 03 DA                      	ADD	BX,DX			; To the operator concerned
 2804/923D : 8A C5                      	MOV	AL,CH			; Last operator precedence
 2805/923F : 8A 37                      	MOV	DH,[BX]			; Get evaluation precedence
 2806/9241 : 3A C6                      	CMP	AL,DH			; Compare with eval precedence
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 48 - 2023/10/14 12時49分15秒


 2807/9243 : 72 01                      	JC	FOPRND5
 2808/9245 : C3                         	RET				; Exit if higher precedence
 2809/9246 :                            FOPRND5:
 2810/9246 : 9F                         	LAHF
 2811/9247 : 43                         	INC	BX			; Point to routine addr
 2812/9248 : 9E                         	SAHF
 2813/9249 : E8 63 FF                   	CALL	TSTNUM			; Make sure it's a number
 2814/924C :                            ;
 2815/924C :                            STKTHS:
 2816/924C : 51                         	PUSH	CX			; Save last precedence token
 2817/924D : B9 D7 91                   	MOV	CX,EVAL3		; Where to go on prec' break
 2818/9250 : 51                         	PUSH	CX			; Save on stack for return
 2819/9251 : 8A EA                      	MOV	CH,DL			; Save operator
 2820/9253 : 8A CE                      	MOV	CL,DH			; Save precedence
 2821/9255 : E8 A7 0D                   	CALL	STAKFP			; Move value to stack
 2822/9258 : 8A D5                      	MOV	DL,CH			; Restore operator
 2823/925A : 8A F1                      	MOV	DH,CL			; Restore precedence
 2824/925C : 8A 0F                      	MOV	CL,[BX]			; Get LSB of routine address
 2825/925E : 9F                         	LAHF
 2826/925F : 43                         	INC	BX
 2827/9260 : 9E                         	SAHF
 2828/9261 : 8A 2F                      	MOV	CH,[BX]			; Get MSB of routine address
 2829/9263 : 9F                         	LAHF
 2830/9264 : 43                         	INC	BX
 2831/9265 : 9E                         	SAHF
 2832/9266 : 51                         	PUSH	CX			; Save routine address
 2833/9267 : 8B 1E 0F 09                	MOV	BX,[CUROPR]		; Address of current operator
 2834/926B : E9 5C FF                   	JMP	EVAL1			; Loop until prec' break
 2835/926E :                            ;
 2836/926E :                            OPRND:
 2837/926E : 32 C0                      	XOR	AL,AL			; Get operand routine
 2838/9270 : A2 F7 08                   	MOV	[TYPE],AL		; Set numeric expected
 2839/9273 : E8 66 F9                   	CALL	GETCHR			; Get next character
 2840/9276 : B2 24                      	MOV	DL,MO			; ?MO Error
 2841/9278 : 75 03                      	JNZ	OPRND1
 2842/927A : E9 A8 F3                   	JMP	ERROR			; No operand - Error
 2843/927D :                            OPRND1:
 2844/927D : 73 03                      	JNC	OPRND2
 2845/927F : E9 D9 0E                   	JMP	ASCTFP			; Number - Get value
 2846/9282 :                            OPRND2:
 2847/9282 : E8 36 FA                   	CALL	CHKLTR			; See if a letter
 2848/9285 : 73 5E                      	JNC	CONVAR			; Letter - Find variable
 2849/9287 : 3C 26                      	CMP	AL,'&'			; &H = HEX, &B = BINARY
 2850/9289 : 75 18                      	JNZ	NOTAMP
 2851/928B : E8 4E F9                   	CALL	GETCHR			; Get next character
 2852/928E : 3C 48                      	CMP	AL,'H'			; Hex number indicated?
 2853/9290 : 75 03                      	JNZ	OPRND3
 2854/9292 : E9 1C 14                   	JMP	HEXTFP			; Convert Hex to FPREG
 2855/9295 :                            OPRND3:
 2856/9295 : 3C 42                      	CMP	AL,'B'			; Binary number indicat
 2857/9297 : 75 03                      	JNZ	OPRND4
 2858/9299 : E9 99 14                   	JMP	BINTFP			; Convert Bin to FPREG
 2859/929C :                            OPRND4:
 2860/929C : B2 02                      	MOV	DL,SN			; If neither then a ?SN
 2861/929E : 75 03                      	JNZ	NOTAMP
 2862/92A0 : E9 82 F3                   	JMP	ERROR
 2863/92A3 :                            NOTAMP:
 2864/92A3 : 3C AC                      	CMP	AL,ZPLUS		; '+' Token ?
 2865/92A5 : 74 C7                      	JZ	OPRND			; Yes - Look for operand
 2866/92A7 : 3C 2E                      	CMP	AL,'.'			; '.' ?
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 49 - 2023/10/14 12時49分15秒


 2867/92A9 : 75 03                      	JNZ	NOTAMP1			; Yes - Create FP number
 2868/92AB : E9 AD 0E                   	JMP	ASCTFP
 2869/92AE :                            NOTAMP1:
 2870/92AE : 3C AD                      	CMP	AL,ZMINUS		; '-' Token ?
 2871/92B0 : 74 21                      	JZ	MINUS			; Yes - Do minus
 2872/92B2 : 3C 22                      	CMP	AL,'"'			; Literal string ?
 2873/92B4 : 75 03                      	JNZ	NOTAMP2
 2874/92B6 : E9 96 05                   	JMP	QTSTR			; Get string terminated
 2875/92B9 :                            NOTAMP2:
 2876/92B9 : 3C AA                      	CMP	AL,ZNOT			; "NOT" Token ?
 2877/92BB : 75 03                      	JNZ	NOTAMP3
 2878/92BD : E9 91 01                   	JMP	EVNOT			; Yes - Eval NOT expres
 2879/92C0 :                            NOTAMP3:
 2880/92C0 : 3C A7                      	CMP	AL,ZFN			; "FN" Token ?
 2881/92C2 : 75 03                      	JNZ	NOTAMP4
 2882/92C4 : E9 AE 04                   	JMP	DOFN			; Yes - Do FN routine
 2883/92C7 :                            NOTAMP4:
 2884/92C7 : 2C B6                      	SUB	AL,ZSGN			; Is it a function?
 2885/92C9 : 73 30                      	JNC	FNOFST			; Yes - Evaluate functi
 2886/92CB :                            EVLPAR:
 2887/92CB : E8 F3 FE                   	CALL	OPNPAR			; Evaluate expression i
 2888/92CE : E8 F2 F6                   	CALL	CHKSYN			; Make sure ")" follows
 2889/92D1 : 29                         	DB	")"
 2890/92D2 : C3                         	RET
 2891/92D3 :                            ;
 2892/92D3 :                            MINUS:
 2893/92D3 : B6 7D                      	MOV	DH,7DH			; '-' precedence
 2894/92D5 : E8 F2 FE                   	CALL	EVAL1			; Evaluate until prec' break
 2895/92D8 : 8B 1E 1A 09                	MOV	BX,[NXTOPR]		; Get next operator address
 2896/92DC : 53                         	PUSH	BX			; Save next operator address
 2897/92DD : E8 15 0D                   	CALL	INVSGN			; Negate value
 2898/92E0 :                            RETNUM:
 2899/92E0 : E8 CC FE                   	CALL	TSTNUM			; Make sure it's a number
 2900/92E3 : 5B                         	POP	BX			; Restore next operator address
 2901/92E4 : C3                         	RET
 2902/92E5 :                            ;
 2903/92E5 :                            CONVAR:
 2904/92E5 : E8 98 01                   	CALL	GETVAR			; Get variable address to DE
 2905/92E8 :                            FRMEVL:
 2906/92E8 : 53                         	PUSH	BX			; Save code string address
 2907/92E9 : 87 DA                      	XCHG	BX,DX			; Variable address to HL
 2908/92EB : 89 1E 2E 09                	MOV	[FPREG],BX		; Save address of variable
 2909/92EF : A0 F7 08                   	MOV	AL,[TYPE]		; Get type
 2910/92F2 : 0A C0                      	OR	AL,AL			; Numeric?
 2911/92F4 : 75 03                      	JNZ	FRMEVL1
 2912/92F6 : E8 1F 0D                   	CALL	PHLTFP			; Yes - Move contents to FPREG
 2913/92F9 :                            FRMEVL1:
 2914/92F9 : 5B                         	POP	BX			; Restore code string address
 2915/92FA : C3                         	RET
 2916/92FB :                            ;
 2917/92FB :                            FNOFST:
 2918/92FB : B5 00                      	MOV	CH,0			; Get address of function
 2919/92FD : D0 C0                      	ROL	AL,1			; Double function offset
 2920/92FF : 8A C8                      	MOV	CL,AL			; BC = Offset in function table
 2921/9301 : 51                         	PUSH	CX			; Save adjusted token value
 2922/9302 : E8 D7 F8                   	CALL	GETCHR			; Get next character
 2923/9305 : 8A C1                      	MOV	AL,CL			; Get adjusted token value
 2924/9307 : 3C 31                      	CMP	AL,2*(ZLEFT-ZSGN)-1	; Adj' LEFT$,RIGHT$ or MID$ ?
 2925/9309 : 72 24                      	JC	FNVAL			; No - Do function
 2926/930B : E8 B3 FE                   	CALL	OPNPAR			; Evaluate expression  (X,...
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 50 - 2023/10/14 12時49分15秒


 2927/930E : E8 B2 F6                   	CALL	CHKSYN			; Make sure ',' follows
 2928/9311 : 2C                         	DB	','
 2929/9312 : E8 9E FE                   	CALL	TSTSTR			; Make sure it's a string
 2930/9315 : 87 DA                      	XCHG	BX,DX			; Save code string address
 2931/9317 : 8B 1E 2E 09                	MOV	BX,[FPREG]		; Get address of string
 2932/931B : 8B EC                      	MOV	BP,SP
 2933/931D : 87 5E 00                   	XCHG	[BP],BX			; Save address of string
 2934/9320 : 53                         	PUSH	BX			; Save adjusted token value
 2935/9321 : 87 DA                      	XCHG	BX,DX			; Restore code string address
 2936/9323 : E8 0A 09                   	CALL	GETINT			; Get integer 0-255
 2937/9326 : 87 DA                      	XCHG	BX,DX			; Save code string address
 2938/9328 : 8B EC                      	MOV	BP,SP
 2939/932A : 87 5E 00                   	XCHG	[BP],BX			; Save integer,HL = adj' token
 2940/932D : EB 0C                      	JMP	GOFUNC			; Jump to string function
 2941/932F :                            ;
 2942/932F :                            FNVAL:
 2943/932F : E8 99 FF                   	CALL	EVLPAR			; Evaluate expression
 2944/9332 : 8B EC                      	MOV	BP,SP
 2945/9334 : 87 5E 00                   	XCHG	[BP],BX			; HL = Adjusted token value
 2946/9337 : BA E0 92                   	MOV	DX,RETNUM		; Return number from function
 2947/933A : 52                         	PUSH	DX			; Save on stack
 2948/933B :                            GOFUNC:
 2949/933B : B9 36 83                   	MOV	CX,FNCTAB		; Function routine address
 2950/933E : 03 D9                      	ADD	BX,CX			; Point to right address
 2951/9340 : 8A 0F                      	MOV	CL,[BX]			; Get LSB of address
 2952/9342 : 9F                         	LAHF
 2953/9343 : 43                         	INC	BX
 2954/9344 : 9E                         	SAHF
 2955/9345 : 8A 3F                      	MOV	BH,[BX]			; Get MSB of address
 2956/9347 : 8A D9                      	MOV	BL,CL			; Address to HL
 2957/9349 : 53                         	PUSH	BX
 2958/934A : C3                         	RET
 2959/934B :                            ;	JMP	[BX]			; Jump to function
 2960/934B :                            ;
 2961/934B :                            SGNEXP:
 2962/934B : FE CE                      	DEC	DH			; Dec to flag negative exponent
 2963/934D : 3C AD                      	CMP	AL,ZMINUS		; '-' token ?
 2964/934F : 75 01                      	JNZ	SGNEXP1
 2965/9351 : C3                         	RET				; Yes - Return
 2966/9352 :                            SGNEXP1:
 2967/9352 : 3C 2D                      	CMP	AL,'-'			; '-' ASCII ?
 2968/9354 : 75 01                      	JNZ	SGNEXP2
 2969/9356 : C3                         	RET				; Yes - Return
 2970/9357 :                            SGNEXP2:
 2971/9357 : FE C6                      	INC	DH			; nc to flag positive exponent
 2972/9359 : 3C 2B                      	CMP	AL,'+'			; '+' ASCII ?
 2973/935B : 75 01                      	JNZ	SGNEXP3
 2974/935D : C3                         	RET				; Yes - Return
 2975/935E :                            SGNEXP3:
 2976/935E : 3C AC                      	CMP	AL,ZPLUS		; '+' token ?
 2977/9360 : 75 01                      	JNZ	SGNEXP4
 2978/9362 : C3                         	RET				; Yes - Return
 2979/9363 :                            SGNEXP4:
 2980/9363 :                            ;	LAHF
 2981/9363 : 4B                         	DEC	BX			; DEC 'cos GETCHR INCs
 2982/9364 :                            ;	SAHF
 2983/9364 : C3                         	RET				; Return "NZ"
 2984/9365 :                            ;
 2985/9365 :                            POR:
 2986/9365 : 0C AF                      	OR	AL,0AFH			; Flag "OR"
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 51 - 2023/10/14 12時49分15秒


 2987/9367 : EB 02                      	JMP	PAND1
 2988/9369 :                            PAND:
 2989/9369 : 32 C0                      	XOR	AL,AL			; Flag "AND"
 2990/936B :                            PAND1:
 2991/936B : 9F                         	LAHF
 2992/936C : 86 E0                      	XCHG	AH,AL
 2993/936E : 50                         	PUSH	AX			; Save "AND" / "OR" flag
 2994/936F : 86 E0                      	XCHG	AH,AL
 2995/9371 : E8 3B FE                   	CALL	TSTNUM			; Make sure it's a number
 2996/9374 : E8 5A F9                   	CALL	DEINT			; Get integer -32768 to 32767
 2997/9377 : 58                         	POP	AX			; Restore "AND" / "OR" flag
 2998/9378 : 86 E0                      	XCHG	AH,AL
 2999/937A : 9E                         	SAHF
 3000/937B : 87 DA                      	XCHG	BX,DX			; <- Get last
 3001/937D : 59                         	POP	CX			; <- value
 3002/937E : 8B EC                      	MOV	BP,SP
 3003/9380 : 87 5E 00                   	XCHG	[BP],BX			; <- from
 3004/9383 : 87 DA                      	XCHG	BX,DX			; <- stack
 3005/9385 : E8 93 0C                   	CALL	FPBCDE			; Move last value to FPREG
 3006/9388 : 9F                         	LAHF
 3007/9389 : 86 E0                      	XCHG	AH,AL
 3008/938B : 50                         	PUSH	AX			; Save "AND" / "OR" flag
 3009/938C : 86 E0                      	XCHG	AH,AL
 3010/938E : E8 40 F9                   	CALL	DEINT			; Get integer -32768 to 32767
 3011/9391 : 58                         	POP	AX			; Restore "AND" / "OR" flag
 3012/9392 : 86 E0                      	XCHG	AH,AL
 3013/9394 : 9E                         	SAHF
 3014/9395 : 59                         	POP	CX			; Get value
 3015/9396 : 8A C1                      	MOV	AL,CL			; Get LSB
 3016/9398 : BB 20 97                   	MOV	BX,ACPASS		; Address of save AC as current
 3017/939B : 75 0A                      	JNZ	POR1			; Jump if OR
 3018/939D : 22 C2                      	AND	AL,DL			; "AND" LSBs
 3019/939F : 8A C8                      	MOV	CL,AL			; Save LSB
 3020/93A1 : 8A C5                      	MOV	AL,CH			; Get MBS
 3021/93A3 : 22 C6                      	AND	AL,DH			; "AND" MSBs
 3022/93A5 : 53                         	PUSH	BX
 3023/93A6 : C3                         	RET
 3024/93A7 :                            ;	JMP	[BX]			; Save AC as current (ACPASS)
 3025/93A7 :                            ;
 3026/93A7 :                            POR1:
 3027/93A7 : 0A C2                      	OR	AL,DL			; "OR" LSBs
 3028/93A9 : 8A C8                      	MOV	CL,AL			; Save LSB
 3029/93AB : 8A C5                      	MOV	AL,CH			; Get MSB
 3030/93AD : 0A C6                      	OR	AL,DH			; "OR" MSBs
 3031/93AF : 53                         	PUSH	BX
 3032/93B0 : C3                         	RET
 3033/93B1 :                            ;	JMP	[BX]			; Save AC as current (ACPASS)
 3034/93B1 :                            ;
 3035/93B1 :                            TSTRED:
 3036/93B1 : BB CB 93                   	MOV	BX,CMPLOG		; Logical compare routi
 3037/93B4 : A0 F7 08                   	MOV	AL,[TYPE]		; Get data type
 3038/93B7 : D0 D8                      	RCR	AL,1			; Carry set = string
 3039/93B9 : 8A C6                      	MOV	AL,DH			; Get last precedence value
 3040/93BB : D0 D0                      	RCL	AL,1			; Times 2 plus carry
 3041/93BD : 8A D0                      	MOV	DL,AL			; To E
 3042/93BF : B6 64                      	MOV	DH,64H			; Relational precedence
 3043/93C1 : 8A C5                      	MOV	AL,CH			; Get current precedence
 3044/93C3 : 3A C6                      	CMP	AL,DH			; Compare with last
 3045/93C5 : 72 01                      	JC	TSTRED1
 3046/93C7 : C3                         	RET				; Eval if last was rel' or log'
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 52 - 2023/10/14 12時49分15秒


 3047/93C8 :                            TSTRED1:
 3048/93C8 : E9 81 FE                   	JMP	STKTHS			; Stack this one and get next
 3049/93CB :                            ;
 3050/93CB :                            CMPLOG:
 3051/93CB : CD 93                      	DW	CMPLG1			; Compare two values / strings
 3052/93CD :                            CMPLG1:
 3053/93CD : 8A C1                      	MOV	AL,CL			; Get data type
 3054/93CF : 0A C0                      	OR	AL,AL
 3055/93D1 : D0 D8                      	RCR	AL,1
 3056/93D3 : 59                         	POP	CX			; Get last expression to BCDE
 3057/93D4 : 5A                         	POP	DX
 3058/93D5 : 9F                         	LAHF
 3059/93D6 : 86 E0                      	XCHG	AH,AL
 3060/93D8 : 50                         	PUSH	AX			; Save status
 3061/93D9 : 86 E0                      	XCHG	AH,AL
 3062/93DB : E8 D6 FD                   	CALL	CHKTYP			; Check that types match
 3063/93DE : BB 43 94                   	MOV	BX,CMPRES		; Result to comparison
 3064/93E1 : 53                         	PUSH	BX			; Save for RETurn
 3065/93E2 : 75 03                      	JNZ	CMPLG2
 3066/93E4 : E9 8E 0C                   	JMP	CMPNUM			; Compare values if numeric
 3067/93E7 :                            CMPLG2:
 3068/93E7 : 32 C0                      	XOR	AL,AL			; Compare two strings
 3069/93E9 : A2 F7 08                   	MOV	[TYPE],AL		; Set type to numeric
 3070/93EC : 52                         	PUSH	DX			; Save string name
 3071/93ED : E8 9E 06                   	CALL	GSTRCU			; Get current string
 3072/93F0 : 8A 07                      	MOV	AL,[BX]			; Get length of string
 3073/93F2 : 9F                         	LAHF
 3074/93F3 : 43                         	INC	BX
 3075/93F4 : 9E                         	SAHF
 3076/93F5 : 9F                         	LAHF
 3077/93F6 : 43                         	INC	BX
 3078/93F7 : 9E                         	SAHF
 3079/93F8 : 8A 0F                      	MOV	CL,[BX]			; Get LSB of address
 3080/93FA : 9F                         	LAHF
 3081/93FB : 43                         	INC	BX
 3082/93FC : 9E                         	SAHF
 3083/93FD : 8A 2F                      	MOV	CH,[BX]			; Get MSB of address
 3084/93FF : 5A                         	POP	DX			; Restore string name
 3085/9400 : 51                         	PUSH	CX			; Save address of string
 3086/9401 : 9F                         	LAHF
 3087/9402 : 86 E0                      	XCHG	AH,AL
 3088/9404 : 50                         	PUSH	AX			; Save length of string
 3089/9405 : 86 E0                      	XCHG	AH,AL
 3090/9407 : E8 8A 06                   	CALL	GSTRDE			; Get second string
 3091/940A : E8 20 0C                   	CALL	LOADFP			; Get address of second string
 3092/940D : 58                         	POP	AX			; Restore length of string 1
 3093/940E : 86 E0                      	XCHG	AH,AL
 3094/9410 : 9E                         	SAHF
 3095/9411 : 8A F0                      	MOV	DH,AL			; Length to D
 3096/9413 : 5B                         	POP	BX			; Restore address of string 1
 3097/9414 :                            CMPSTR:
 3098/9414 : 8A C2                      	MOV	AL,DL			; Bytes of string 2 to do
 3099/9416 : 0A C6                      	OR	AL,DH			; Bytes of string 1 to do
 3100/9418 : 75 01                      	JNZ	CMPSTR1
 3101/941A : C3                         	RET				; Exit if all bytes compared
 3102/941B :                            CMPSTR1:
 3103/941B : 8A C6                      	MOV	AL,DH			; Get bytes of string 1 to do
 3104/941D : 2C 01                      	SUB	AL,1
 3105/941F : 73 01                      	JNC	CMPSTR2
 3106/9421 : C3                         	RET				; Exit if end of string 1
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 53 - 2023/10/14 12時49分15秒


 3107/9422 :                            CMPSTR2:
 3108/9422 : 32 C0                      	XOR	AL,AL
 3109/9424 : 3A C2                      	CMP	AL,DL			; Bytes of string 2 to do
 3110/9426 : FE C0                      	INC	AL
 3111/9428 : 72 01                      	JC	CMPSTR3
 3112/942A : C3                         	RET				; Exit if end of string 2
 3113/942B :                            CMPSTR3:
 3114/942B : FE CE                      	DEC	DH			; Count bytes in string 1
 3115/942D : FE CA                      	DEC	DL			; Count bytes in string 2
 3116/942F : 87 D9                      	XCHG	BX,CX
 3117/9431 : 8A 07                      	MOV	AL,[BX]			; Byte in string 2
 3118/9433 : 87 D9                      	XCHG	BX,CX
 3119/9435 : 3A 07                      	CMP	AL,[BX]			; Compare to byte in string 1
 3120/9437 : 9F                         	LAHF
 3121/9438 : 43                         	INC	BX			; Move up string 1
 3122/9439 : 9E                         	SAHF
 3123/943A : 9F                         	LAHF
 3124/943B : 41                         	INC	CX			; Move up string 2
 3125/943C : 9E                         	SAHF
 3126/943D : 74 D5                      	JZ	CMPSTR			; Same - Try next bytes
 3127/943F : F5                         	CMC				; Flag difference (">" or "<")
 3128/9440 : E9 8A 0B                   	JMP	FLGDIF			; "<" gives -1 , ">" given +1
 3129/9443 :                            ;
 3130/9443 :                            CMPRES:
 3131/9443 : FE C0                      	INC	AL			; Increment current value
 3132/9445 : 12 C0                      	ADC	AL,AL			; Double plus carry
 3133/9447 : 59                         	POP	CX			; Get other value
 3134/9448 : 22 C5                      	AND	AL,CH			; Combine them
 3135/944A : 04 FF                      	ADD	AL,-1			; Carry set if different
 3136/944C : 1A C0                      	SBB	AL,AL			; 00 - Equal , FF - Different
 3137/944E : E9 87 0B                   	JMP	FLGREL			; Set current value & continue
 3138/9451 :                            ;
 3139/9451 :                            EVNOT:
 3140/9451 : B6 5A                      	MOV	DH,5AH			; Precedence value for "NOT"
 3141/9453 : E8 74 FD                   	CALL	EVAL1			; Eval until precedence break
 3142/9456 : E8 56 FD                   	CALL	TSTNUM			; Make sure it's a number
 3143/9459 : E8 75 F8                   	CALL	DEINT			; Get integer -32768 - 32767
 3144/945C : 8A C2                      	MOV	AL,DL			; Get LSB
 3145/945E : F6 D0                      	NOT	AL			; Invert LSB
 3146/9460 : 8A C8                      	MOV	CL,AL			; Save "NOT" of LSB
 3147/9462 : 8A C6                      	MOV	AL,DH			; Get MSB
 3148/9464 : F6 D0                      	NOT	AL			; Invert MSB
 3149/9466 : E8 B7 02                   	CALL	ACPASS			; Save AC as current
 3150/9469 : 59                         	POP	CX			; Clean up stack
 3151/946A : E9 6A FD                   	JMP	EVAL3			; Continue evaluation
 3152/946D :                            ;
 3153/946D :                            DIMRET:
 3154/946D :                            ;	LAHF
 3155/946D : 4B                         	DEC	BX			; DEC 'cos GETCHR INCs
 3156/946E :                            ;	SAHF
 3157/946E : E8 6B F7                   	CALL	GETCHR			; Get next character
 3158/9471 : 75 01                      	JNZ	DIMRET1
 3159/9473 : C3                         	RET				; End of DIM statement
 3160/9474 :                            DIMRET1:
 3161/9474 : E8 4C F5                   	CALL	CHKSYN			; Make sure ',' follows
 3162/9477 : 2C                         	DB	','
 3163/9478 :                            DIM:
 3164/9478 : B9 6D 94                   	MOV	CX,DIMRET		; Return to "DIMRET"
 3165/947B : 51                         	PUSH	CX			; Save on stack
 3166/947C : 0C AF                      	OR	AL,0AFH			; Flag "Create" variable
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 54 - 2023/10/14 12時49分15秒


 3167/947E : EB 02                      	JMP	GETVAR1
 3168/9480 :                            GETVAR:
 3169/9480 : 32 C0                      	XOR	AL,AL			; Find variable address to DE
 3170/9482 :                            GETVAR1:
 3171/9482 : A2 F6 08                   	MOV	[LCRFLG],AL		; Set locate / create flag
 3172/9485 : 8A 2F                      	MOV	CH,[BX]			; Get First byte of name
 3173/9487 :                            GTFNAM:
 3174/9487 : E8 31 F8                   	CALL	CHKLTR			; See if a letter
 3175/948A : 73 03                      	JNC	GTFNAM1
 3176/948C : E9 7C F1                   	JMP	SNERR			; ?SN Error if not a letter
 3177/948F :                            GTFNAM1:
 3178/948F : 32 C0                      	XOR	AL,AL
 3179/9491 : 8A C8                      	MOV	CL,AL			; Clear second byte of name
 3180/9493 : A2 F7 08                   	MOV	[TYPE],AL		; Set type to numeric
 3181/9496 : E8 43 F7                   	CALL	GETCHR			; Get next character
 3182/9499 : 72 05                      	JC	SVNAM2			; Numeric - Save in name
 3183/949B : E8 1D F8                   	CALL	CHKLTR			; See if a letter
 3184/949E : 72 0C                      	JC	CHARTY			; Not a letter - Check type
 3185/94A0 :                            SVNAM2:
 3186/94A0 : 8A C8                      	MOV	CL,AL			; Save second byte of name
 3187/94A2 :                            ENDNAM:
 3188/94A2 : E8 37 F7                   	CALL	GETCHR			; Get next character
 3189/94A5 : 72 FB                      	JC	ENDNAM			; Numeric - Get another
 3190/94A7 : E8 11 F8                   	CALL	CHKLTR			; See if a letter
 3191/94AA : 73 F6                      	JNC	ENDNAM			; Letter - Get another
 3192/94AC :                            CHARTY:
 3193/94AC : 2C 24                      	SUB	AL,'$'			; String variable?
 3194/94AE : 75 0E                      	JNZ	NOTSTR			; No - Numeric variable
 3195/94B0 : FE C0                      	INC	AL			; A = 1 (string type)
 3196/94B2 : A2 F7 08                   	MOV	[TYPE],AL		; Set type to string
 3197/94B5 : D0 C8                      	ROR	AL,1			; A = 80H , Flag for string
 3198/94B7 : 02 C1                      	ADD	AL,CL			; 2nd byte of name has bit 7 on
 3199/94B9 : 8A C8                      	MOV	CL,AL			; Resave second byte on name
 3200/94BB : E8 1E F7                   	CALL	GETCHR			; Get next character
 3201/94BE :                            NOTSTR:
 3202/94BE : A0 15 09                   	MOV	AL,[FORFLG]		; Array name needed ?
 3203/94C1 : FE C8                      	DEC	AL
 3204/94C3 : 75 03                      	JNZ	NOTSTR1			; Yes - Get array name
 3205/94C5 : E9 E6 00                   	JMP	ARLDSV
 3206/94C8 :                            NOTSTR1:
 3207/94C8 : 79 09                      	JNS	NSCFOR			; No array with "FOR" or "FN"
 3208/94CA : 8A 07                      	MOV	AL,[BX]			; Get byte again
 3209/94CC : 2C 28                      	SUB	AL,'('			; Subscripted variable?
 3210/94CE : 75 03                      	JNZ	NSCFOR			; Yes - Sort out subscript
 3211/94D0 : E9 9F 00                   	JMP	SBSCPT
 3212/94D3 :                            ;
 3213/94D3 :                            NSCFOR:
 3214/94D3 : 32 C0                      	XOR	AL,AL			; Simple variable
 3215/94D5 : A2 15 09                   	MOV	[FORFLG],AL		; Clear "FOR" flag
 3216/94D8 : 53                         	PUSH	BX			; Save code string address
 3217/94D9 : 8A F5                      	MOV	DH,CH			; DE = Variable name to find
 3218/94DB : 8A D1                      	MOV	DL,CL
 3219/94DD : 8B 1E 28 09                	MOV	BX,[FNRGNM]		; FN argument name
 3220/94E1 : E8 D3 F4                   	CALL	CPDEHL			; Is it the FN argument?
 3221/94E4 : BA 2A 09                   	MOV	DX,FNARG		; Point to argument value
 3222/94E7 : 75 03                      	JNZ	NSCFOR1
 3223/94E9 : E9 C8 09                   	JMP	POPHRT			; Yes - Return FN argument value
 3224/94EC :                            NSCFOR1:
 3225/94EC : 8B 1E 22 09                	MOV	BX,[VAREND]		; End of variables
 3226/94F0 : 87 DA                      	XCHG	BX,DX			; Address of end of search
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 55 - 2023/10/14 12時49分15秒


 3227/94F2 : 8B 1E 20 09                	MOV	BX,[PROGND]		; Start of variables address
 3228/94F6 :                            FNDVAR:
 3229/94F6 : E8 BE F4                   	CALL	CPDEHL			; End of variable list table?
 3230/94F9 : 74 20                      	JZ	CFEVAL			; Yes - Called from EVAL?
 3231/94FB : 8A C1                      	MOV	AL,CL			; Get second byte of name
 3232/94FD : 2A 07                      	SUB	AL,[BX]			; Compare with name in list
 3233/94FF : 9F                         	LAHF
 3234/9500 : 43                         	INC	BX			; Move on to first byte
 3235/9501 : 9E                         	SAHF
 3236/9502 : 75 04                      	JNZ	FNTHR			; Different - Find another
 3237/9504 : 8A C5                      	MOV	AL,CH			; Get first byte of name
 3238/9506 : 2A 07                      	SUB	AL,[BX]			; Compare with name in list
 3239/9508 :                            FNTHR:
 3240/9508 : 9F                         	LAHF
 3241/9509 : 43                         	INC	BX			; Move on to LSB of value
 3242/950A : 9E                         	SAHF
 3243/950B : 74 55                      	JZ	RETADR			; Found - Return address
 3244/950D : 9F                         	LAHF
 3245/950E : 43                         	INC	BX			; <- Skip
 3246/950F : 9E                         	SAHF
 3247/9510 : 9F                         	LAHF
 3248/9511 : 43                         	INC	BX			; <- over
 3249/9512 : 9E                         	SAHF
 3250/9513 : 9F                         	LAHF
 3251/9514 : 43                         	INC	BX			; <- F.P.
 3252/9515 : 9E                         	SAHF
 3253/9516 : 9F                         	LAHF
 3254/9517 : 43                         	INC	BX			; <- value
 3255/9518 : 9E                         	SAHF
 3256/9519 : EB DB                      	JMP	FNDVAR			; Keep looking
 3257/951B :                            ;
 3258/951B :                            CFEVAL:
 3259/951B : 5B                         	POP	BX			; Restore code string address
 3260/951C : 8B EC                      	MOV	BP,SP
 3261/951E : 87 5E 00                   	XCHG	[BP],BX			; Get return address
 3262/9521 : 52                         	PUSH	DX			; Save address of variable
 3263/9522 : BA E8 92                   	MOV	DX,FRMEVL		; Return address in EVAL
 3264/9525 : E8 8F F4                   	CALL	CPDEHL			; Called from EVAL ?
 3265/9528 : 5A                         	POP	DX			; Restore address of variable
 3266/9529 : 74 3B                      	JZ	RETNUL			; Yes - Return null variable
 3267/952B : 8B EC                      	MOV	BP,SP
 3268/952D : 87 5E 00                   	XCHG	[BP],BX			; Put back return
 3269/9530 : 53                         	PUSH	BX			; Save code string address
 3270/9531 : 51                         	PUSH	CX			; Save variable name
 3271/9532 : B9 06 00                   	MOV	CX,6			; 2 byte name plus 4 by data
 3272/9535 : 8B 1E 24 09                	MOV	BX,[ARREND]		; End of arrays
 3273/9539 : 53                         	PUSH	BX			; Save end of arrays
 3274/953A : 03 D9                      	ADD	BX,CX			; Move up 6 bytes
 3275/953C : 59                         	POP	CX			; Source address in BC
 3276/953D : 53                         	PUSH	BX			; Save new end address
 3277/953E : E8 80 F0                   	CALL	MOVUP			; Move arrays up
 3278/9541 : 5B                         	POP	BX			; Restore new end address
 3279/9542 : 89 1E 24 09                	MOV	[ARREND],BX		; Set new end address
 3280/9546 : 8B D9                      	MOV	BX,CX			; End of variables to HL
 3281/9548 : 89 1E 22 09                	MOV	[VAREND],BX		; Set new end address
 3282/954C :                            ;
 3283/954C :                            ZEROLP:
 3284/954C : 9F                         	LAHF
 3285/954D : 4B                         	DEC	BX			; Back through to zero variable
 3286/954E : 9E                         	SAHF
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 56 - 2023/10/14 12時49分15秒


 3287/954F : C6 07 00                   	MOV	BYTE PTR [BX],0		; Zero byte in variable
 3288/9552 : E8 62 F4                   	CALL	CPDEHL			; Done them all?
 3289/9555 : 75 F5                      	JNZ	ZEROLP			; No - Keep on going
 3290/9557 : 5A                         	POP	DX			; Get variable name
 3291/9558 : 88 17                      	MOV	[BX],DL			; Store second character
 3292/955A : 9F                         	LAHF
 3293/955B : 43                         	INC	BX
 3294/955C : 9E                         	SAHF
 3295/955D : 88 37                      	MOV	[BX],DH			; Store first character
 3296/955F : 9F                         	LAHF
 3297/9560 : 43                         	INC	BX
 3298/9561 : 9E                         	SAHF
 3299/9562 :                            RETADR:
 3300/9562 : 87 DA                      	XCHG	BX,DX			; Address of variable in DE
 3301/9564 : 5B                         	POP	BX			; Restore code string address
 3302/9565 : C3                         	RET
 3303/9566 :                            ;
 3304/9566 :                            RETNUL:
 3305/9566 : A2 31 09                   	MOV	[FPEXP],AL		; Set result to zero
 3306/9569 : BB 86 85                   	MOV	BX,ZERBYT		; Also set a null string
 3307/956C : 89 1E 2E 09                	MOV	[FPREG],BX		; Save for EVAL
 3308/9570 : 5B                         	POP	BX			; Restore code string address
 3309/9571 : C3                         	RET
 3310/9572 :                            ;
 3311/9572 :                            SBSCPT:
 3312/9572 : 53                         	PUSH	BX			; Save code string address
 3313/9573 : 8B 1E F6 08                	MOV	BX,[LCRFLG]		; Locate/Create and Type
 3314/9577 : 8B EC                      	MOV	BP,SP
 3315/9579 : 87 5E 00                   	XCHG	[BP],BX			; Save and get code string
 3316/957C : 8A F0                      	MOV	DH,AL			; Zero number of dimensions
 3317/957E :                            SCPTLP:
 3318/957E : 52                         	PUSH	DX			; Save number of dimensions
 3319/957F : 51                         	PUSH	CX			; Save array name
 3320/9580 : E8 43 F7                   	CALL	FPSINT			; Get subscript (0-32767)
 3321/9583 : 59                         	POP	CX			; Restore array name
 3322/9584 : 58                         	POP	AX			; Get number of dimensions
 3323/9585 : 86 E0                      	XCHG	AH,AL
 3324/9587 : 9E                         	SAHF
 3325/9588 : 87 DA                      	XCHG	BX,DX
 3326/958A : 8B EC                      	MOV	BP,SP
 3327/958C : 87 5E 00                   	XCHG	[BP],BX			; Save subscript value
 3328/958F : 53                         	PUSH	BX			; Save LCRFLG and TYPE
 3329/9590 : 87 DA                      	XCHG	BX,DX
 3330/9592 : FE C0                      	INC	AL			; Count dimensions
 3331/9594 : 8A F0                      	MOV	DH,AL			; Save in D
 3332/9596 : 8A 07                      	MOV	AL,[BX]			; Get next byte in code string
 3333/9598 : 3C 2C                      	CMP	AL,','			; Comma (more to come)?
 3334/959A : 74 E2                      	JZ	SCPTLP			; Yes - More subscripts
 3335/959C : E8 24 F4                   	CALL	CHKSYN			; Make sure ")" follows
 3336/959F : 29                         	DB	")"
 3337/95A0 : 89 1E 1A 09                	MOV	[NXTOPR],BX		; Save code string address
 3338/95A4 : 5B                         	POP	BX			; Get LCRFLG and TYPE
 3339/95A5 : 89 1E F6 08                	MOV	[LCRFLG],BX		; Restore Locate/create & type
 3340/95A9 : B2 00                      	MOV	DL,0			; Flag not CSAVE* or CLOAD*
 3341/95AB : 52                         	PUSH	DX			; Save number of dimensions (D)
 3342/95AC : EB 07                      	JMP	ARLDSV1			; Skip "PUSH HL" and "PUSH AF"
 3343/95AE :                            ;
 3344/95AE :                            ARLDSV:
 3345/95AE : 53                         	PUSH	BX			; Save code string address
 3346/95AF : 9F                         	LAHF
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 57 - 2023/10/14 12時49分15秒


 3347/95B0 : 86 E0                      	XCHG	AH,AL
 3348/95B2 : 50                         	PUSH	AX			; A = 00 , Flags set = Z,N
 3349/95B3 : 86 E0                      	XCHG	AH,AL
 3350/95B5 :                            ARLDSV1:
 3351/95B5 : 8B 1E 22 09                	MOV	BX,[VAREND]		; Start of arrays
 3352/95B9 : EB 02                      	JMP	FNDARY1			; Skip "ADD HL,DE"
 3353/95BB :                            FNDARY:
 3354/95BB : 03 DA                      	ADD	BX,DX			; Move to next array start
 3355/95BD :                            FNDARY1:
 3356/95BD : 87 DA                      	XCHG	BX,DX
 3357/95BF : 8B 1E 24 09                	MOV	BX,[ARREND]		; End of arrays
 3358/95C3 : 87 DA                      	XCHG	BX,DX			; Current array pointer
 3359/95C5 : E8 EF F3                   	CALL	CPDEHL			; End of arrays found?
 3360/95C8 : 74 3D                      	JZ	CREARY			; Yes - Create array
 3361/95CA : 8A 07                      	MOV	AL,[BX]			; Get second byte of name
 3362/95CC : 3A C1                      	CMP	AL,CL			; Compare with name given
 3363/95CE : 9F                         	LAHF
 3364/95CF : 43                         	INC	BX			; Move on
 3365/95D0 : 9E                         	SAHF
 3366/95D1 : 75 04                      	JNZ	NXTARY			; Different - Find next array
 3367/95D3 : 8A 07                      	MOV	AL,[BX]			; Get first byte of name
 3368/95D5 : 3A C5                      	CMP	AL,CH			; Compare with name given
 3369/95D7 :                            NXTARY:
 3370/95D7 : 9F                         	LAHF
 3371/95D8 : 43                         	INC	BX			; Move on
 3372/95D9 : 9E                         	SAHF
 3373/95DA : 8A 17                      	MOV	DL,[BX]			; Get LSB of next array address
 3374/95DC : 9F                         	LAHF
 3375/95DD : 43                         	INC	BX
 3376/95DE : 9E                         	SAHF
 3377/95DF : 8A 37                      	MOV	DH,[BX]			; Get MSB of next array address
 3378/95E1 : 9F                         	LAHF
 3379/95E2 : 43                         	INC	BX
 3380/95E3 : 9E                         	SAHF
 3381/95E4 : 75 D5                      	JNZ	FNDARY			; Not found - Keep looking
 3382/95E6 : A0 F6 08                   	MOV	AL,[LCRFLG]		; Found Locate or Creat it?
 3383/95E9 : 0A C0                      	OR	AL,AL
 3384/95EB : 74 03                      	JZ	NXTARY1			; Create - ?DD Error
 3385/95ED : E9 27 F0                   	JMP	DDERR
 3386/95F0 :                            NXTARY1:
 3387/95F0 : 58                         	POP	AX			; Locate - Get number of dimensions
 3388/95F1 : 86 E0                      	XCHG	AH,AL
 3389/95F3 : 9E                         	SAHF
 3390/95F4 : 8B CB                      	MOV	CX,BX			; BC Points to array dimensions
 3391/95F6 : 75 03                      	JNZ	NXTARY2			; Jump if array load/save
 3392/95F8 : E9 B9 08                   	JMP	POPHRT
 3393/95FB :                            NXTARY2:
 3394/95FB : 2A 07                      	SUB	AL,[BX]			; Same number of dimensions?
 3395/95FD : 75 03                      	JNZ	BSERR			; Yes - Find element
 3396/95FF : E9 AA 00                   	JMP	FINDEL
 3397/9602 :                            BSERR:
 3398/9602 : B2 10                      	MOV	DL,BS			; ?BS Error
 3399/9604 : E9 1E F0                   	JMP	ERROR			; Output error
 3400/9607 :                            ;
 3401/9607 :                            CREARY:
 3402/9607 : BA 04 00                   	MOV	DX,4			; 4 Bytes per entry
 3403/960A : 58                         	POP	AX			; Array to save or 0 dimensions?
 3404/960B : 86 E0                      	XCHG	AH,AL
 3405/960D : 9E                         	SAHF
 3406/960E : 75 03                      	JNZ	CREARY1
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 58 - 2023/10/14 12時49分15秒


 3407/9610 : E9 D8 F6                   	JMP	FCERR			; Yes - ?FC Error
 3408/9613 :                            CREARY1:
 3409/9613 : 88 0F                      	MOV	[BX],CL			; Save second byte of n
 3410/9615 : 9F                         	LAHF
 3411/9616 : 43                         	INC	BX
 3412/9617 : 9E                         	SAHF
 3413/9618 : 88 2F                      	MOV	[BX],CH			; Save first byte of name
 3414/961A : 9F                         	LAHF
 3415/961B : 43                         	INC	BX
 3416/961C : 9E                         	SAHF
 3417/961D : 8A C8                      	MOV	CL,AL			; Number of dimensions to C
 3418/961F : E8 BB EF                   	CALL	CHKSTK			; Check if enough memory
 3419/9622 : 9F                         	LAHF
 3420/9623 : 43                         	INC	BX			; Point to number of dimensions
 3421/9624 : 9E                         	SAHF
 3422/9625 : 9F                         	LAHF
 3423/9626 : 43                         	INC	BX
 3424/9627 : 9E                         	SAHF
 3425/9628 : 89 1E 0F 09                	MOV	[CUROPR],BX		; Save address of pointer
 3426/962C : 88 0F                      	MOV	[BX],CL			; Set number of dimensions
 3427/962E : 9F                         	LAHF
 3428/962F : 43                         	INC	BX
 3429/9630 : 9E                         	SAHF
 3430/9631 : A0 F6 08                   	MOV	AL,[LCRFLG]		; Locate of Create?
 3431/9634 : D0 D0                      	RCL	AL,1			; Carry set = Create
 3432/9636 : 8A C1                      	MOV	AL,CL			; Get number of dimensions
 3433/9638 :                            CRARLP:
 3434/9638 : B9 0B 00                   	MOV	CX,10+1			; Default dimension size 10
 3435/963B : 73 04                      	JNC	DEFSIZ			; Locate - Set default size
 3436/963D : 59                         	POP	CX			; Get specified dimension size
 3437/963E : 9F                         	LAHF
 3438/963F : 41                         	INC	CX			; Include zero element
 3439/9640 : 9E                         	SAHF
 3440/9641 :                            DEFSIZ:
 3441/9641 : 88 0F                      	MOV	[BX],CL			; Save LSB of dimension size
 3442/9643 : 9F                         	LAHF
 3443/9644 : 43                         	INC	BX
 3444/9645 : 9E                         	SAHF
 3445/9646 : 88 2F                      	MOV	[BX],CH			; Save MSB of dimension size
 3446/9648 : 9F                         	LAHF
 3447/9649 : 43                         	INC	BX
 3448/964A : 9E                         	SAHF
 3449/964B : 9F                         	LAHF
 3450/964C : 86 E0                      	XCHG	AH,AL
 3451/964E : 50                         	PUSH	AX			; Save num' of dimensions an status
 3452/964F : 86 E0                      	XCHG	AH,AL
 3453/9651 : 53                         	PUSH	BX			; Save address of dimensions size
 3454/9652 : E8 DF 0A                   	CALL	MLDEBC			; Multiply DE by BC to find
 3455/9655 : 87 DA                      	XCHG	BX,DX			; amount of mem needed (to DE)
 3456/9657 : 5B                         	POP	BX			; Restore address of dimension
 3457/9658 : 58                         	POP	AX			; Restore number of dimensions
 3458/9659 : 86 E0                      	XCHG	AH,AL
 3459/965B : 9E                         	SAHF
 3460/965C : FE C8                      	DEC	AL			; Count them
 3461/965E : 75 D8                      	JNZ	CRARLP			; Do next dimension if more
 3462/9660 : 9F                         	LAHF
 3463/9661 : 86 E0                      	XCHG	AH,AL
 3464/9663 : 50                         	PUSH	AX			; Save locate/create flag
 3465/9664 : 86 E0                      	XCHG	AH,AL
 3466/9666 : 8B CA                      	MOV	CX,DX			; memory needed
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 59 - 2023/10/14 12時49分15秒


 3467/9668 : 87 DA                      	XCHG	BX,DX
 3468/966A : 03 DA                      	ADD	BX,DX			; Add bytes to array start
 3469/966C : 73 03                      	JNC	DEFSIZ1
 3470/966E : E9 8E EF                   	JMP	OMERR			; Too big - Error
 3471/9671 :                            DEFSIZ1:
 3472/9671 : E8 76 EF                   	CALL	ENFMEM			; See if enough memory
 3473/9674 : 89 1E 24 09                	MOV	[ARREND],BX		; Save new end of array
 3474/9678 :                            ;
 3475/9678 :                            ZERARY:
 3476/9678 : 9F                         	LAHF
 3477/9679 : 4B                         	DEC	BX			; Back through array data
 3478/967A : 9E                         	SAHF
 3479/967B : C6 07 00                   	MOV	BYTE PTR [BX],0		; Set array element to zero
 3480/967E : E8 36 F3                   	CALL	CPDEHL			; All elements zeroed?
 3481/9681 : 75 F5                      	JNZ	ZERARY			; No - Keep on going
 3482/9683 : 9F                         	LAHF
 3483/9684 : 41                         	INC	CX			; Number of bytes + 1
 3484/9685 : 9E                         	SAHF
 3485/9686 : 8A F0                      	MOV	DH,AL			; A=0
 3486/9688 : 8B 1E 0F 09                	MOV	BX,[CUROPR]		; Get address of array
 3487/968C : 8A 17                      	MOV	DL,[BX]			; Number of dimensions
 3488/968E : 87 DA                      	XCHG	BX,DX			; To HL
 3489/9690 : 03 DB                      	ADD	BX,BX			; Two bytes per dimension size
 3490/9692 : 03 D9                      	ADD	BX,CX			; Add number of bytes
 3491/9694 : 87 DA                      	XCHG	BX,DX			; Bytes needed to DE
 3492/9696 : 9F                         	LAHF
 3493/9697 : 4B                         	DEC	BX
 3494/9698 : 9E                         	SAHF
 3495/9699 : 9F                         	LAHF
 3496/969A : 4B                         	DEC	BX
 3497/969B : 9E                         	SAHF
 3498/969C : 88 17                      	MOV	[BX],DL			; Save LSB of bytes needed
 3499/969E : 9F                         	LAHF
 3500/969F : 43                         	INC	BX
 3501/96A0 : 9E                         	SAHF
 3502/96A1 : 88 37                      	MOV	[BX],DH			; Save MSB of bytes needed
 3503/96A3 : 9F                         	LAHF
 3504/96A4 : 43                         	INC	BX
 3505/96A5 : 9E                         	SAHF
 3506/96A6 : 58                         	POP	AX			; Locate / Create?
 3507/96A7 : 86 E0                      	XCHG	AH,AL
 3508/96A9 : 9E                         	SAHF
 3509/96AA : 72 43                      	JC	ENDDIM			; A is 0 , End if create
 3510/96AC :                            FINDEL:
 3511/96AC : 8A E8                      	MOV	CH,AL			; Find array element
 3512/96AE : 8A C8                      	MOV	CL,AL
 3513/96B0 : 8A 07                      	MOV	AL,[BX]			; Number of dimensions
 3514/96B2 : 9F                         	LAHF
 3515/96B3 : 43                         	INC	BX
 3516/96B4 : 9E                         	SAHF
 3517/96B5 : EB 01                      	JMP	FNDELP1			; Skip "POP BX"
 3518/96B7 :                            FNDELP:
 3519/96B7 : 5B                         	POP	BX			; Address of next dim' size
 3520/96B8 :                            FNDELP1:
 3521/96B8 : 8A 17                      	MOV	DL,[BX]			; Get LSB of dim'n size
 3522/96BA : 9F                         	LAHF
 3523/96BB : 43                         	INC	BX
 3524/96BC : 9E                         	SAHF
 3525/96BD : 8A 37                      	MOV	DH,[BX]			; Get MSB of dim'n size
 3526/96BF : 9F                         	LAHF
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 60 - 2023/10/14 12時49分15秒


 3527/96C0 : 43                         	INC	BX
 3528/96C1 : 9E                         	SAHF
 3529/96C2 : 8B EC                      	MOV	BP,SP
 3530/96C4 : 87 5E 00                   	XCHG	[BP],BX			; Save address - Get index
 3531/96C7 : 9F                         	LAHF
 3532/96C8 : 86 E0                      	XCHG	AH,AL
 3533/96CA : 50                         	PUSH	AX			; Save number of dimensions
 3534/96CB : 86 E0                      	XCHG	AH,AL
 3535/96CD : E8 E7 F2                   	CALL	CPDEHL			; Dimension too large?
 3536/96D0 : 72 03                      	JC	FNDELP2
 3537/96D2 : E9 2D FF                   	JMP	BSERR			; Yes - ?BS Error
 3538/96D5 :                            FNDELP2:
 3539/96D5 : 53                         	PUSH	BX			; Save index
 3540/96D6 : E8 5B 0A                   	CALL	MLDEBC			; Multiply previous by size
 3541/96D9 : 5A                         	POP	DX			; Index supplied to DE
 3542/96DA : 03 DA                      	ADD	BX,DX			; Add index to pointer
 3543/96DC : 58                         	POP	AX			; Number of dimensions
 3544/96DD : 86 E0                      	XCHG	AH,AL
 3545/96DF : 9E                         	SAHF
 3546/96E0 : FE C8                      	DEC	AL			; Count them
 3547/96E2 : 8B CB                      	MOV	CX,BX			; pointer
 3548/96E4 : 75 D1                      	JNZ	FNDELP			; More - Keep going
 3549/96E6 : 03 DB                      	ADD	BX,BX			; 4 Bytes per element
 3550/96E8 : 03 DB                      	ADD	BX,BX
 3551/96EA : 59                         	POP	CX			; Start of array
 3552/96EB : 03 D9                      	ADD	BX,CX			; Point to element
 3553/96ED : 87 DA                      	XCHG	BX,DX			; Address of element to DE
 3554/96EF :                            ENDDIM:
 3555/96EF : 8B 1E 1A 09                	MOV	BX,[NXTOPR]		; Got code string address
 3556/96F3 : C3                         	RET
 3557/96F4 :                            ;
 3558/96F4 :                            FRE:
 3559/96F4 : 8B 1E 24 09                	MOV	BX,[ARREND]		; Start of free memory
 3560/96F8 : 87 DA                      	XCHG	BX,DX			; To DE
 3561/96FA : BB 00 00                   	MOV	BX,0			; End of free memory
 3562/96FD : 03 DC                      	ADD	BX,SP			; Current stack value
 3563/96FF : A0 F7 08                   	MOV	AL,[TYPE]		; Dummy argument type
 3564/9702 : 0A C0                      	OR	AL,AL
 3565/9704 : 74 10                      	JZ	FRENUM			; Numeric - Free variable space
 3566/9706 : E8 85 03                   	CALL	GSTRCU			; Current string to pool
 3567/9709 : E8 0B 02                   	CALL	GARBGE			; Garbage collection
 3568/970C : 8B 1E A4 08                	MOV	BX,[STRSPC]		; Bottom of string space in use
 3569/9710 : 87 DA                      	XCHG	BX,DX			; To DE
 3570/9712 : 8B 1E 0D 09                	MOV	BX,[STRBOT]		; Bottom of string space
 3571/9716 :                            FRENUM:
 3572/9716 : 8A C3                      	MOV	AL,BL			; Get LSB of end
 3573/9718 : 2A C2                      	SUB	AL,DL			; Subtract LSB of beginning
 3574/971A : 8A C8                      	MOV	CL,AL			; Save difference if C
 3575/971C : 8A C7                      	MOV	AL,BH			; Get MSB of end
 3576/971E : 1A C6                      	SBB	AL,DH			; Subtract MSB of beginning
 3577/9720 :                            ACPASS:
 3578/9720 : 8A E9                      	MOV	CH,CL			; Return integer AC
 3579/9722 :                            ABPASS:
 3580/9722 : 8A F5                      	MOV	DH,CH			; Return integer AB
 3581/9724 : B2 00                      	MOV	DL,0
 3582/9726 : BB F7 08                   	MOV	BX,TYPE			; Point to type
 3583/9729 : 88 17                      	MOV	[BX],DL			; Set type to numeric
 3584/972B : B5 90                      	MOV	CH,80H+16		; 16 bit integer
 3585/972D : E9 AD 08                   	JMP	RETINT			; Return the integr
 3586/9730 :                            ;
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 61 - 2023/10/14 12時49分15秒


 3587/9730 :                            POS:
 3588/9730 : A0 F5 08                   	MOV	AL,[CURPOS]		; Get cursor position
 3589/9733 :                            PASSA:
 3590/9733 : 8A E8                      	MOV	CH,AL			; Put A into AB
 3591/9735 : 32 C0                      	XOR	AL,AL			; Zero A
 3592/9737 : EB E9                      	JMP	ABPASS			; Return integer AB
 3593/9739 :                            ;
 3594/9739 :                            DEF:
 3595/9739 : E8 B6 00                   	CALL	CHEKFN			; Get "FN" and name
 3596/973C : E8 9E 00                   	CALL	IDTEST			; Test for illegal direct
 3597/973F : B9 0E 8E                   	MOV	CX,DATA			; To get next statement
 3598/9742 : 51                         	PUSH	CX			; Save address for RETurn
 3599/9743 : 52                         	PUSH	DX			; Save address of function ptr
 3600/9744 : E8 7C F2                   	CALL	CHKSYN			; Make sure "(" follows
 3601/9747 : 28                         	DB	"("
 3602/9748 : E8 35 FD                   	CALL	GETVAR			; Get argument variable name
 3603/974B : 53                         	PUSH	BX			; Save code string address
 3604/974C : 87 DA                      	XCHG	BX,DX			; Argument address to HL
 3605/974E : 9F                         	LAHF
 3606/974F : 4B                         	DEC	BX
 3607/9750 : 9E                         	SAHF
 3608/9751 : 8A 37                      	MOV	DH,[BX]			; Get first byte of arg name
 3609/9753 : 9F                         	LAHF
 3610/9754 : 4B                         	DEC	BX
 3611/9755 : 9E                         	SAHF
 3612/9756 : 8A 17                      	MOV	DL,[BX]			; Get second byte of ar
 3613/9758 : 5B                         	POP	BX			; Restore code string address
 3614/9759 : E8 53 FA                   	CALL	TSTNUM			; Make sure numeric argument
 3615/975C : E8 64 F2                   	CALL	CHKSYN			; Make sure ")" follows
 3616/975F : 29                         	DB	")"
 3617/9760 : E8 60 F2                   	CALL	CHKSYN			; Make sure "=" follows
 3618/9763 : B4                         	DB	ZEQUAL			; "=" token
 3619/9764 : 8B CB                      	MOV	CX,BX			; Code string address to BC
 3620/9766 : 8B EC                      	MOV	BP,SP
 3621/9768 : 87 5E 00                   	XCHG	[BP],BX			; Save code str , Get FN ptr
 3622/976B : 88 0F                      	MOV	[BX],CL			; Save LSB of FN code string
 3623/976D : 9F                         	LAHF
 3624/976E : 43                         	INC	BX
 3625/976F : 9E                         	SAHF
 3626/9770 : 88 2F                      	MOV	[BX],CH			; Save MSB of FN code string
 3627/9772 : E9 CB 00                   	JMP	SVSTAD			; Save address and do function
 3628/9775 :                            ;
 3629/9775 :                            DOFN:
 3630/9775 : E8 7A 00                   	CALL	CHEKFN			; Make sure FN follows
 3631/9778 : 52                         	PUSH	DX			; Save function pointer address
 3632/9779 : E8 4F FB                   	CALL	EVLPAR			; Evaluate expression in "()"
 3633/977C : E8 30 FA                   	CALL	TSTNUM			; Make sure numeric result
 3634/977F : 8B EC                      	MOV	BP,SP
 3635/9781 : 87 5E 00                   	XCHG	[BP],BX			; Save code str , Get FN ptr
 3636/9784 : 8A 17                      	MOV	DL,[BX]			; Get LSB of FN code string
 3637/9786 : 9F                         	LAHF
 3638/9787 : 43                         	INC	BX
 3639/9788 : 9E                         	SAHF
 3640/9789 : 8A 37                      	MOV	DH,[BX]			; Get MSB of FN code string
 3641/978B : 9F                         	LAHF
 3642/978C : 43                         	INC	BX
 3643/978D : 9E                         	SAHF
 3644/978E : 8A C6                      	MOV	AL,DH			; And function DEFined?
 3645/9790 : 0A C2                      	OR	AL,DL
 3646/9792 : 75 03                      	JNZ	DOFN1
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 62 - 2023/10/14 12時49分15秒


 3647/9794 : E9 84 EE                   	JMP	UFERR			; No - ?UF Error
 3648/9797 :                            DOFN1:
 3649/9797 : 8A 07                      	MOV	AL,[BX]			; Get LSB of argument address
 3650/9799 : 9F                         	LAHF
 3651/979A : 43                         	INC	BX
 3652/979B : 9E                         	SAHF
 3653/979C : 8A 3F                      	MOV	BH,[BX]			; Get MSB of argument address
 3654/979E : 8A D8                      	MOV	BL,AL			; HL = Arg variable address
 3655/97A0 : 53                         	PUSH	BX			; Save it
 3656/97A1 : 8B 1E 28 09                	MOV	BX,[FNRGNM]		; Get old argument name
 3657/97A5 : 8B EC                      	MOV	BP,SP
 3658/97A7 : 87 5E 00                   	XCHG	[BP],BX			; Save old , Get new
 3659/97AA : 89 1E 28 09                	MOV	[FNRGNM],BX		; Set new argument name
 3660/97AE : 8B 1E 2C 09                	MOV	BX,[FNARG+2]		; Get LSB,NLSB of old arg value
 3661/97B2 : 53                         	PUSH	BX			; Save it
 3662/97B3 : 8B 1E 2A 09                	MOV	BX,[FNARG]		; Get MSB,EXP of old arg value
 3663/97B7 : 53                         	PUSH	BX			; Save it
 3664/97B8 : BB 2A 09                   	MOV	BX,FNARG		; HL = Value of argument
 3665/97BB : 52                         	PUSH	DX			; Save FN code string address
 3666/97BC : E8 7F 08                   	CALL	FPTHL			; Move FPREG to argument
 3667/97BF : 5B                         	POP	BX			; Get FN code string address
 3668/97C0 : E8 E9 F9                   	CALL	GETNUM			; Get value from function
 3669/97C3 :                            ;	LAHF
 3670/97C3 : 4B                         	DEC	BX			; DEC 'cos GETCHR INCs
 3671/97C4 :                            ;	SAHF
 3672/97C4 : E8 15 F4                   	CALL	GETCHR			; Get next character
 3673/97C7 : 74 03                      	JZ	DOFN2
 3674/97C9 : E9 3F EE                   	JMP	SNERR			; Bad character in FN - Error
 3675/97CC :                            DOFN2:
 3676/97CC : 5B                         	POP	BX			; Get MSB,EXP of old arg
 3677/97CD : 89 1E 2A 09                	MOV	[FNARG],BX		; Restore it
 3678/97D1 : 5B                         	POP	BX			; Get LSB,NLSB of old arg
 3679/97D2 : 89 1E 2C 09                	MOV	[FNARG+2],BX		; Restore it
 3680/97D6 : 5B                         	POP	BX			; Get name of old arg
 3681/97D7 : 89 1E 28 09                	MOV	[FNRGNM],BX		; Restore it
 3682/97DB : 5B                         	POP	BX			; Restore code string address
 3683/97DC : C3                         	RET
 3684/97DD :                            ;
 3685/97DD :                            IDTEST:
 3686/97DD : 53                         	PUSH	BX			; Save code string address
 3687/97DE : 8B 1E A6 08                	MOV	BX,[LINEAT]		; Get current line number
 3688/97E2 : 9F                         	LAHF
 3689/97E3 : 43                         	INC	BX			; -1 means direct statement
 3690/97E4 : 9E                         	SAHF
 3691/97E5 : 8A C7                      	MOV	AL,BH
 3692/97E7 : 0A C3                      	OR	AL,BL
 3693/97E9 : 5B                         	POP	BX			; Restore code string address
 3694/97EA : 74 01                      	JZ	IDTEST1
 3695/97EC : C3                         	RET				; Return if in program
 3696/97ED :                            IDTEST1:
 3697/97ED : B2 16                      	MOV	DL,ID			; ?ID Error
 3698/97EF : E9 33 EE                   	JMP	ERROR
 3699/97F2 :                            ;
 3700/97F2 :                            CHEKFN:
 3701/97F2 : E8 CE F1                   	CALL	CHKSYN			; Make sure FN follows
 3702/97F5 : A7                         	DB	ZFN			; "FN" token
 3703/97F6 : B0 80                      	MOV	AL,80H
 3704/97F8 : A2 15 09                   	MOV	[FORFLG],AL		; Flag FN name to find
 3705/97FB : 0A 07                      	OR	AL,[BX]			; FN name has bit 7 set
 3706/97FD : 8A E8                      	MOV	CH,AL			; in first byte of name
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 63 - 2023/10/14 12時49分15秒


 3707/97FF : E8 85 FC                   	CALL	GTFNAM			; Get FN name
 3708/9802 : E9 AA F9                   	JMP	TSTNUM			; Make sure numeric function
 3709/9805 :                            ;
 3710/9805 :                            STR:
 3711/9805 : E8 A7 F9                   	CALL	TSTNUM			; Make sure it's a number
 3712/9808 : E8 21 0A                   	CALL	NUMASC			; Turn number into text
 3713/980B :                            STR1:
 3714/980B : E8 3E 00                   	CALL	CRTST			; Create string entry for it
 3715/980E : E8 7D 02                   	CALL	GSTRCU			; Current string to pool
 3716/9811 : B9 09 9B                   	MOV	CX,TOPOOL		; Save in string pool
 3717/9814 : 51                         	PUSH	CX			; Save address on stack
 3718/9815 :                            ;
 3719/9815 :                            SAVSTR:
 3720/9815 : 8A 07                      	MOV	AL,[BX]			; Get string length
 3721/9817 : 9F                         	LAHF
 3722/9818 : 43                         	INC	BX
 3723/9819 : 9E                         	SAHF
 3724/981A : 9F                         	LAHF
 3725/981B : 43                         	INC	BX
 3726/981C : 9E                         	SAHF
 3727/981D : 53                         	PUSH	BX			; Save pointer to string
 3728/981E : E8 AB 00                   	CALL	TESTR			; See if enough string space
 3729/9821 : 5B                         	POP	BX			; Restore pointer to string
 3730/9822 : 8A 0F                      	MOV	CL,[BX]			; Get LSB of address
 3731/9824 : 9F                         	LAHF
 3732/9825 : 43                         	INC	BX
 3733/9826 : 9E                         	SAHF
 3734/9827 : 8A 2F                      	MOV	CH,[BX]			; Get MSB of address
 3735/9829 : E8 0B 00                   	CALL	CRTMST			; Create string entry
 3736/982C : 53                         	PUSH	BX			; Save pointer to MSB of addr
 3737/982D : 8A D8                      	MOV	BL,AL			; Length of string
 3738/982F : E8 42 02                   	CALL	TOSTRA			; Move to string area
 3739/9832 : 5A                         	POP	DX			; Restore pointer to MSB
 3740/9833 : C3                         	RET
 3741/9834 :                            ;
 3742/9834 :                            MKTMST:
 3743/9834 : E8 95 00                   	CALL	TESTR			; See if enough string space
 3744/9837 :                            CRTMST:
 3745/9837 : BB 09 09                   	MOV	BX,TMPSTR		; Temporary string
 3746/983A : 53                         	PUSH	BX			; Save it
 3747/983B : 88 07                      	MOV	[BX],AL			; Save length of string
 3748/983D : 9F                         	LAHF
 3749/983E : 43                         	INC	BX
 3750/983F : 9E                         	SAHF
 3751/9840 :                            SVSTAD:
 3752/9840 : 9F                         	LAHF
 3753/9841 : 43                         	INC	BX
 3754/9842 : 9E                         	SAHF
 3755/9843 : 88 17                      	MOV	[BX],DL			; Save LSB of address
 3756/9845 : 9F                         	LAHF
 3757/9846 : 43                         	INC	BX
 3758/9847 : 9E                         	SAHF
 3759/9848 : 88 37                      	MOV	[BX],DH			; Save MSB of address
 3760/984A : 5B                         	POP	BX			; Restore pointer
 3761/984B : C3                         	RET
 3762/984C :                            ;
 3763/984C :                            CRTST:
 3764/984C : 9F                         	LAHF
 3765/984D : 4B                         	DEC	BX			; DEC - INCed after
 3766/984E : 9E                         	SAHF
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 64 - 2023/10/14 12時49分15秒


 3767/984F :                            QTSTR:
 3768/984F : B5 22                      	MOV	CH,'"'			; Terminating quote
 3769/9851 : 8A F5                      	MOV	DH,CH			; Quote to D
 3770/9853 :                            DTSTR:
 3771/9853 : 53                         	PUSH	BX			; Save start
 3772/9854 : B1 FF                      	MOV	CL,-1			; Set counter to -1
 3773/9856 :                            QTSTLP:
 3774/9856 : 9F                         	LAHF
 3775/9857 : 43                         	INC	BX			; Move on
 3776/9858 : 9E                         	SAHF
 3777/9859 : 8A 07                      	MOV	AL,[BX]			; Get byte
 3778/985B : FE C1                      	INC	CL			; Count bytes
 3779/985D : 0A C0                      	OR	AL,AL			; End of line?
 3780/985F : 74 08                      	JZ	CRTSTE			; Yes - Create string entry
 3781/9861 : 3A C6                      	CMP	AL,DH			; Terminator D found?
 3782/9863 : 74 04                      	JZ	CRTSTE			; Yes - Create string entry
 3783/9865 : 3A C5                      	CMP	AL,CH			; Terminator B found?
 3784/9867 : 75 ED                      	JNZ	QTSTLP			; No - Keep looking
 3785/9869 :                            CRTSTE:
 3786/9869 : 3C 22                      	CMP	AL,'"'			; End with '"'?
 3787/986B : 75 03                      	JNZ	CRTSTE1
 3788/986D : E8 6C F3                   	CALL	GETCHR			; Yes - Get next charac
 3789/9870 :                            CRTSTE1:
 3790/9870 : 8B EC                      	MOV	BP,SP
 3791/9872 : 87 5E 00                   	XCHG	[BP],BX			; Starting quote
 3792/9875 : 9F                         	LAHF
 3793/9876 : 43                         	INC	BX			; First byte of string
 3794/9877 : 9E                         	SAHF
 3795/9878 : 87 DA                      	XCHG	BX,DX			; To DE
 3796/987A : 8A C1                      	MOV	AL,CL			; Get length
 3797/987C : E8 B8 FF                   	CALL	CRTMST			; Create string entry
 3798/987F :                            TSTOPL:
 3799/987F : BA 09 09                   	MOV	DX,TMPSTR		; Temporary string
 3800/9882 : 8B 1E FB 08                	MOV	BX,[TMSTPT]		; Temporary string pool pointer
 3801/9886 : 89 1E 2E 09                	MOV	[FPREG],BX		; Save address of string ptr
 3802/988A : B0 01                      	MOV	AL,1
 3803/988C : A2 F7 08                   	MOV	[TYPE],AL		; Set type to string
 3804/988F : E8 AF 07                   	CALL	DETHL4			; Move string to pool
 3805/9892 : E8 22 F1                   	CALL	CPDEHL			; Out of string pool?
 3806/9895 : 89 1E FB 08                	MOV	[TMSTPT],BX		; Save new pointer
 3807/9899 : 5B                         	POP	BX			; Restore code string address
 3808/989A : 8A 07                      	MOV	AL,[BX]			; Get next code byte
 3809/989C : 74 01                      	JZ	TSTOPL1
 3810/989E : C3                         	RET				; Return if pool OK
 3811/989F :                            TSTOPL1:
 3812/989F : B2 1E                      	MOV	DL,ST			; ?ST Error
 3813/98A1 : E9 81 ED                   	JMP	ERROR			; String pool overflow
 3814/98A4 :                            ;
 3815/98A4 :                            PRNUMS:
 3816/98A4 : 9F                         	LAHF
 3817/98A5 : 43                         	INC	BX			; Skip leading space
 3818/98A6 : 9E                         	SAHF
 3819/98A7 :                            PRS:
 3820/98A7 : E8 A2 FF                   	CALL	CRTST			; Create string entry for it
 3821/98AA :                            PRS1:
 3822/98AA : E8 E1 01                   	CALL	GSTRCU			; Current string to pool
 3823/98AD : E8 7D 07                   	CALL	LOADFP			; Move string block to BCDE
 3824/98B0 : FE C2                      	INC	DL			; Length + 1
 3825/98B2 :                            PRSLP:
 3826/98B2 : FE CA                      	DEC	DL			; Count characters
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 65 - 2023/10/14 12時49分15秒


 3827/98B4 : 75 01                      	JNZ	PRSLP1
 3828/98B6 : C3                         	RET				; End of string
 3829/98B7 :                            PRSLP1:
 3830/98B7 : 87 D9                      	XCHG	BX,CX
 3831/98B9 : 8A 07                      	MOV	AL,[BX]			; Get byte to output
 3832/98BB : 87 D9                      	XCHG	BX,CX
 3833/98BD : E8 1C F1                   	CALL	OUTC			; Output character in A
 3834/98C0 : 3C 0D                      	CMP	AL,CR			; Return?
 3835/98C2 : 75 03                      	JNZ	PRSLP2
 3836/98C4 : E8 A5 F6                   	CALL	DONULL			; Yes - Do nulls
 3837/98C7 :                            PRSLP2:
 3838/98C7 : 9F                         	LAHF
 3839/98C8 : 41                         	INC	CX			; Next byte in string
 3840/98C9 : 9E                         	SAHF
 3841/98CA : EB E6                      	JMP	PRSLP			; More characters to output
 3842/98CC :                            ;
 3843/98CC :                            TESTR:
 3844/98CC : 0A C0                      	OR	AL,AL			; Test if enough room
 3845/98CE : EB 04                      	JMP	GRBDON1			; No garbage collection done
 3846/98D0 :                            GRBDON:
 3847/98D0 : 58                         	POP	AX			; Garbage collection done
 3848/98D1 : 86 E0                      	XCHG	AH,AL
 3849/98D3 : 9E                         	SAHF
 3850/98D4 :                            GRBDON1:
 3851/98D4 : 9F                         	LAHF
 3852/98D5 : 86 E0                      	XCHG	AH,AL
 3853/98D7 : 50                         	PUSH	AX			; Save status
 3854/98D8 : 86 E0                      	XCHG	AH,AL
 3855/98DA : 8B 1E A4 08                	MOV	BX,[STRSPC]		; Bottom of string space in use
 3856/98DE : 87 DA                      	XCHG	BX,DX			; To DE
 3857/98E0 : 8B 1E 0D 09                	MOV	BX,[STRBOT]		; Bottom of string area
 3858/98E4 : F6 D0                      	NOT	AL			; Negate length (Top down)
 3859/98E6 : 8A C8                      	MOV	CL,AL			; -Length to BC
 3860/98E8 : B5 FF                      	MOV	CH,-1			; BC = -ve length of string
 3861/98EA : 03 D9                      	ADD	BX,CX			; Add to bottom of space in use
 3862/98EC :                            ;	LAHF
 3863/98EC : 43                         	INC	BX			; Plus one for 2's complement
 3864/98ED :                            ;	SAHF
 3865/98ED : E8 C7 F0                   	CALL	CPDEHL			; Below string RAM area?
 3866/98F0 : 72 0E                      	JC	TESTOS			; Tidy up if not done else err
 3867/98F2 : 89 1E 0D 09                	MOV	[STRBOT],BX		; Save new bottom of area
 3868/98F6 : 9F                         	LAHF
 3869/98F7 : 43                         	INC	BX			; Point to first byte of string
 3870/98F8 : 9E                         	SAHF
 3871/98F9 : 87 DA                      	XCHG	BX,DX			; Address to DE
 3872/98FB :                            POPAF:
 3873/98FB : 58                         	POP	AX			; Throw away status push
 3874/98FC : 86 E0                      	XCHG	AH,AL
 3875/98FE : 9E                         	SAHF
 3876/98FF : C3                         	RET
 3877/9900 :                            ;
 3878/9900 :                            TESTOS:
 3879/9900 : 58                         	POP	AX			; Garbage collect been done?
 3880/9901 : 86 E0                      	XCHG	AH,AL
 3881/9903 : 9E                         	SAHF
 3882/9904 : B2 1A                      	MOV	DL,OS			; ?OS Error
 3883/9906 : 75 03                      	JNZ	TESTOS1
 3884/9908 : E9 1A ED                   	JMP	ERROR			; Yes - Not enough strig space
 3885/990B :                            TESTOS1:
 3886/990B : 3A C0                      	CMP	AL,AL			; Flag garbage collect done
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 66 - 2023/10/14 12時49分15秒


 3887/990D : 9F                         	LAHF
 3888/990E : 86 E0                      	XCHG	AH,AL
 3889/9910 : 50                         	PUSH	AX			; Save status
 3890/9911 : 86 E0                      	XCHG	AH,AL
 3891/9913 : B9 D0 98                   	MOV	CX,GRBDON		; Garbage collection done
 3892/9916 : 51                         	PUSH	CX			; Save for RETurn
 3893/9917 :                            GARBGE:
 3894/9917 : 8B 1E F9 08                	MOV	BX,[LSTRAM]		; Get end of RAM pointer
 3895/991B :                            GARBLP:
 3896/991B : 89 1E 0D 09                	MOV	[STRBOT],BX		; Reset string pointer
 3897/991F : BB 00 00                   	MOV	BX,0
 3898/9922 : 53                         	PUSH	BX			; Flag no string found
 3899/9923 : 8B 1E A4 08                	MOV	BX,[STRSPC]		; Get bottom of string space
 3900/9927 : 53                         	PUSH	BX			; Save bottom of string space
 3901/9928 : BB FD 08                   	MOV	BX,TMSTPL		; Temporary string pool
 3902/992B :                            GRBLP:
 3903/992B : 87 DA                      	XCHG	BX,DX
 3904/992D : 8B 1E FB 08                	MOV	BX,[TMSTPT]		; Temporary string pool pointer
 3905/9931 : 87 DA                      	XCHG	BX,DX
 3906/9933 : E8 81 F0                   	CALL	CPDEHL			; Temporary string pool done?
 3907/9936 : B9 2B 99                   	MOV	CX,GRBLP		; Loop until string pool done
 3908/9939 : 75 56                      	JNZ	STPOOL			; No - See if in string area
 3909/993B : 8B 1E 20 09                	MOV	BX,[PROGND]		; Start of simple variables
 3910/993F :                            SMPVAR:
 3911/993F : 87 DA                      	XCHG	BX,DX
 3912/9941 : 8B 1E 22 09                	MOV	BX,[VAREND]		; End of simple variables
 3913/9945 : 87 DA                      	XCHG	BX,DX
 3914/9947 : E8 6D F0                   	CALL	CPDEHL			; All simple strings done?
 3915/994A : 74 0C                      	JZ	ARRLP			; Yes - Do string arrays
 3916/994C : 8A 07                      	MOV	AL,[BX]			; Get type of variable
 3917/994E :                            ;	LAHF
 3918/994E : 43                         	INC	BX
 3919/994F :                            ;	SAHF
 3920/994F :                            ;	LAHF
 3921/994F : 43                         	INC	BX
 3922/9950 :                            ;	SAHF
 3923/9950 : 0A C0                      	OR	AL,AL			; "S" flag set if strings done?
 3924/9952 : E8 3F 00                   	CALL	STRADD			; See if string in strig area
 3925/9955 : EB E8                      	JMP	SMPVAR			; Loop until simple ones done
 3926/9957 :                            ;
 3927/9957 :                            GNXARY:
 3928/9957 : 59                         	POP	CX			; Scrap address of this array
 3929/9958 :                            ARRLP:
 3930/9958 : 87 DA                      	XCHG	BX,DX
 3931/995A : 8B 1E 24 09                	MOV	BX,[ARREND]		; End of string arrays
 3932/995E : 87 DA                      	XCHG	BX,DX
 3933/9960 : E8 54 F0                   	CALL	CPDEHL			; All string arrays done?
 3934/9963 : 74 6F                      	JZ	SCNEND			; Yes - Move string if found
 3935/9965 : E8 C5 06                   	CALL	LOADFP			; Get array name to BCDE
 3936/9968 : 8A C2                      	MOV	AL,DL			; Get type of array
 3937/996A : 53                         	PUSH	BX			; Save address of num of dimensions
 3938/996B : 03 D9                      	ADD	BX,CX			; Start of next array
 3939/996D : 0A C0                      	OR	AL,AL			; Test type of array
 3940/996F : 79 E6                      	JNS	GNXARY			; Numeric array - Ignore it
 3941/9971 : 89 1E 0F 09                	MOV	[CUROPR],BX		; Save address of next array
 3942/9975 : 5B                         	POP	BX			; Get address of num of dimensions
 3943/9976 : 8A 0F                      	MOV	CL,[BX]			; BC = Number of dimensions
 3944/9978 : B5 00                      	MOV	CH,0
 3945/997A : 03 D9                      	ADD	BX,CX			; Two bytes per dimension size
 3946/997C : 03 D9                      	ADD	BX,CX
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 67 - 2023/10/14 12時49分15秒


 3947/997E : 9F                         	LAHF
 3948/997F : 43                         	INC	BX			; Plus one for number of dimensions
 3949/9980 : 9E                         	SAHF
 3950/9981 :                            GRBARY:
 3951/9981 : 87 DA                      	XCHG	BX,DX
 3952/9983 : 8B 1E 0F 09                	MOV	BX,[CUROPR]		; Get address of next array
 3953/9987 : 87 DA                      	XCHG	BX,DX
 3954/9989 : E8 2B F0                   	CALL	CPDEHL			; Is this array finished?
 3955/998C : 74 CA                      	JZ	ARRLP			; Yes - Get next one
 3956/998E : B9 81 99                   	MOV	CX,GRBARY		; Loop until array all done
 3957/9991 :                            STPOOL:
 3958/9991 : 51                         	PUSH	CX			; Save return address
 3959/9992 : 0C 80                      	OR	AL,80H			; Flag string type
 3960/9994 :                            STRADD:
 3961/9994 : 8A 07                      	MOV	AL,[BX]			; Get string length
 3962/9996 : 9F                         	LAHF
 3963/9997 : 43                         	INC	BX
 3964/9998 :                            ;	SAHF
 3965/9998 :                            ;	LAHF
 3966/9998 : 43                         	INC	BX
 3967/9999 :                            ;	SAHF
 3968/9999 : 8A 17                      	MOV	DL,[BX]			; Get LSB of string address
 3969/999B :                            ;	LAHF
 3970/999B : 43                         	INC	BX
 3971/999C :                            ;	SAHF
 3972/999C : 8A 37                      	MOV	DH,[BX]			; Get MSB of string address
 3973/999E :                            ;	LAHF
 3974/999E : 43                         	INC	BX
 3975/999F : 9E                         	SAHF
 3976/99A0 : 78 01                      	JS	STRADD1
 3977/99A2 : C3                         	RET				; Not a string - Return
 3978/99A3 :                            STRADD1:
 3979/99A3 : 0A C0                      	OR	AL,AL			; Set flags on string length
 3980/99A5 : 75 01                      	JNZ	STRADD2
 3981/99A7 : C3                         	RET				; Null string - Return
 3982/99A8 :                            STRADD2:
 3983/99A8 : 8B CB                      	MOV	CX,BX			; Save variable pointer
 3984/99AA : 8B 1E 0D 09                	MOV	BX,[STRBOT]		; Bottom of new area
 3985/99AE : E8 06 F0                   	CALL	CPDEHL			; String been done?
 3986/99B1 : 8B D9                      	MOV	BX,CX			; Restore variable pointer
 3987/99B3 : 73 01                      	JNC	STRADD3
 3988/99B5 : C3                         	RET				; String done - Ignore
 3989/99B6 :                            STRADD3:
 3990/99B6 : 5B                         	POP	BX			; Return address
 3991/99B7 : 8B EC                      	MOV	BP,SP
 3992/99B9 : 87 5E 00                   	XCHG	[BP],BX			; Lowest available string area
 3993/99BC : E8 F8 EF                   	CALL	CPDEHL			; String within string area?
 3994/99BF : 8B EC                      	MOV	BP,SP
 3995/99C1 : 87 5E 00                   	XCHG	[BP],BX			; Lowest available string area
 3996/99C4 : 53                         	PUSH	BX			; Re-save return address
 3997/99C5 : 8B D9                      	MOV	BX,CX			; Restore variable pointer
 3998/99C7 : 72 01                      	JC	STRADD4
 3999/99C9 : C3                         	RET				; Outside string area - Ignore
 4000/99CA :                            STRADD4:
 4001/99CA : 59                         	POP	CX			; Get return , Throw 2 away
 4002/99CB : 58                         	POP	AX
 4003/99CC :                            ;	XCHG	AH,AL
 4004/99CC :                            ;	SAHF
 4005/99CC : 58                         	POP	AX
 4006/99CD : 86 E0                      	XCHG	AH,AL
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 68 - 2023/10/14 12時49分15秒


 4007/99CF : 9E                         	SAHF
 4008/99D0 : 53                         	PUSH	BX			; Save variable pointer
 4009/99D1 : 52                         	PUSH	DX			; Save address of current
 4010/99D2 : 51                         	PUSH	CX			; Put back return address
 4011/99D3 : C3                         	RET				; Go to it
 4012/99D4 :                            ;
 4013/99D4 :                            SCNEND:
 4014/99D4 : 5A                         	POP	DX			; Addresses of strings
 4015/99D5 : 5B                         	POP	BX			;
 4016/99D6 : 8A C3                      	MOV	AL,BL			; HL = 0 if no more to do
 4017/99D8 : 0A C7                      	OR	AL,BH
 4018/99DA : 75 01                      	JNZ	SCNEND1
 4019/99DC : C3                         	RET				; No more to do - Return
 4020/99DD :                            SCNEND1:
 4021/99DD : 9F                         	LAHF
 4022/99DE : 4B                         	DEC	BX
 4023/99DF : 9E                         	SAHF
 4024/99E0 : 8A 2F                      	MOV	CH,[BX]			; MSB of address of string
 4025/99E2 : 9F                         	LAHF
 4026/99E3 : 4B                         	DEC	BX
 4027/99E4 : 9E                         	SAHF
 4028/99E5 : 8A 0F                      	MOV	CL,[BX]			; LSB of address of string
 4029/99E7 : 53                         	PUSH	BX			; Save variable address
 4030/99E8 : 9F                         	LAHF
 4031/99E9 : 4B                         	DEC	BX
 4032/99EA : 9E                         	SAHF
 4033/99EB : 9F                         	LAHF
 4034/99EC : 4B                         	DEC	BX
 4035/99ED : 9E                         	SAHF
 4036/99EE : 8A 1F                      	MOV	BL,[BX]			; HL = Length of string
 4037/99F0 : B7 00                      	MOV	BH,0
 4038/99F2 : 03 D9                      	ADD	BX,CX			; Address of end of string
 4039/99F4 : 8A F5                      	MOV	DH,CH			; String address to DE
 4040/99F6 : 8A D1                      	MOV	DL,CL
 4041/99F8 : 9F                         	LAHF
 4042/99F9 : 4B                         	DEC	BX			; Last byte in string
 4043/99FA : 9E                         	SAHF
 4044/99FB : 8B CB                      	MOV	CX,BX			; Address to BC
 4045/99FD : 8B 1E 0D 09                	MOV	BX,[STRBOT]		; Current bottom of string area
 4046/9A01 : E8 C0 EB                   	CALL	MOVSTR			; Move string to new address
 4047/9A04 : 5B                         	POP	BX			; Restore variable address
 4048/9A05 : 88 0F                      	MOV	[BX],CL			; Save new LSB of address
 4049/9A07 : 9F                         	LAHF
 4050/9A08 : 43                         	INC	BX
 4051/9A09 : 9E                         	SAHF
 4052/9A0A : 88 2F                      	MOV	[BX],CH			; Save new MSB of address
 4053/9A0C : 8B D9                      	MOV	BX,CX			; Next string area+1 to HL
 4054/9A0E : 9F                         	LAHF
 4055/9A0F : 4B                         	DEC	BX
 4056/9A10 : 9E                         	SAHF				; Next string area address
 4057/9A11 : E9 07 FF                   	JMP	GARBLP			; Look for more strings
 4058/9A14 :                            ;
 4059/9A14 :                            CONCAT:
 4060/9A14 : 51                         	PUSH	CX			; Save prec' opr & code string
 4061/9A15 : 53                         	PUSH	BX			;
 4062/9A16 : 8B 1E 2E 09                	MOV	BX,[FPREG]		; Get first string
 4063/9A1A : 8B EC                      	MOV	BP,SP
 4064/9A1C : 87 5E 00                   	XCHG	[BP],BX			; Save first string
 4065/9A1F : E8 4C F8                   	CALL	OPRND			; Get second string
 4066/9A22 : 8B EC                      	MOV	BP,SP
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 69 - 2023/10/14 12時49分15秒


 4067/9A24 : 87 5E 00                   	XCHG	[BP],BX			; Restore first string
 4068/9A27 : E8 89 F7                   	CALL	TSTSTR			; Make sure it's a string
 4069/9A2A : 8A 07                      	MOV	AL,[BX]			; Get length of second string
 4070/9A2C : 53                         	PUSH	BX			; Save first string
 4071/9A2D : 8B 1E 2E 09                	MOV	BX,[FPREG]		; Get second string
 4072/9A31 : 53                         	PUSH	BX			; Save second string
 4073/9A32 : 02 07                      	ADD	AL,[BX]			; Add length of second string
 4074/9A34 : B2 1C                      	MOV	DL,LS			; ?LS Error
 4075/9A36 : 73 03                      	JNC	CONCAT1			; String too long - Error
 4076/9A38 : E9 EA EB                   	JMP	ERROR
 4077/9A3B :                            CONCAT1:
 4078/9A3B : E8 F6 FD                   	CALL	MKTMST			; Make temporary string
 4079/9A3E : 5A                         	POP	DX			; Get second string to DE
 4080/9A3F : E8 52 00                   	CALL	GSTRDE			; Move to string pool if needed
 4081/9A42 : 8B EC                      	MOV	BP,SP
 4082/9A44 : 87 5E 00                   	XCHG	[BP],BX			; Get first string
 4083/9A47 : E8 48 00                   	CALL	GSTRHL			; Move to string pool if needed
 4084/9A4A : 53                         	PUSH	BX			; Save first string
 4085/9A4B : 8B 1E 0B 09                	MOV	BX,[TMPSTR+2]		; Temporary string address
 4086/9A4F : 87 DA                      	XCHG	BX,DX			; To DE
 4087/9A51 : E8 0F 00                   	CALL	SSTSA			; First string to string area
 4088/9A54 : E8 0C 00                   	CALL	SSTSA			; Second string to strig area
 4089/9A57 : BB D3 91                   	MOV	BX,EVAL2		; Return to evaluation loop
 4090/9A5A : 8B EC                      	MOV	BP,SP
 4091/9A5C : 87 5E 00                   	XCHG	[BP],BX			; Save return,get code string
 4092/9A5F : 53                         	PUSH	BX			; Save code string address
 4093/9A60 : E9 1C FE                   	JMP	TSTOPL			; To temporary string to pool
 4094/9A63 :                            ;
 4095/9A63 :                            SSTSA:
 4096/9A63 : 5B                         	POP	BX			; Return address
 4097/9A64 : 8B EC                      	MOV	BP,SP
 4098/9A66 : 87 5E 00                   	XCHG	[BP],BX			; Get string block,save return
 4099/9A69 : 8A 07                      	MOV	AL,[BX]			; Get length of string
 4100/9A6B :                            ;	LAHF
 4101/9A6B : 43                         	INC	BX
 4102/9A6C :                            ;	SAHF
 4103/9A6C :                            ;	LAHF
 4104/9A6C : 43                         	INC	BX
 4105/9A6D :                            ;	SAHF
 4106/9A6D : 8A 0F                      	MOV	CL,[BX]			; Get LSB of string address
 4107/9A6F :                            ;	LAHF
 4108/9A6F : 43                         	INC	BX
 4109/9A70 :                            ;	SAHF
 4110/9A70 : 8A 2F                      	MOV	CH,[BX]			; Get MSB of string address
 4111/9A72 : 8A D8                      	MOV	BL,AL			; Length to L
 4112/9A74 :                            TOSTRA:
 4113/9A74 : FE C3                      	INC	BL			; INC - DECed after
 4114/9A76 :                            TSALP:
 4115/9A76 : FE CB                      	DEC	BL			; Count bytes moved
 4116/9A78 : 75 01                      	JNZ	TSALP1
 4117/9A7A : C3                         	RET				; End of string - Return
 4118/9A7B :                            TSALP1:
 4119/9A7B : 87 D9                      	XCHG	BX,CX
 4120/9A7D : 8A 07                      	MOV	AL,[BX]
 4121/9A7F : 87 D9                      	XCHG	BX,CX			; Get source
 4122/9A81 : 87 DA                      	XCHG	BX,DX
 4123/9A83 : 88 07                      	MOV	[BX],AL
 4124/9A85 : 87 DA                      	XCHG	BX,DX			; Save destination
 4125/9A87 :                            ;	LAHF
 4126/9A87 : 41                         	INC	CX			; Next source
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 70 - 2023/10/14 12時49分15秒


 4127/9A88 :                            ;	SAHF
 4128/9A88 :                            ;	LAHF
 4129/9A88 : 42                         	INC	DX			; Next destination
 4130/9A89 :                            ;	SAHF
 4131/9A89 : EB EB                      	JMP	TSALP			; Loop until string moved
 4132/9A8B :                            ;
 4133/9A8B :                            GETSTR:
 4134/9A8B : E8 25 F7                   	CALL	TSTSTR			; Make sure it's a strig
 4135/9A8E :                            GSTRCU:
 4136/9A8E : 8B 1E 2E 09                	MOV	BX,[FPREG]		; Get current string
 4137/9A92 :                            GSTRHL:
 4138/9A92 : 87 DA                      	XCHG	BX,DX			; Save DE
 4139/9A94 :                            GSTRDE:
 4140/9A94 : E8 20 00                   	CALL	BAKTMP			; Was it last tmp-str?
 4141/9A97 : 87 DA                      	XCHG	BX,DX			; Restore DE
 4142/9A99 : 74 01                      	JZ	GSTRDE1
 4143/9A9B : C3                         	RET				; No - Return
 4144/9A9C :                            GSTRDE1:
 4145/9A9C : 52                         	PUSH	DX			; Save string
 4146/9A9D : 8A F5                      	MOV	DH,CH			; String block address to DE
 4147/9A9F : 8A D1                      	MOV	DL,CL
 4148/9AA1 :                            ;	LAHF
 4149/9AA1 : 4A                         	DEC	DX			; Point to length
 4150/9AA2 :                            ;	SAHF
 4151/9AA2 : 8A 0F                      	MOV	CL,[BX]			; Get string length
 4152/9AA4 : 8B 1E 0D 09                	MOV	BX,[STRBOT]		; Current bottom of string area
 4153/9AA8 : E8 0C EF                   	CALL	CPDEHL			; Last one in string area?
 4154/9AAB : 75 08                      	JNZ	POPHL			; No - Return
 4155/9AAD : 8A E8                      	MOV	CH,AL			; Clear B (A=0)
 4156/9AAF : 03 D9                      	ADD	BX,CX			; Remove string from string area
 4157/9AB1 : 89 1E 0D 09                	MOV	[STRBOT],BX		; Save new bottom of string area
 4158/9AB5 :                            POPHL:
 4159/9AB5 : 5B                         	POP	BX			; Restore string
 4160/9AB6 : C3                         	RET
 4161/9AB7 :                            ;
 4162/9AB7 :                            BAKTMP:
 4163/9AB7 : 8B 1E FB 08                	MOV	BX,[TMSTPT]		; Get temporary string pool top
 4164/9ABB :                            ;	LAHF
 4165/9ABB : 4B                         	DEC	BX			; Back
 4166/9ABC :                            ;	SAHF
 4167/9ABC : 8A 2F                      	MOV	CH,[BX]			; Get MSB of address
 4168/9ABE :                            ;	LAHF
 4169/9ABE : 4B                         	DEC	BX			; Back
 4170/9ABF :                            ;	SAHF
 4171/9ABF : 8A 0F                      	MOV	CL,[BX]			; Get LSB of address
 4172/9AC1 :                            ;	LAHF
 4173/9AC1 : 4B                         	DEC	BX			; Back
 4174/9AC2 :                            ;	SAHF
 4175/9AC2 :                            ;	LAHF
 4176/9AC2 : 4B                         	DEC	BX			; Back
 4177/9AC3 :                            ;	SAHF
 4178/9AC3 : E8 F1 EE                   	CALL	CPDEHL			; String last in string pool?
 4179/9AC6 : 74 01                      	JZ	BAKTMP1
 4180/9AC8 : C3                         	RET				; Yes - Leave it
 4181/9AC9 :                            BAKTMP1:
 4182/9AC9 : 89 1E FB 08                	MOV	[TMSTPT],BX		; Save new string pool top
 4183/9ACD : C3                         	RET
 4184/9ACE :                            ;
 4185/9ACE :                            LEN:
 4186/9ACE : B9 33 97                   	MOV	CX,PASSA		; To return integer A
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 71 - 2023/10/14 12時49分15秒


 4187/9AD1 : 51                         	PUSH	CX			; Save address
 4188/9AD2 :                            GETLEN:
 4189/9AD2 : E8 B6 FF                   	CALL	GETSTR			; Get string and its length
 4190/9AD5 : 32 C0                      	XOR	AL,AL
 4191/9AD7 : 8A F0                      	MOV	DH,AL			; Clear D
 4192/9AD9 : A2 F7 08                   	MOV	[TYPE],AL		; Set type to numeric
 4193/9ADC : 8A 07                      	MOV	AL,[BX]			; Get length of string
 4194/9ADE : 0A C0                      	OR	AL,AL			; Set status flags
 4195/9AE0 : C3                         	RET
 4196/9AE1 :                            ;
 4197/9AE1 :                            ASC:
 4198/9AE1 : B9 33 97                   	MOV	CX,PASSA		; To return integer A
 4199/9AE4 : 51                         	PUSH	CX			; Save address
 4200/9AE5 :                            GTFLNM:
 4201/9AE5 : E8 EA FF                   	CALL	GETLEN			; Get length of string
 4202/9AE8 : 75 03                      	JNZ	GTFLNM1			; Null string - Error
 4203/9AEA : E9 FE F1                   	JMP	FCERR
 4204/9AED :                            GTFLNM1:
 4205/9AED :                            ;	LAHF
 4206/9AED : 43                         	INC	BX
 4207/9AEE :                            ;	SAHF
 4208/9AEE :                            ;	LAHF
 4209/9AEE : 43                         	INC	BX
 4210/9AEF :                            ;	SAHF
 4211/9AEF : 8A 17                      	MOV	DL,[BX]			; Get LSB of address
 4212/9AF1 :                            ;	LAHF
 4213/9AF1 : 43                         	INC	BX
 4214/9AF2 :                            ;	SAHF
 4215/9AF2 : 8A 37                      	MOV	DH,[BX]			; Get MSB of address
 4216/9AF4 : 87 DA                      	XCHG	BX,DX
 4217/9AF6 : 8A 07                      	MOV	AL,[BX]
 4218/9AF8 : 87 DA                      	XCHG	BX,DX			; Get first byte of string
 4219/9AFA : C3                         	RET
 4220/9AFB :                            ;
 4221/9AFB :                            CHR:
 4222/9AFB : B0 01                      	MOV	AL,1			; One character string
 4223/9AFD : E8 34 FD                   	CALL	MKTMST			; Make a temporary string
 4224/9B00 : E8 30 01                   	CALL	MAKINT			; Make it integer A
 4225/9B03 : 8B 1E 0B 09                	MOV	BX,[TMPSTR+2]		; Get address of string
 4226/9B07 : 88 17                      	MOV	[BX],DL			; Save character
 4227/9B09 :                            TOPOOL:
 4228/9B09 : 59                         	POP	CX			; Clean up stack
 4229/9B0A : E9 72 FD                   	JMP	TSTOPL			; Temporary string to pool
 4230/9B0D :                            ;
 4231/9B0D :                            LEFT:
 4232/9B0D : E8 CD 00                   	CALL	LFRGNM			; Get number and ending ")"
 4233/9B10 : 32 C0                      	XOR	AL,AL			; Start at first byte in string
 4234/9B12 :                            RIGHT1:
 4235/9B12 : 8B EC                      	MOV	BP,SP
 4236/9B14 : 87 5E 00                   	XCHG	[BP],BX			; Save code string,Get string
 4237/9B17 : 8A C8                      	MOV	CL,AL			; Starting position in string
 4238/9B19 :                            MID1:
 4239/9B19 : 53                         	PUSH	BX			; Save string block address
 4240/9B1A : 8A 07                      	MOV	AL,[BX]			; Get length of string
 4241/9B1C : 3A C5                      	CMP	AL,CH			; Compare with number given
 4242/9B1E : 72 04                      	JC	ALLFOL			; All following bytes required
 4243/9B20 : 8A C5                      	MOV	AL,CH			; Get new length
 4244/9B22 : EB 02                      	JMP	ALLFOL1			; Skip "LD C,0"
 4245/9B24 :                            ALLFOL:
 4246/9B24 : B1 00                      	MOV	CL,0			; First byte of string
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 72 - 2023/10/14 12時49分15秒


 4247/9B26 :                            ALLFOL1:
 4248/9B26 : 51                         	PUSH	CX			; Save position in string
 4249/9B27 : E8 A2 FD                   	CALL	TESTR			; See if enough string space
 4250/9B2A : 59                         	POP	CX			; Get position in string
 4251/9B2B : 5B                         	POP	BX			; Restore string block address
 4252/9B2C : 53                         	PUSH	BX			; And re-save it
 4253/9B2D :                            ;	LAHF
 4254/9B2D : 43                         	INC	BX
 4255/9B2E :                            ;	SAHF
 4256/9B2E :                            ;	LAHF
 4257/9B2E : 43                         	INC	BX
 4258/9B2F :                            ;	SAHF
 4259/9B2F : 8A 2F                      	MOV	CH,[BX]			; Get LSB of address
 4260/9B31 :                            ;	LAHF
 4261/9B31 : 43                         	INC	BX
 4262/9B32 :                            ;	SAHF
 4263/9B32 : 8A 3F                      	MOV	BH,[BX]			; Get MSB of address
 4264/9B34 : 8A DD                      	MOV	BL,CH			; HL = address of string
 4265/9B36 : B5 00                      	MOV	CH,0			; BC = starting address
 4266/9B38 : 03 D9                      	ADD	BX,CX			; Point to that byte
 4267/9B3A : 8B CB                      	MOV	CX,BX			; BC = source string
 4268/9B3C : E8 F8 FC                   	CALL	CRTMST			; Create a string entry
 4269/9B3F : 8A D8                      	MOV	BL,AL			; Length of new string
 4270/9B41 : E8 30 FF                   	CALL	TOSTRA			; Move string to string
 4271/9B44 : 5A                         	POP	DX			; Clear stack
 4272/9B45 : E8 4C FF                   	CALL	GSTRDE			; Move to string pool if needed
 4273/9B48 : E9 34 FD                   	JMP	TSTOPL			; Temporary string to pool
 4274/9B4B :                            ;
 4275/9B4B :                            RIGHT:
 4276/9B4B : E8 8F 00                   	CALL	LFRGNM			; Get number and ending ")"
 4277/9B4E : 5A                         	POP	DX			; Get string length
 4278/9B4F : 52                         	PUSH	DX			; And re-save
 4279/9B50 : 87 DA                      	XCHG	BX,DX
 4280/9B52 : 8A 07                      	MOV	AL,[BX]
 4281/9B54 : 87 DA                      	XCHG	BX,DX			; Get length
 4282/9B56 : 2A C5                      	SUB	AL,CH			; Move back N bytes
 4283/9B58 : EB B8                      	JMP	RIGHT1			; Go and get sub-string
 4284/9B5A :                            ;
 4285/9B5A :                            MID:
 4286/9B5A : 87 DA                      	XCHG	BX,DX			; Get code string addre
 4287/9B5C : 8A 07                      	MOV	AL,[BX]			; Get next byte ',' or ")"
 4288/9B5E : E8 82 00                   	CALL	MIDNUM			; Get number supplied
 4289/9B61 : FE C5                      	INC	CH			; Is it character zero?
 4290/9B63 : FE CD                      	DEC	CH
 4291/9B65 : 75 03                      	JNZ	MID2			; Yes - Error
 4292/9B67 : E9 81 F1                   	JMP	FCERR
 4293/9B6A :                            MID2:
 4294/9B6A : 51                         	PUSH	CX			; Save starting position
 4295/9B6B : B2 FF                      	MOV	DL,255				; All of string
 4296/9B6D : 3C 29                      	CMP	AL,')'			; Any length given?
 4297/9B6F : 74 07                      	JZ	RSTSTR			; No - Rest of string
 4298/9B71 : E8 4F EE                   	CALL	CHKSYN			; Make sure ',' follows
 4299/9B74 : 2C                         	DB	','
 4300/9B75 : E8 B8 00                   	CALL	GETINT			; Get integer 0-255
 4301/9B78 :                            RSTSTR:
 4302/9B78 : E8 48 EE                   	CALL	CHKSYN			; Make sure ")" follows
 4303/9B7B : 29                         	DB	")"
 4304/9B7C : 58                         	POP	AX			; Restore starting posion
 4305/9B7D : 86 E0                      	XCHG	AH,AL
 4306/9B7F :                            ;	SAHF
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 73 - 2023/10/14 12時49分15秒


 4307/9B7F : 8B EC                      	MOV	BP,SP
 4308/9B81 : 87 5E 00                   	XCHG	[BP],BX			; Get string,8ave code string
 4309/9B84 : B9 19 9B                   	MOV	CX,MID1			; Continuation of MID$ routine
 4310/9B87 : 51                         	PUSH	CX			; Save for return
 4311/9B88 : FE C8                      	DEC	AL			; Starting position-1
 4312/9B8A : 3A 07                      	CMP	AL,[BX]			; Compare with length
 4313/9B8C : B5 00                      	MOV	CH,0			; Zero bytes length
 4314/9B8E : 72 01                      	JC	RSTSTR1
 4315/9B90 : C3                         	RET				; Null string if start past end
 4316/9B91 :                            RSTSTR1:
 4317/9B91 : 8A C8                      	MOV	CL,AL			; Save starting position -1
 4318/9B93 : 8A 07                      	MOV	AL,[BX]			; Get length of string
 4319/9B95 : 2A C1                      	SUB	AL,CL			; Subtract start
 4320/9B97 : 3A C2                      	CMP	AL,DL			; Enough string for it?
 4321/9B99 : 8A E8                      	MOV	CH,AL			; Save maximum length available
 4322/9B9B : 73 01                      	JNC	RSTSTR2
 4323/9B9D : C3                         	RET				; Truncate string if needed
 4324/9B9E :                            RSTSTR2:
 4325/9B9E : 8A EA                      	MOV	CH,DL			; Set specified length
 4326/9BA0 : C3                         	RET				; Go and create string
 4327/9BA1 :                            ;
 4328/9BA1 :                            VAL:
 4329/9BA1 : E8 2E FF                   	CALL	GETLEN			; Get length of string
 4330/9BA4 : 75 03                      	JNZ	VAL0
 4331/9BA6 : E9 6E 01                   	JMP	RESZER			; Result zero
 4332/9BA9 :                            VAL0:
 4333/9BA9 : 8A D0                      	MOV	DL,AL			; Save length
 4334/9BAB :                            ;	LAHF
 4335/9BAB : 43                         	INC	BX
 4336/9BAC :                            ;	SAHF
 4337/9BAC :                            ;	LAHF
 4338/9BAC : 43                         	INC	BX
 4339/9BAD :                            ;	SAHF
 4340/9BAD : 8A 07                      	MOV	AL,[BX]			; Get LSB of address
 4341/9BAF :                            ;	LAHF
 4342/9BAF : 43                         	INC	BX
 4343/9BB0 :                            ;	SAHF
 4344/9BB0 : 8A 3F                      	MOV	BH,[BX]			; Get MSB of address
 4345/9BB2 : 8A D8                      	MOV	BL,AL			; HL = String address
 4346/9BB4 : 53                         	PUSH	BX			; Save string address
 4347/9BB5 : 03 DA                      	ADD	BX,DX
 4348/9BB7 : 8A 2F                      	MOV	CH,[BX]			; Get end of string+1 byte
 4349/9BB9 : 88 37                      	MOV	[BX],DH			; Zero it to terminate
 4350/9BBB : 8B EC                      	MOV	BP,SP
 4351/9BBD : 87 5E 00                   	XCHG	[BP],BX			; Save string end,get start
 4352/9BC0 : 51                         	PUSH	CX			; Save end+1 byte
 4353/9BC1 : 8A 07                      	MOV	AL,[BX]			; Get starting byte
 4354/9BC3 : 3C 24                      	CMP	AL,'$'			; Hex number indicated?
 4355/9BC5 : 75 05                      	JNZ	VAL1
 4356/9BC7 : E8 E7 0A                   	CALL	HEXTFP			; Convert Hex to FPREG
 4357/9BCA : EB 0C                      	JMP	VAL3
 4358/9BCC :                            VAL1:
 4359/9BCC : 3C 25                      	CMP	AL,'%'			; Binary number indicated?
 4360/9BCE : 75 05                      	JNZ	VAL2
 4361/9BD0 : E8 62 0B                   	CALL	BINTFP			; Convert Bin to FPREG
 4362/9BD3 : EB 03                      	JMP	VAL3
 4363/9BD5 :                            VAL2:
 4364/9BD5 : E8 83 05                   	CALL	ASCTFP			; Convert ASCII string to FP
 4365/9BD8 :                            VAL3:
 4366/9BD8 : 59                         	POP	CX			; Restore end+1 byte
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 74 - 2023/10/14 12時49分15秒


 4367/9BD9 : 5B                         	POP	BX			; Restore end+1 address
 4368/9BDA : 88 2F                      	MOV	[BX],CH			; Put back original byte
 4369/9BDC : C3                         	RET
 4370/9BDD :                            ;
 4371/9BDD :                            LFRGNM:
 4372/9BDD : 87 DA                      	XCHG	BX,DX			; Code string address to HL
 4373/9BDF : E8 E1 ED                   	CALL	CHKSYN			; Make sure ")" follows
 4374/9BE2 : 29                         	DB	")"
 4375/9BE3 :                            MIDNUM:
 4376/9BE3 : 59                         	POP	CX			; Get return address
 4377/9BE4 : 5A                         	POP	DX			; Get number supplied
 4378/9BE5 : 51                         	PUSH	CX			; Re-save return address
 4379/9BE6 : 8A EA                      	MOV	CH,DL			; Number to B
 4380/9BE8 : C3                         	RET
 4381/9BE9 :                            ;
 4382/9BE9 :                            INP:
 4383/9BE9 : E8 47 00                   	CALL	MAKINT			; Make it integer A
 4384/9BEC : A2 89 08                   	MOV	[INPORT],AL		; Set input port
 4385/9BEF : E8 96 6C                   	CALL	INPSUB			; Get input from port
 4386/9BF2 : E9 3E FB                   	JMP	PASSA			; Return integer A
 4387/9BF5 :                            ;
 4388/9BF5 :                            POUT:
 4389/9BF5 : E8 26 00                   	CALL	SETIO			; Set up port number
 4390/9BF8 : E9 50 6C                   	JMP	OUTSUB			; Output data and return
 4391/9BFB :                            ;
 4392/9BFB :                            WAIT:
 4393/9BFB : E8 20 00                   	CALL	SETIO			; Set up port number
 4394/9BFE : 9F                         	LAHF
 4395/9BFF : 86 E0                      	XCHG	AH,AL
 4396/9C01 : 50                         	PUSH	AX			; Save AND mask
 4397/9C02 : 86 E0                      	XCHG	AH,AL
 4398/9C04 : B2 00                      	MOV	DL,0			; Assume zero if none given
 4399/9C06 :                            ;	LAHF
 4400/9C06 : 4B                         	DEC	BX			; DEC 'cos GETCHR INCs
 4401/9C07 :                            ;	SAHF
 4402/9C07 : E8 D2 EF                   	CALL	GETCHR			; Get next character
 4403/9C0A : 74 07                      	JZ	NOXOR			; No XOR byte given
 4404/9C0C : E8 B4 ED                   	CALL	CHKSYN			; Make sure ',' follows
 4405/9C0F : 2C                         	DB	','
 4406/9C10 : E8 1D 00                   	CALL	GETINT			; Get integer 0-255 to XOR with
 4407/9C13 :                            NOXOR:
 4408/9C13 : 59                         	POP	CX			; Restore AND mask
 4409/9C14 :                            WAITLP:
 4410/9C14 : E8 71 6C                   	CALL	INPSUB			; Get input
 4411/9C17 : 32 C2                      	XOR	AL,DL			; Flip selected bits
 4412/9C19 : 22 C5                      	AND	AL,CH			; Result non-zero?
 4413/9C1B : 74 F7                      	JZ	WAITLP			; No = keep waiting
 4414/9C1D : C3                         	RET
 4415/9C1E :                            ;
 4416/9C1E :                            SETIO:
 4417/9C1E : E8 0F 00                   	CALL	GETINT			; Get integer 0-255
 4418/9C21 : A2 89 08                   	MOV	[INPORT],AL		; Set input port
 4419/9C24 : A2 4C 08                   	MOV	[OTPORT],AL		; Set output port
 4420/9C27 : E8 99 ED                   	CALL	CHKSYN			; Make sure ',' follows
 4421/9C2A : 2C                         	DB	','
 4422/9C2B : EB 03                      	JMP	GETINT			; Get integer 0-255 and return
 4423/9C2D :                            ;
 4424/9C2D :                            FNDNUM:
 4425/9C2D : E8 AC EF                   	CALL	GETCHR			; Get next character
 4426/9C30 :                            GETINT:
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 75 - 2023/10/14 12時49分15秒


 4427/9C30 : E8 79 F5                   	CALL	GETNUM			; Get a number from 0 to 255
 4428/9C33 :                            MAKINT:
 4429/9C33 : E8 96 F0                   	CALL	DEPINT			; Make sure value 0 - 255
 4430/9C36 : 8A C6                      	MOV	AL,DH			; Get MSB of number
 4431/9C38 : 0A C0                      	OR	AL,AL			; Zero?
 4432/9C3A : 74 03                      	JZ	MAKINT1			; No - Error
 4433/9C3C : E9 AC F0                   	JMP	FCERR
 4434/9C3F :                            MAKINT1:
 4435/9C3F :                            ;	LAHF
 4436/9C3F : 4B                         	DEC	BX			; DEC 'cos GETCHR INCs
 4437/9C40 :                            ;	SAHF
 4438/9C40 : E8 99 EF                   	CALL	GETCHR			; Get next character
 4439/9C43 : 8A C2                      	MOV	AL,DL			; Get number to A
 4440/9C45 : C3                         	RET
 4441/9C46 :                            ;
 4442/9C46 :                            PEEK:
 4443/9C46 : E8 88 F0                   	CALL	DEINT			; Get memory address
 4444/9C49 : 87 DA                      	XCHG	BX,DX
 4445/9C4B : 8A 07                      	MOV	AL,[BX]			; Get byte in memory
 4446/9C4D : 87 DA                      	XCHG	BX,DX
 4447/9C4F : E9 E1 FA                   	JMP	PASSA			; Return integer A
 4448/9C52 :                            ;
 4449/9C52 :                            POKE:
 4450/9C52 : E8 57 F5                   	CALL	GETNUM			; Get memory address
 4451/9C55 : E8 79 F0                   	CALL	DEINT			; Get integer -32768 to 32767
 4452/9C58 : 52                         	PUSH	DX			; Save memory address
 4453/9C59 : E8 67 ED                   	CALL	CHKSYN			; Make sure ',' follows
 4454/9C5C : 2C                         	DB	','
 4455/9C5D : E8 D0 FF                   	CALL	GETINT			; Get integer 0-255
 4456/9C60 : 5A                         	POP	DX			; Restore memory address
 4457/9C61 : 87 DA                      	XCHG	BX,DX
 4458/9C63 : 88 07                      	MOV	[BX],AL
 4459/9C65 : 87 DA                      	XCHG	BX,DX			; Load it into memory
 4460/9C67 : C3                         	RET
 4461/9C68 :                            ;
 4462/9C68 :                            ROUND:
 4463/9C68 : BB 66 A3                   	MOV	BX,HALF			; Add 0.5 to FPREG
 4464/9C6B :                            ADDPHL:
 4465/9C6B : E8 BF 03                   	CALL	LOADFP			; Load FP at (HL) to BCDE
 4466/9C6E : EB 0A                      	JMP	FPADD			; Add BCDE to FPREG
 4467/9C70 :                            ;
 4468/9C70 :                            SUBPHL:
 4469/9C70 : E8 BA 03                   	CALL	LOADFP			; FPREG = -FPREG + number at HL
 4470/9C73 : EB 02                      	JMP	SUBCDE			; Skip "POP CX" and "POP DX"
 4471/9C75 :                            PSUB:
 4472/9C75 : 59                         	POP	CX			; Get FP number from stack
 4473/9C76 : 5A                         	POP	DX
 4474/9C77 :                            SUBCDE:
 4475/9C77 : E8 7B 03                   	CALL	INVSGN			; Negate FPREG
 4476/9C7A :                            FPADD:
 4477/9C7A : 8A C5                      	MOV	AL,CH			; Get FP exponent
 4478/9C7C : 0A C0                      	OR	AL,AL			; Is number zero?
 4479/9C7E : 75 01                      	JNZ	FPADD1
 4480/9C80 : C3                         	RET				; Yes - Nothing to add
 4481/9C81 :                            FPADD1:
 4482/9C81 : A0 31 09                   	MOV	AL,[FPEXP]		; Get FPREG exponent
 4483/9C84 : 0A C0                      	OR	AL,AL           	; Is this number zero?
 4484/9C86 : 75 03                      	JNZ	FPADD2			; Yes - Move BCDE to FPREQ
 4485/9C88 : E9 90 03                   	JMP	FPBCDE
 4486/9C8B :                            FPADD2:
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 76 - 2023/10/14 12時49分15秒


 4487/9C8B : 2A C5                      	SUB	AL,CH			; BCDE number larger?
 4488/9C8D : 73 10                      	JNC	NOSWAP			; No - Don't swap them
 4489/9C8F : F6 D0                      	NOT	AL			; Two's complement
 4490/9C91 : FE C0                      	INC	AL			; FP exponent
 4491/9C93 : 87 DA                      	XCHG	BX,DX
 4492/9C95 : E8 67 03                   	CALL	STAKFP			; Put FPREG on stack
 4493/9C98 : 87 DA                      	XCHG	BX,DX
 4494/9C9A : E8 7E 03                   	CALL	FPBCDE			; Move BCDE to FPREG
 4495/9C9D : 59                         	POP	CX			; Restore number from stack
 4496/9C9E : 5A                         	POP	DX
 4497/9C9F :                            NOSWAP:
 4498/9C9F : 3C 19                      	CMP	AL,24+1			; Second number insignificant?
 4499/9CA1 : 72 01                      	JC	NOSWAP1
 4500/9CA3 : C3                         	RET				; Yes - First number is result
 4501/9CA4 :                            NOSWAP1:
 4502/9CA4 : 9F                         	LAHF
 4503/9CA5 : 86 E0                      	XCHG	AH,AL
 4504/9CA7 : 50                         	PUSH	AX			; Save number of bits to scale
 4505/9CA8 : 86 E0                      	XCHG	AH,AL
 4506/9CAA : E8 A5 03                   	CALL	SIGNS			; Set MSBs & sign of result
 4507/9CAD : 8A F8                      	MOV	BH,AL			; Save sign of result
 4508/9CAF : 58                         	POP	AX			; Restore scaling factor
 4509/9CB0 : 86 E0                      	XCHG	AH,AL
 4510/9CB2 : 9E                         	SAHF
 4511/9CB3 : E8 01 01                   	CALL	SCALE			; Scale BCDE to same exponent
 4512/9CB6 : 0A C7                      	OR	AL,BH			; Result to be positive?
 4513/9CB8 : BB 2E 09                   	MOV	BX,FPREG		; Point to FPREG
 4514/9CBB : 79 19                      	JNS	MINCDE			; No - Subtract FPREG from CDE
 4515/9CBD : E8 BA 00                   	CALL	PLUCDE			; Add FPREG to CDE
 4516/9CC0 : 72 03                      	JC	NOSWAP2			; No overflow - Round it up
 4517/9CC2 : E9 80 00                   	JMP	RONDUP
 4518/9CC5 :                            NOSWAP2:
 4519/9CC5 : 9F                         	LAHF
 4520/9CC6 : 43                         	INC	BX			; Point to exponent
 4521/9CC7 : 9E                         	SAHF
 4522/9CC8 : FE 07                      	INC	BYTE PTR [BX]		; Increment it
 4523/9CCA : 75 03                      	JNZ	NOSWAP3			; Number overflowed - Error
 4524/9CCC : E9 50 E9                   	JMP	OVERR
 4525/9CCF :                            NOSWAP3:
 4526/9CCF : B3 01                      	MOV	BL,1			; 1 bit to shift right
 4527/9CD1 : E8 00 01                   	CALL	SHRT1			; Shift result right
 4528/9CD4 : EB 6F                      	JMP	RONDUP			; Round it up
 4529/9CD6 :                            ;
 4530/9CD6 :                            MINCDE:
 4531/9CD6 : 32 C0                      	XOR	AL,AL			; Clear A and carry
 4532/9CD8 : 2A C5                      	SUB	AL,CH			; Negate exponent
 4533/9CDA : 8A E8                      	MOV	CH,AL			; Re-save exponent
 4534/9CDC : 8A 07                      	MOV	AL,[BX]			; Get LSB of FPREG
 4535/9CDE : 1A C2                      	SBB	AL,DL			; Subtract LSB of BCDE
 4536/9CE0 : 8A D0                      	MOV	DL,AL			; Save LSB of BCDE
 4537/9CE2 : 9F                         	LAHF
 4538/9CE3 : 43                         	INC	BX
 4539/9CE4 : 9E                         	SAHF
 4540/9CE5 : 8A 07                      	MOV	AL,[BX]			; Get NMSB of FPREG
 4541/9CE7 : 1A C6                      	SBB	AL,DH			; Subtract NMSB of BCDE
 4542/9CE9 : 8A F0                      	MOV	DH,AL			; Save NMSB of BCDE
 4543/9CEB : 9F                         	LAHF
 4544/9CEC : 43                         	INC	BX
 4545/9CED : 9E                         	SAHF
 4546/9CEE : 8A 07                      	MOV	AL,[BX]			; Get MSB of FPREG
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 77 - 2023/10/14 12時49分15秒


 4547/9CF0 : 1A C1                      	SBB	AL,CL			; Subtract MSB of BCDE
 4548/9CF2 : 8A C8                      	MOV	CL,AL			; Save MSB of BCDE
 4549/9CF4 :                            CONPOS:
 4550/9CF4 : 73 03                      	JNC	BNORM
 4551/9CF6 : E8 9A 00                   	CALL	COMPL			; Overflow - Make it positive
 4552/9CF9 :                            ;
 4553/9CF9 :                            BNORM:
 4554/9CF9 : 8A DD                      	MOV	BL,CH			; L = Exponent
 4555/9CFB : 8A FA                      	MOV	BH,DL			; H = LSB
 4556/9CFD : 32 C0                      	XOR	AL,AL
 4557/9CFF :                            BNRMLP:
 4558/9CFF : 8A E8                      	MOV	CH,AL			; Save bit count
 4559/9D01 : 8A C1                      	MOV	AL,CL			; Get MSB
 4560/9D03 : 0A C0                      	OR	AL,AL			; Is it zero?
 4561/9D05 : 75 26                      	JNZ	PNORM			; No - Do it bit at a time
 4562/9D07 : 8A CE                      	MOV	CL,DH			; MSB = NMSB
 4563/9D09 : 8A F7                      	MOV	DH,BH			; NMSB= LSB
 4564/9D0B : 8A FB                      	MOV	BH,BL			; LSB = VLSB
 4565/9D0D : 8A D8                      	MOV	BL,AL			; VLSB= 0
 4566/9D0F : 8A C5                      	MOV	AL,CH			; Get exponent
 4567/9D11 : 2C 08                      	SUB	AL,8			; Count 8 bits
 4568/9D13 : 3C E0                      	CMP	AL,-24-8		; Was number zero?
 4569/9D15 : 75 E8                      	JNZ	BNRMLP			; No - Keep normalising
 4570/9D17 :                            RESZER:
 4571/9D17 : 32 C0                      	XOR	AL,AL			; Result is zero
 4572/9D19 :                            SAVEXP:
 4573/9D19 : A2 31 09                   	MOV	[FPEXP],AL		; Save result as zero
 4574/9D1C : C3                         	RET
 4575/9D1D :                            ;
 4576/9D1D :                            NORMAL:
 4577/9D1D : FE CD                      	DEC	CH			; Count bits
 4578/9D1F : 03 DB                      	ADD	BX,BX			; Shift HL left
 4579/9D21 : 8A C6                      	MOV	AL,DH			; Get NMSB
 4580/9D23 : D0 D0                      	RCL	AL,1			; Shift left with last bit
 4581/9D25 : 8A F0                      	MOV	DH,AL			; Save NMSB
 4582/9D27 : 8A C1                      	MOV	AL,CL			; Get MSB
 4583/9D29 : 12 C0                      	ADC	AL,AL			; Shift left with last bit
 4584/9D2B : 8A C8                      	MOV	CL,AL			; Save MSB
 4585/9D2D :                            PNORM:
 4586/9D2D : 79 EE                      	JNS	NORMAL			; Not done - Keep going
 4587/9D2F : 8A C5                      	MOV	AL,CH			; Number of bits shifted
 4588/9D31 : 8A D7                      	MOV	DL,BH			; Save HL in EB
 4589/9D33 : 8A EB                      	MOV	CH,BL
 4590/9D35 : 0A C0                      	OR	AL,AL			; Any shifting done?
 4591/9D37 : 74 0C                      	JZ	RONDUP			; No - Round it up
 4592/9D39 : BB 31 09                   	MOV	BX,FPEXP		; Point to exponent
 4593/9D3C : 02 07                      	ADD	AL,[BX]			; Add shifted bits
 4594/9D3E : 88 07                      	MOV	[BX],AL			; Re-save exponent
 4595/9D40 : 73 D5                      	JNC	RESZER			; Underflow - Result is zero
 4596/9D42 : 75 01                      	JNZ	RONDUP
 4597/9D44 : C3                         	RET				; Result is zero
 4598/9D45 :                            RONDUP:
 4599/9D45 : 8A C5                      	MOV	AL,CH			; Get VLSB of number
 4600/9D47 :                            RONDB:
 4601/9D47 : BB 31 09                   	MOV	BX,FPEXP		; Point to exponent
 4602/9D4A : 0A C0                      	OR	AL,AL			; Any rounding?
 4603/9D4C : 79 03                      	JNS	RONDB1
 4604/9D4E : E8 10 00                   	CALL	FPROND			; Yes - Round number up
 4605/9D51 :                            RONDB1:
 4606/9D51 : 8A 2F                      	MOV	CH,[BX]			; B = Exponent
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 78 - 2023/10/14 12時49分15秒


 4607/9D53 : 9F                         	LAHF
 4608/9D54 : 43                         	INC	BX
 4609/9D55 : 9E                         	SAHF
 4610/9D56 : 8A 07                      	MOV	AL,[BX]			; Get sign of result
 4611/9D58 : 24 80                      	AND	AL,10000000B		; Only bit 7 needed
 4612/9D5A : 32 C1                      	XOR	AL,CL			; Set correct sign
 4613/9D5C : 8A C8                      	MOV	CL,AL			; Save correct sign in number
 4614/9D5E : E9 BA 02                   	JMP	FPBCDE			; Move BCDE to FPREG
 4615/9D61 :                            ;
 4616/9D61 :                            FPROND:
 4617/9D61 : FE C2                      	INC	DL			; Round LSB
 4618/9D63 : 74 01                      	JZ	FPROND1
 4619/9D65 : C3                         	RET				; Return if ok
 4620/9D66 :                            FPROND1:
 4621/9D66 : FE C6                      	INC	DH			; Round NMSB
 4622/9D68 : 74 01                      	JZ	FPROND2
 4623/9D6A : C3                         	RET				; Return if ok
 4624/9D6B :                            FPROND2:
 4625/9D6B : FE C1                      	INC	CL			; Round MSB
 4626/9D6D : 74 01                      	JZ	FPROND3
 4627/9D6F : C3                         	RET				; Return if ok
 4628/9D70 :                            FPROND3:
 4629/9D70 : B1 80                      	MOV	CL,80H			; Set normal value
 4630/9D72 : FE 07                      	INC	BYTE PTR [BX]		; Increment exponent
 4631/9D74 : 74 01                      	JZ	FPROND4
 4632/9D76 : C3                         	RET				; Return if ok
 4633/9D77 :                            FPROND4:
 4634/9D77 : E9 A5 E8                   	JMP	OVERR			; Overflow error
 4635/9D7A :                            ;
 4636/9D7A :                            PLUCDE:
 4637/9D7A : 8A 07                      	MOV	AL,[BX]			; Get LSB of FPREG
 4638/9D7C : 02 C2                      	ADD	AL,DL			; Add LSB of BCDE
 4639/9D7E : 8A D0                      	MOV	DL,AL			; Save LSB of BCDE
 4640/9D80 : 9F                         	LAHF
 4641/9D81 : 43                         	INC	BX
 4642/9D82 : 9E                         	SAHF
 4643/9D83 : 8A 07                      	MOV	AL,[BX]			; Get NMSB of FPREG
 4644/9D85 : 12 C6                      	ADC	AL,DH			; Add NMSB of BCDE
 4645/9D87 : 8A F0                      	MOV	DH,AL			; Save NMSB of BCDE
 4646/9D89 : 9F                         	LAHF
 4647/9D8A : 43                         	INC	BX
 4648/9D8B : 9E                         	SAHF
 4649/9D8C : 8A 07                      	MOV	AL,[BX]			; Get MSB of FPREG
 4650/9D8E : 12 C1                      	ADC	AL,CL			; Add MSB of BCDE
 4651/9D90 : 8A C8                      	MOV	CL,AL			; Save MSB of BCDE
 4652/9D92 : C3                         	RET
 4653/9D93 :                            ;
 4654/9D93 :                            COMPL:
 4655/9D93 : BB 32 09                   	MOV	BX,SGNRES		; Sign of result
 4656/9D96 : 8A 07                      	MOV	AL,[BX]			; Get sign of result
 4657/9D98 : F6 D0                      	NOT	AL			; Negate it
 4658/9D9A : 88 07                      	MOV	[BX],AL			; Put it back
 4659/9D9C : 32 C0                      	XOR	AL,AL
 4660/9D9E : 8A D8                      	MOV	BL,AL			; Set L to zero
 4661/9DA0 : 2A C5                      	SUB	AL,CH			; Negate exponent,set carry
 4662/9DA2 : 8A E8                      	MOV	CH,AL			; Re-save exponent
 4663/9DA4 : 8A C3                      	MOV	AL,BL			; Load zero
 4664/9DA6 : 1A C2                      	SBB	AL,DL			; Negate LSB
 4665/9DA8 : 8A D0                      	MOV	DL,AL			; Re-save LSB
 4666/9DAA : 8A C3                      	MOV	AL,BL			; Load zero
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 79 - 2023/10/14 12時49分15秒


 4667/9DAC : 1A C6                      	SBB	AL,DH			; Negate NMSB
 4668/9DAE : 8A F0                      	MOV	DH,AL			; Re-save NMSB
 4669/9DB0 : 8A C3                      	MOV	AL,BL			; Load zero
 4670/9DB2 : 1A C1                      	SBB	AL,CL			; Negate MSB
 4671/9DB4 : 8A C8                      	MOV	CL,AL			; Re-save MSB
 4672/9DB6 : C3                         	RET
 4673/9DB7 :                            ;
 4674/9DB7 :                            SCALE:
 4675/9DB7 : B5 00                      	MOV	CH,0			; Clear underflow
 4676/9DB9 :                            SCALLP:
 4677/9DB9 : 2C 08                      	SUB	AL,8			; 8 bits (a whole byte)?
 4678/9DBB : 72 0A                      	JC	SHRITE			; No - Shift right A bits
 4679/9DBD : 8A EA                      	MOV	CH,DL			; <- Shift
 4680/9DBF : 8A D6                      	MOV	DL,DH			; <- right
 4681/9DC1 : 8A F1                      	MOV	DH,CL			; <- eight
 4682/9DC3 : B1 00                      	MOV	CL,0			; <- bits
 4683/9DC5 : EB F2                      	JMP	SCALLP			; More bits to shift
 4684/9DC7 :                            ;
 4685/9DC7 :                            SHRITE:
 4686/9DC7 : 04 09                      	ADD	AL,8+1			; Adjust count
 4687/9DC9 : 8A D8                      	MOV	BL,AL			; Save bits to shift
 4688/9DCB :                            SHRLP:
 4689/9DCB : 32 C0                      	XOR	AL,AL			; Flag for all done
 4690/9DCD : FE CB                      	DEC	BL			; All shifting done?
 4691/9DCF : 75 01                      	JNZ	SHRLP1
 4692/9DD1 : C3                         	RET				; Yes - Return
 4693/9DD2 :                            SHRLP1:
 4694/9DD2 : 8A C1                      	MOV	AL,CL			; Get MSB
 4695/9DD4 :                            SHRT1:
 4696/9DD4 : D0 D8                      	RCR	AL,1			; Shift it right
 4697/9DD6 : 8A C8                      	MOV	CL,AL			; Re-save
 4698/9DD8 : 8A C6                      	MOV	AL,DH			; Get NMSB
 4699/9DDA : D0 D8                      	RCR	AL,1			; Shift right with last bit
 4700/9DDC : 8A F0                      	MOV	DH,AL			; Re-save it
 4701/9DDE : 8A C2                      	MOV	AL,DL			; Get LSB
 4702/9DE0 : D0 D8                      	RCR	AL,1			; Shift right with last bit
 4703/9DE2 : 8A D0                      	MOV	DL,AL			; Re-save it
 4704/9DE4 : 8A C5                      	MOV	AL,CH			; Get underflow
 4705/9DE6 : D0 D8                      	RCR	AL,1			; Shift right with last bit
 4706/9DE8 : 8A E8                      	MOV	CH,AL			; Re-save underflow
 4707/9DEA : EB DF                      	JMP	SHRLP			; More bits to do
 4708/9DEC :                            ;
 4709/9DEC :                            UNITY:
 4710/9DEC : 00 00 00 81                	DB	000H,000H,000H,081H 	; 1.00000
 4711/9DF0 :                            ;
 4712/9DF0 :                            LOGTAB:
 4713/9DF0 : 03                         	DB	3           		; Table used by LOG
 4714/9DF1 : AA 56 19 80                	DB	0AAH,056H,019H,080H	; 0.59898
 4715/9DF5 : F1 22 76 80                	DB	0F1H,022H,076H,080H	; 0.96147
 4716/9DF9 : 45 AA 38 82                	DB	045H,0AAH,038H,082H	; 2.88539
 4717/9DFD :                            ;
 4718/9DFD :                            LOG:
 4719/9DFD : E8 BA 01                   	CALL	TSTSGN			; Test sign of value
 4720/9E00 : 0A C0                      	OR	AL,AL
 4721/9E02 : 7B 03                      	JPO	LOG1			; ?FC Error if <= zero	JP PE,FCERR
 4722/9E04 : E9 E4 EE                   	JMP	FCERR
 4723/9E07 :                            LOG1:
 4724/9E07 : BB 31 09                   	MOV	BX,FPEXP		; Point to exponent
 4725/9E0A : 8A 07                      	MOV	AL,[BX]			; Get exponent
 4726/9E0C : B9 35 80                   	MOV	CX,8035H		; BCDE = SQR(1/2)
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 80 - 2023/10/14 12時49分15秒


 4727/9E0F : BA F3 04                   	MOV	DX,04F3H
 4728/9E12 : 2A C5                      	SUB	AL,CH			; Scale value to be < 1
 4729/9E14 : 9F                         	LAHF
 4730/9E15 : 86 E0                      	XCHG	AH,AL
 4731/9E17 : 50                         	PUSH	AX			; Save scale factor
 4732/9E18 : 86 E0                      	XCHG	AH,AL
 4733/9E1A : 88 2F                      	MOV	[BX],CH			; Save new exponent
 4734/9E1C : 52                         	PUSH	DX			; Save SQR(1/2)
 4735/9E1D : 51                         	PUSH	CX
 4736/9E1E : E8 59 FE                   	CALL	FPADD			; Add SQR(1/2) to value
 4737/9E21 : 59                         	POP	CX			; Restore SQR(1/2)
 4738/9E22 : 5A                         	POP	DX
 4739/9E23 : FE C5                      	INC	CH			; Make it SQR(2)
 4740/9E25 : E8 A5 00                   	CALL	DVBCDE			; Divide by SQR(2)
 4741/9E28 : BB EC 9D                   	MOV	BX,UNITY		; Point to 1.
 4742/9E2B : E8 42 FE                   	CALL	SUBPHL			; Subtract FPREG from 1
 4743/9E2E : BB F0 9D                   	MOV	BX,LOGTAB		; Coefficient table
 4744/9E31 : E8 25 06                   	CALL	SUMSER			; Evaluate sum of series
 4745/9E34 : B9 80 80                   	MOV	CX,8080H		; BCDE = -0.5
 4746/9E37 : BA 00 00                   	MOV	DX,0000H
 4747/9E3A : E8 3D FE                   	CALL	FPADD			; Subtract 0.5 from FPREG
 4748/9E3D : 58                         	POP	AX			; Restore scale factor
 4749/9E3E : 86 E0                      	XCHG	AH,AL
 4750/9E40 : 9E                         	SAHF
 4751/9E41 : E8 B5 03                   	CALL	RSCALE			; Re-scale number
 4752/9E44 :                            MULLN2:
 4753/9E44 : B9 31 80                   	MOV	CX,8031H		; BCDE = Ln(2)
 4754/9E47 : BA 18 72                   	MOV	DX,7218H
 4755/9E4A : EB 02                      	JMP	FPMULT			; Skip "POP CX" and "POP DX"
 4756/9E4C :                            ;
 4757/9E4C :                            MULT:
 4758/9E4C : 59                         	POP	CX			; Get number from stack
 4759/9E4D : 5A                         	POP	DX
 4760/9E4E :                            FPMULT:
 4761/9E4E : E8 69 01                   	CALL	TSTSGN			; Test sign of FPREG
 4762/9E51 : 75 01                      	JNZ	FPMULT1
 4763/9E53 : C3                         	RET				; Return zero if zero
 4764/9E54 :                            FPMULT1:
 4765/9E54 : B3 00                      	MOV	BL,0			; Flag add exponents
 4766/9E56 : E8 04 01                   	CALL	ADDEXP			; Add exponents
 4767/9E59 : 8A C1                      	MOV	AL,CL			; Get MSB of multiplier
 4768/9E5B : A2 40 09                   	MOV	[MULVAL],AL		; Save MSB of multiplier
 4769/9E5E : 87 DA                      	XCHG	BX,DX
 4770/9E60 : 89 1E 41 09                	MOV	[MULVAL+1],BX		; Save rest of multiplier
 4771/9E64 : B9 00 00                   	MOV	CX,0			; Partial product (BCDE) = zero
 4772/9E67 : 8A F5                      	MOV	DH,CH
 4773/9E69 : 8A D5                      	MOV	DL,CH
 4774/9E6B : BB F9 9C                   	MOV	BX,BNORM		; Address of normalise
 4775/9E6E : 53                         	PUSH	BX			; Save for return
 4776/9E6F : BB 77 9E                   	MOV	BX,MULT8		; Address of 8 bit multiply
 4777/9E72 : 53                         	PUSH	BX			; Save for NMSB,MSB
 4778/9E73 : 53                         	PUSH	BX			;
 4779/9E74 : BB 2E 09                   	MOV	BX,FPREG		; Point to number
 4780/9E77 :                            MULT8:
 4781/9E77 : 8A 07                      	MOV	AL,[BX]			; Get LSB of number
 4782/9E79 :                            ;	LAHF
 4783/9E79 : 43                         	INC	BX			; Point to NMSB
 4784/9E7A :                            ;	SAHF
 4785/9E7A : 0A C0                      	OR	AL,AL           	; Test LSB
 4786/9E7C : 74 38                      	JZ	BYTSFT			; Zero - shift to next byte
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 81 - 2023/10/14 12時49分15秒


 4787/9E7E : 53                         	PUSH	BX			; Save address of number
 4788/9E7F : B3 08                      	MOV	BL,8			; 8 bits to multiply by
 4789/9E81 :                            MUL8LP:
 4790/9E81 : D0 D8                      	RCR	AL,1			; Shift LSB right
 4791/9E83 : 8A F8                      	MOV	BH,AL			; Save LSB
 4792/9E85 : 8A C1                      	MOV	AL,CL			; Get MSB
 4793/9E87 : 73 0F                      	JNC	NOMADD			; Bit was zero - Don't add
 4794/9E89 : 53                         	PUSH	BX			; Save LSB and count
 4795/9E8A : 8B 1E 41 09                	MOV	BX,[MULVAL+1]		; Get LSB and NMSB
 4796/9E8E : 03 DA                      	ADD	BX,DX			; Add NMSB and LSB
 4797/9E90 : 87 DA                      	XCHG	BX,DX			; Leave sum in DE
 4798/9E92 : 5B                         	POP	BX			; Restore MSB and count
 4799/9E93 : A0 40 09                   	MOV	AL,[MULVAL]		; Get MSB of multiplier
 4800/9E96 : 12 C1                      	ADC	AL,CL			; Add MSB
 4801/9E98 :                            NOMADD:
 4802/9E98 : D0 D8                      	RCR	AL,1			; Shift MSB right
 4803/9E9A : 8A C8                      	MOV	CL,AL			; Re-save MSB
 4804/9E9C : 8A C6                      	MOV	AL,DH			; Get NMSB
 4805/9E9E : D0 D8                      	RCR	AL,1			; Shift NMSB right
 4806/9EA0 : 8A F0                      	MOV	DH,AL			; Re-save NMSB
 4807/9EA2 : 8A C2                      	MOV	AL,DL			; Get LSB
 4808/9EA4 : D0 D8                      	RCR	AL,1			; Shift LSB right
 4809/9EA6 : 8A D0                      	MOV	DL,AL			; Re-save LSB
 4810/9EA8 : 8A C5                      	MOV	AL,CH			; Get VLSB
 4811/9EAA : D0 D8                      	RCR	AL,1			; Shift VLSB right
 4812/9EAC : 8A E8                      	MOV	CH,AL			; Re-save VLSB
 4813/9EAE : FE CB                      	DEC	BL			; Count bits multiplied
 4814/9EB0 : 8A C7                      	MOV	AL,BH			; Get LSB of multiplier
 4815/9EB2 : 75 CD                      	JNZ	MUL8LP			; More - Do it
 4816/9EB4 :                            POPHRT:
 4817/9EB4 : 5B                         	POP	BX			; Restore address of number
 4818/9EB5 : C3                         	RET
 4819/9EB6 :                            ;
 4820/9EB6 :                            BYTSFT:
 4821/9EB6 : 8A EA                      	MOV	CH,DL			; Shift partial product left
 4822/9EB8 : 8A D6                      	MOV	DL,DH
 4823/9EBA : 8A F1                      	MOV	DH,CL
 4824/9EBC : 8A C8                      	MOV	CL,AL
 4825/9EBE : C3                         	RET
 4826/9EBF :                            ;
 4827/9EBF :                            DIV10:
 4828/9EBF : E8 3D 01                   	CALL	STAKFP			; Save FPREG on stack
 4829/9EC2 : B9 20 84                   	MOV	CX,8420H		; BCDE = 10.
 4830/9EC5 : BA 00 00                   	MOV	DX,0000H
 4831/9EC8 : E8 50 01                   	CALL	FPBCDE			; Move 10 to FPREG
 4832/9ECB :                            ;
 4833/9ECB :                            DIV:
 4834/9ECB : 59                         	POP	CX			; Get number from stack
 4835/9ECC : 5A                         	POP	DX
 4836/9ECD :                            DVBCDE:
 4837/9ECD : E8 EA 00                   	CALL	TSTSGN			; Test sign of FPREG
 4838/9ED0 : 75 03                      	JNZ	DVBCDE1
 4839/9ED2 : E9 3A E7                   	JMP	DZERR			; Error if division by zero
 4840/9ED5 :                            DVBCDE1:
 4841/9ED5 : B3 FF                      	MOV	BL,-1			; Flag subtract exponents
 4842/9ED7 : E8 83 00                   	CALL	ADDEXP			; Subtract exponents
 4843/9EDA : FE 07                      	INC	BYTE PTR [BX]		; Add 2 to exponent to adjust
 4844/9EDC : FE 07                      	INC	BYTE PTR [BX]
 4845/9EDE :                            ;	LAHF
 4846/9EDE : 4B                         	DEC	BX			; Point to MSB
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 82 - 2023/10/14 12時49分15秒


 4847/9EDF :                            ;	SAHF
 4848/9EDF : 8A 07                      	MOV	AL,[BX]			; Get MSB of dividend
 4849/9EE1 : A2 5B 08                   	MOV	[DIV3],AL		; Save for subtraction
 4850/9EE4 :                            ;	LAHF
 4851/9EE4 : 4B                         	DEC	BX
 4852/9EE5 :                            ;	SAHF
 4853/9EE5 : 8A 07                      	MOV	AL,[BX]			; Get NMSB of dividend
 4854/9EE7 : A2 55 08                   	MOV	[DIV2],AL		; Save for subtraction
 4855/9EEA :                            ;	LAHF
 4856/9EEA : 4B                         	DEC	BX
 4857/9EEB :                            ;	SAHF
 4858/9EEB : 8A 07                      	MOV	AL,[BX]			; Get MSB of dividend
 4859/9EED : A2 4F 08                   	MOV	[DIV1],AL		; Save for subtraction
 4860/9EF0 : 8A E9                      	MOV	CH,CL			; Get MSB
 4861/9EF2 : 87 DA                      	XCHG	BX,DX			; NMSB,LSB to HL
 4862/9EF4 : 32 C0                      	XOR	AL,AL
 4863/9EF6 : 8A C8                      	MOV	CL,AL			; Clear MSB of quotient
 4864/9EF8 : 8A F0                      	MOV	DH,AL			; Clear NMSB of quotient
 4865/9EFA : 8A D0                      	MOV	DL,AL			; Clear LSB of quotient
 4866/9EFC : A2 5F 08                   	MOV	[DIV4],AL		; Clear overflow count
 4867/9EFF :                            DIVLP:
 4868/9EFF : 53                         	PUSH	BX			; Save divisor
 4869/9F00 : 51                         	PUSH	CX
 4870/9F01 : 8A C3                      	MOV	AL,BL			; Get LSB of number
 4871/9F03 : E8 48 69                   	CALL	DIVSUP			; Subt' divisor from dividend
 4872/9F06 : 1C 00                      	SBB	AL,0			; Count for overflows
 4873/9F08 : F5                         	CMC
 4874/9F09 : 73 0B                      	JNC	RESDIV			; Restore divisor if borrow
 4875/9F0B : A2 5F 08                   	MOV	[DIV4],AL		; Re-save overflow count
 4876/9F0E : 58                         	POP	AX			; Scrap divisor
 4877/9F0F :                            ;	XCHG	AH,AL
 4878/9F0F :                            ;	SAHF
 4879/9F0F : 58                         	POP	AX
 4880/9F10 : 86 E0                      	XCHG	AH,AL
 4881/9F12 : 9E                         	SAHF
 4882/9F13 : F9                         	STC				; Set carry to
 4883/9F14 : EB 02                      	JMP	RESDIV1			; Skip "POP CX" and "POP BX"
 4884/9F16 :                            ;
 4885/9F16 :                            RESDIV:
 4886/9F16 : 59                         	POP	CX			; Restore divisor
 4887/9F17 : 5B                         	POP	BX
 4888/9F18 :                            RESDIV1:
 4889/9F18 : 8A C1                      	MOV	AL,CL			; Get MSB of quotient
 4890/9F1A : FE C0                      	INC	AL
 4891/9F1C : FE C8                      	DEC	AL
 4892/9F1E : D0 D8                      	RCR	AL,1			; Bit 0 to bit 7
 4893/9F20 : 79 03                      	JNS	RESDIV2
 4894/9F22 : E9 22 FE                   	JMP	RONDB			; Done - Normalise result
 4895/9F25 :                            RESDIV2:
 4896/9F25 : D0 D0                      	RCL	AL,1			; Restore carry
 4897/9F27 : 8A C2                      	MOV	AL,DL			; Get LSB of quotient
 4898/9F29 : D0 D0                      	RCL	AL,1			; Double it
 4899/9F2B : 8A D0                      	MOV	DL,AL			; Put it back
 4900/9F2D : 8A C6                      	MOV	AL,DH			; Get NMSB of quotient
 4901/9F2F : D0 D0                      	RCL	AL,1			; Double it
 4902/9F31 : 8A F0                      	MOV	DH,AL			; Put it back
 4903/9F33 : 8A C1                      	MOV	AL,CL			; Get MSB of quotient
 4904/9F35 : D0 D0                      	RCL	AL,1			; Double it
 4905/9F37 : 8A C8                      	MOV	CL,AL			; Put it back
 4906/9F39 : 03 DB                      	ADD	BX,BX			; Double NMSB,LSB of divisor
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 83 - 2023/10/14 12時49分15秒


 4907/9F3B : 8A C5                      	MOV	AL,CH			; Get MSB of divisor
 4908/9F3D : D0 D0                      	RCL	AL,1			; Double it
 4909/9F3F : 8A E8                      	MOV	CH,AL			; Put it back
 4910/9F41 : A0 5F 08                   	MOV	AL,[DIV4]		; Get VLSB of quotient
 4911/9F44 : D0 D0                      	RCL	AL,1			; Double it
 4912/9F46 : A2 5F 08                   	MOV	[DIV4],AL		; Put it back
 4913/9F49 : 8A C1                      	MOV	AL,CL			; Get MSB of quotient
 4914/9F4B : 0A C6                      	OR	AL,DH			; Merge NMSB
 4915/9F4D : 0A C2                      	OR	AL,DL			; Merge LSB
 4916/9F4F : 75 AE                      	JNZ	DIVLP			; Not done - Keep dividing
 4917/9F51 : 53                         	PUSH	BX			; Save divisor
 4918/9F52 : BB 31 09                   	MOV	BX,FPEXP		; Point to exponent
 4919/9F55 : FE 0F                      	DEC	BYTE PTR [BX]		; Divide by 2
 4920/9F57 : 5B                         	POP	BX			; Restore divisor
 4921/9F58 : 75 A5                      	JNZ	DIVLP			; Ok - Keep going
 4922/9F5A : E9 C2 E6                   	JMP	OVERR			; Overflow error
 4923/9F5D :                            ;
 4924/9F5D :                            ADDEXP:
 4925/9F5D : 8A C5                      	MOV	AL,CH			; Get exponent of dividend
 4926/9F5F : 0A C0                      	OR	AL,AL			; Test it
 4927/9F61 : 74 2D                      	JZ	OVTST3			; Zero - Result zero
 4928/9F63 : 8A C3                      	MOV	AL,BL			; Get add/subtract flag
 4929/9F65 : BB 31 09                   	MOV	BX,FPEXP		; Point to exponent
 4930/9F68 : 32 07                      	XOR	AL,[BX]			; Add or subtract it
 4931/9F6A : 02 C5                      	ADD	AL,CH			; Add the other exponent
 4932/9F6C : 8A E8                      	MOV	CH,AL			; Save new exponent
 4933/9F6E : D0 D8                      	RCR	AL,1			; Test exponent for overflow
 4934/9F70 : 32 C5                      	XOR	AL,CH
 4935/9F72 : 8A C5                      	MOV	AL,CH			; Get exponent
 4936/9F74 : 79 18                      	JNS	OVTST2			; Positive - Test for overflow
 4937/9F76 : 04 80                      	ADD	AL,80H			; Add excess 128
 4938/9F78 : 88 07                      	MOV	[BX],AL			; Save new exponent
 4939/9F7A : 75 03                      	JNZ	ADDEXP1			; Zero - Result zero
 4940/9F7C : E9 35 FF                   	JMP	POPHRT
 4941/9F7F :                            ADDEXP1:
 4942/9F7F : E8 D0 00                   	CALL	SIGNS			; Set MSBs and sign of result
 4943/9F82 : 88 07                      	MOV	[BX],AL			; Save new exponent
 4944/9F84 : 9F                         	LAHF
 4945/9F85 : 4B                         	DEC	BX			; Point to MSB
 4946/9F86 : 9E                         	SAHF
 4947/9F87 : C3                         	RET
 4948/9F88 :                            ;
 4949/9F88 :                            OVTST1:
 4950/9F88 : E8 2F 00                   	CALL	TSTSGN			; Test sign of FPREG
 4951/9F8B : F6 D0                      	NOT	AL			; Invert sign
 4952/9F8D : 5B                         	POP	BX			; Clean up stack
 4953/9F8E :                            OVTST2:
 4954/9F8E : 0A C0                      	OR	AL,AL			; Test if new exponent zero
 4955/9F90 :                            OVTST3:
 4956/9F90 : 5B                         	POP	BX			; Clear off return addr
 4957/9F91 : 78 03                      	JS	OVTST4			; Result zero
 4958/9F93 : E9 81 FD                   	JMP	RESZER
 4959/9F96 :                            OVTST4:
 4960/9F96 : E9 86 E6                   	JMP	OVERR			; Overflow error
 4961/9F99 :                            ;
 4962/9F99 :                            MLSP10:
 4963/9F99 : E8 8E 00                   	CALL	BCDEFP			; Move FPREG to BCDE
 4964/9F9C : 8A C5                      	MOV	AL,CH			; Get exponent
 4965/9F9E : 0A C0                      	OR	AL,AL			; Is it zero?
 4966/9FA0 : 75 01                      	JNZ	MLSP101
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 84 - 2023/10/14 12時49分15秒


 4967/9FA2 : C3                         	RET				; Yes - Result is zero
 4968/9FA3 :                            MLSP101:
 4969/9FA3 : 04 02                      	ADD	AL,2			; Multiply by 4
 4970/9FA5 : 73 03                      	JNC	MLSP102
 4971/9FA7 : E9 75 E6                   	JMP	OVERR			; Overflow - ?OV Error
 4972/9FAA :                            MLSP102:
 4973/9FAA : 8A E8                      	MOV	CH,AL			; Re-save exponent
 4974/9FAC : E8 CB FC                   	CALL	FPADD			; Add BCDE to FPREG (Time 5)
 4975/9FAF : BB 31 09                   	MOV	BX,FPEXP		; Point to exponent
 4976/9FB2 : FE 07                      	INC	BYTE PTR [BX]		; Double number (Times 10)
 4977/9FB4 : 74 01                      	JZ	MLSP103
 4978/9FB6 : C3                         	RET				; Ok - Return
 4979/9FB7 :                            MLSP103:
 4980/9FB7 : E9 65 E6                   	JMP	OVERR			; Overflow error
 4981/9FBA :                            ;
 4982/9FBA :                            ; Z flag
 4983/9FBA :                            ;
 4984/9FBA :                            TSTSGN:
 4985/9FBA : A0 31 09                   	MOV	AL,[FPEXP]		; Get sign of FPREG
 4986/9FBD : 0A C0                      	OR	AL,AL
 4987/9FBF : 75 01                      	JNZ	TSTSGN1
 4988/9FC1 : C3                         	RET				; RETurn if number is zero
 4989/9FC2 :                            TSTSGN1:
 4990/9FC2 : A0 30 09                   	MOV	AL,[FPREG+2]		; Get MSB of FPREG
 4991/9FC5 : 3C 2F                      	CMP	AL,02FH
 4992/9FC7 : EB 02                      	JMP	RETREL1
 4993/9FC9 :                            RETREL:
 4994/9FC9 : F6 D0                      	NOT	AL			; Invert sign
 4995/9FCB :                            RETREL1:
 4996/9FCB : D0 D0                      	RCL	AL,1			; Sign bit to carry
 4997/9FCD :                            FLGDIF:
 4998/9FCD : 1A C0                      	SBB	AL,AL			; Carry to all bits of A
 4999/9FCF : 74 01                      	JZ	FLGDIF1
 5000/9FD1 : C3                         	RET				; Return -1 if negative
 5001/9FD2 :                            FLGDIF1:
 5002/9FD2 : FE C0                      	INC	AL			; Bump to +1
 5003/9FD4 : C3                         	RET				; Positive - Return +1
 5004/9FD5 :                            ;
 5005/9FD5 :                            SGN:
 5006/9FD5 : E8 E2 FF                   	CALL	TSTSGN			; Test sign of FPREG
 5007/9FD8 :                            FLGREL:
 5008/9FD8 : B5 88                      	MOV	CH,80H+8		; 8 bit integer in exponent
 5009/9FDA : BA 00 00                   	MOV	DX,0			; Zero NMSB and LSB
 5010/9FDD :                            RETINT:
 5011/9FDD : BB 31 09                   	MOV	BX,FPEXP		; Point to exponent
 5012/9FE0 : 8A C8                      	MOV	CL,AL			; CDE = MSB,NMSB and LSB
 5013/9FE2 : 88 2F                      	MOV	[BX],CH			; Save exponent
 5014/9FE4 : B5 00                      	MOV	CH,0			; CDE = integer to normalise
 5015/9FE6 :                            ;	LAHF
 5016/9FE6 : 43                         	INC	BX			; Point to sign of result
 5017/9FE7 :                            ;	SAHF
 5018/9FE7 : C6 07 80                   	MOV	BYTE PTR [BX],80H	; Set sign of result
 5019/9FEA : D0 D0                      	RCL	AL,1			; Carry = sign of integer
 5020/9FEC : E9 05 FD                   	JMP	CONPOS			; Set sign of result
 5021/9FEF :                            ;
 5022/9FEF :                            ABS:
 5023/9FEF : E8 C8 FF                   	CALL	TSTSGN			; Test sign of FPREG
 5024/9FF2 : 78 01                      	JS	INVSGN
 5025/9FF4 : C3                         	RET				; Return if positive
 5026/9FF5 :                            INVSGN:
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 85 - 2023/10/14 12時49分15秒


 5027/9FF5 : BB 30 09                   	MOV	BX,FPREG+2		; Point to MSB
 5028/9FF8 : 8A 07                      	MOV	AL,[BX]			; Get sign of mantissa
 5029/9FFA : 34 80                      	XOR	AL,80H			; Invert sign of mantissa
 5030/9FFC : 88 07                      	MOV	[BX],AL			; Re-save sign of mantissa
 5031/9FFE : C3                         	RET
 5032/9FFF :                            ;
 5033/9FFF :                            STAKFP:
 5034/9FFF : 87 DA                      	XCHG	BX,DX			; Save code string address
 5035/A001 : 8B 1E 2E 09                	MOV	BX,[FPREG]		; LSB,NLSB of FPREG
 5036/A005 : 8B EC                      	MOV	BP,SP
 5037/A007 : 87 5E 00                   	XCHG	[BP],BX			; Stack them,get return
 5038/A00A : 53                         	PUSH	BX			; Re-save return
 5039/A00B : 8B 1E 30 09                	MOV	BX,[FPREG+2]		; MSB and exponent of FPREG
 5040/A00F : 8B EC                      	MOV	BP,SP
 5041/A011 : 87 5E 00                   	XCHG	[BP],BX			; Stack them,get return
 5042/A014 : 53                         	PUSH	BX			; Re-save return
 5043/A015 : 87 DA                      	XCHG	BX,DX			; Restore code string address
 5044/A017 : C3                         	RET
 5045/A018 :                            ;
 5046/A018 :                            PHLTFP:
 5047/A018 : E8 12 00                   	CALL	LOADFP			; Number at HL to BCDE
 5048/A01B :                            FPBCDE:
 5049/A01B : 87 DA                      	XCHG	BX,DX			; Save code string address
 5050/A01D : 89 1E 2E 09                	MOV	[FPREG],BX		; Save LSB,NLSB of number
 5051/A021 : 8B D9                      	MOV	BX,CX			; Exponent of number
 5052/A023 : 89 1E 30 09                	MOV	[FPREG+2],BX		; Save MSB and exponent
 5053/A027 : 87 DA                      	XCHG	BX,DX			; Restore code string address
 5054/A029 : C3                         	RET
 5055/A02A :                            ;
 5056/A02A :                            BCDEFP:
 5057/A02A : BB 2E 09                   	MOV	BX,FPREG		; Point to FPREG
 5058/A02D :                            LOADFP:
 5059/A02D : 8A 17                      	MOV	DL,[BX]			; Get LSB of number
 5060/A02F : 9F                         	LAHF
 5061/A030 : 43                         	INC	BX
 5062/A031 :                            ;	SAHF
 5063/A031 : 8A 37                      	MOV	DH,[BX]			; Get NMSB of number
 5064/A033 :                            ;	LAHF
 5065/A033 : 43                         	INC	BX
 5066/A034 :                            ;	SAHF
 5067/A034 : 8A 0F                      	MOV	CL,[BX]			; Get MSB of number
 5068/A036 :                            ;	LAHF
 5069/A036 : 43                         	INC	BX
 5070/A037 : 9E                         	SAHF
 5071/A038 : 8A 2F                      	MOV	CH,[BX]			; Get exponent of number
 5072/A03A :                            INCHL:
 5073/A03A : 9F                         	LAHF
 5074/A03B : 43                         	INC	BX			; Used for conditional "INC HL"
 5075/A03C : 9E                         	SAHF
 5076/A03D : C3                         	RET
 5077/A03E :                            ;
 5078/A03E :                            FPTHL:
 5079/A03E : BA 2E 09                   	MOV	DX,FPREG		; Point to FPREG
 5080/A041 :                            DETHL4:
 5081/A041 : B5 04                      	MOV	CH,4			; 4 bytes to move
 5082/A043 :                            DETHLB:
 5083/A043 : 87 DA                      	XCHG	BX,DX
 5084/A045 : 8A 07                      	MOV	AL,[BX]			; Get source
 5085/A047 : 87 DA                      	XCHG	BX,DX
 5086/A049 : 88 07                      	MOV	[BX],AL			; Save destination
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 86 - 2023/10/14 12時49分15秒


 5087/A04B :                            ;	LAHF
 5088/A04B : 42                         	INC	DX			; Next source
 5089/A04C :                            ;	SAHF
 5090/A04C :                            ;	LAHF
 5091/A04C : 43                         	INC	BX			; Next destination
 5092/A04D :                            ;	SAHF
 5093/A04D : FE CD                      	DEC	CH			; Count bytes
 5094/A04F : 75 F2                      	JNZ	DETHLB			; Loop if more
 5095/A051 : C3                         	RET
 5096/A052 :                            ;
 5097/A052 :                            SIGNS:
 5098/A052 : BB 30 09                   	MOV	BX,FPREG+2		; Point to MSB of FPREG
 5099/A055 : 8A 07                      	MOV	AL,[BX]			; Get MSB
 5100/A057 : D0 C0                      	ROL	AL,1			; Old sign to carry
 5101/A059 : F9                         	STC				; Set MSBit
 5102/A05A : D0 D8                      	RCR	AL,1			; Set MSBit of MSB
 5103/A05C : 88 07                      	MOV	[BX],AL			; Save new MSB
 5104/A05E : F5                         	CMC				; Complement sign
 5105/A05F : D0 D8                      	RCR	AL,1			; Old sign to carry
 5106/A061 : 9F                         	LAHF
 5107/A062 : 43                         	INC	BX
 5108/A063 :                            ;	SAHF
 5109/A063 :                            ;	LAHF
 5110/A063 : 43                         	INC	BX
 5111/A064 : 9E                         	SAHF
 5112/A065 : 88 07                      	MOV	[BX],AL			; Set sign of result
 5113/A067 : 8A C1                      	MOV	AL,CL			; Get MSB
 5114/A069 : D0 C0                      	ROL	AL,1			; Old sign to carry
 5115/A06B : F9                         	STC				; Set MSBit
 5116/A06C : D0 D8                      	RCR	AL,1			; Set MSBit of MSB
 5117/A06E : 8A C8                      	MOV	CL,AL			; Save MSB
 5118/A070 : D0 D8                      	RCR	AL,1
 5119/A072 : 32 07                      	XOR	AL,[BX]			; New sign of result
 5120/A074 : C3                         	RET
 5121/A075 :                            ;
 5122/A075 :                            CMPNUM:
 5123/A075 : 8A C5                      	MOV	AL,CH			; Get exponent of numbe
 5124/A077 : 0A C0                      	OR	AL,AL
 5125/A079 : 75 03                      	JNZ	CMPNUM1			; Zero - Test sign of FPREG
 5126/A07B : E9 3C FF                   	JMP	TSTSGN
 5127/A07E :                            CMPNUM1:
 5128/A07E : BB C9 9F                   	MOV	BX,RETREL		; Return relation routine
 5129/A081 : 53                         	PUSH	BX			; Save for return
 5130/A082 : E8 35 FF                   	CALL	TSTSGN			; Test sign of FPREG
 5131/A085 : 8A C1                      	MOV	AL,CL			; Get MSB of number
 5132/A087 : 75 01                      	JNZ	CMPNUM2
 5133/A089 : C3                         	RET				; FPREG zero - Number's MSB
 5134/A08A :                            CMPNUM2:
 5135/A08A : BB 30 09                   	MOV	BX,FPREG+2		; MSB of FPREG
 5136/A08D : 32 07                      	XOR	AL,[BX]			; Combine signs
 5137/A08F : 8A C1                      	MOV	AL,CL			; Get MSB of number
 5138/A091 : 79 01                      	JNS	CMPNUM3
 5139/A093 : C3                         	RET				; Exit if signs different
 5140/A094 :                            CMPNUM3:
 5141/A094 : E8 05 00                   	CALL	CMPFP			; Compare FP numbers
 5142/A097 : D0 D8                      	RCR	AL,1			; Get carry to sign
 5143/A099 : 32 C1                      	XOR	AL,CL			; Combine with MSB of number
 5144/A09B : C3                         	RET
 5145/A09C :                            ;
 5146/A09C :                            CMPFP:
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 87 - 2023/10/14 12時49分15秒


 5147/A09C : 9F                         	LAHF
 5148/A09D : 43                         	INC	BX			; Point to exponent
 5149/A09E : 9E                         	SAHF
 5150/A09F : 8A C5                      	MOV	AL,CH			; Get exponent
 5151/A0A1 : 3A 07                      	CMP	AL,[BX]			; Compare exponents
 5152/A0A3 : 74 01                      	JZ	CMPFP1
 5153/A0A5 : C3                         	RET				; Different
 5154/A0A6 :                            CMPFP1:
 5155/A0A6 : 9F                         	LAHF
 5156/A0A7 : 4B                         	DEC	BX			; Point to MBS
 5157/A0A8 : 9E                         	SAHF
 5158/A0A9 : 8A C1                      	MOV	AL,CL			; Get MSB
 5159/A0AB : 3A 07                      	CMP	AL,[BX]			; Compare MSBs
 5160/A0AD : 74 01                      	JZ	CMPFP2
 5161/A0AF : C3                         	RET				; Different
 5162/A0B0 :                            CMPFP2:
 5163/A0B0 : 9F                         	LAHF
 5164/A0B1 : 4B                         	DEC	BX			; Point to NMSB
 5165/A0B2 : 9E                         	SAHF
 5166/A0B3 : 8A C6                      	MOV	AL,DH			; Get NMSB
 5167/A0B5 : 3A 07                      	CMP	AL,[BX]			; Compare NMSBs
 5168/A0B7 : 74 01                      	JZ	CMPFP3
 5169/A0B9 : C3                         	RET				; Different
 5170/A0BA :                            CMPFP3:
 5171/A0BA : 9F                         	LAHF
 5172/A0BB : 4B                         	DEC	BX			; Point to LSB
 5173/A0BC : 9E                         	SAHF
 5174/A0BD : 8A C2                      	MOV	AL,DL			; Get LSB
 5175/A0BF : 2A 07                      	SUB	AL,[BX]			; Compare LSBs
 5176/A0C1 : 74 01                      	JZ	CMPFP4
 5177/A0C3 : C3                         	RET				; Different
 5178/A0C4 :                            CMPFP4:
 5179/A0C4 : 5B                         	POP	BX			; Drop RETurn
 5180/A0C5 : 5B                         	POP	BX			; Drop another RETurn
 5181/A0C6 : C3                         	RET
 5182/A0C7 :                            ;
 5183/A0C7 :                            FPINT:
 5184/A0C7 : 8A E8                      	MOV	CH,AL			; <- Move
 5185/A0C9 : 8A C8                      	MOV	CL,AL			; <- exponent
 5186/A0CB : 8A F0                      	MOV	DH,AL			; <- to all
 5187/A0CD : 8A D0                      	MOV	DL,AL			; <- bits
 5188/A0CF : 0A C0                      	OR	AL,AL			; Test exponent
 5189/A0D1 : 75 01                      	JNZ	FPINT1
 5190/A0D3 : C3                         	RET				; Zero - Return zero
 5191/A0D4 :                            FPINT1:
 5192/A0D4 : 53                         	PUSH	BX			; Save pointer to number
 5193/A0D5 : E8 52 FF                   	CALL	BCDEFP			; Move FPREG to BCDE
 5194/A0D8 : E8 77 FF                   	CALL	SIGNS			; Set MSBs & sign of result
 5195/A0DB : 32 07                      	XOR	AL,[BX]			; Combine with sign of FPREG
 5196/A0DD : 8A F8                      	MOV	BH,AL			; Save combined signs
 5197/A0DF : 79 03                      	JNS	FPINT2
 5198/A0E1 : E8 19 00                   	CALL	DCBCDE			; Negative - Decrement BCDE
 5199/A0E4 :                            FPINT2:
 5200/A0E4 : B0 98                      	MOV	AL,80H+24		; 24 bits
 5201/A0E6 : 2A C5                      	SUB	AL,CH			; Bits to shift
 5202/A0E8 : E8 CC FC                   	CALL	SCALE			; Shift BCDE
 5203/A0EB : 8A C7                      	MOV	AL,BH			; Get combined sign
 5204/A0ED : D0 D0                      	RCL	AL,1			; Sign to carry
 5205/A0EF : 73 03                      	JNC	FPINT3
 5206/A0F1 : E8 6D FC                   	CALL	FPROND			; Negative - Round number up
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 88 - 2023/10/14 12時49分15秒


 5207/A0F4 :                            FPINT3:
 5208/A0F4 : B5 00                      	MOV	CH,0			; Zero exponent
 5209/A0F6 : 73 03                      	JNC	FPINT4
 5210/A0F8 : E8 98 FC                   	CALL    COMPL			; If negative make positive
 5211/A0FB :                            FPINT4:
 5212/A0FB : 5B                         	POP	BX			; Restore pointer to number
 5213/A0FC : C3                         	RET
 5214/A0FD :                            ;
 5215/A0FD :                            DCBCDE:
 5216/A0FD :                            ;	LAHF
 5217/A0FD : 4A                         	DEC	DX			; Decrement BCDE
 5218/A0FE :                            ;	SAHF
 5219/A0FE : 8A C6                      	MOV	AL,DH			; Test LSBs
 5220/A100 : 22 C2                      	AND	AL,DL
 5221/A102 : FE C0                      	INC	AL
 5222/A104 : 74 01                      	JZ	DCBCDE1
 5223/A106 : C3                         	RET				; Exit if LSBs not FFFF
 5224/A107 :                            DCBCDE1:
 5225/A107 : 9F                         	LAHF
 5226/A108 : 49                         	DEC	CX			; Decrement MSBs
 5227/A109 : 9E                         	SAHF
 5228/A10A : C3                         	RET
 5229/A10B :                            ;
 5230/A10B :                            INT:
 5231/A10B : BB 31 09                   	MOV	BX,FPEXP		; Point to exponent
 5232/A10E : 8A 07                      	MOV	AL,[BX]			; Get exponent
 5233/A110 : 3C 98                      	CMP	AL,80H+24		; Integer accuracy only?
 5234/A112 : A0 2E 09                   	MOV	AL,[FPREG]		; Get LSB
 5235/A115 : 72 01                      	JC	INT1
 5236/A117 : C3                         	RET				; Yes - Already integer
 5237/A118 :                            INT1:
 5238/A118 : 8A 07                      	MOV	AL,[BX]			; Get exponent
 5239/A11A : E8 AA FF                   	CALL	FPINT			; F.P to integer
 5240/A11D : C6 07 98                   	MOV	BYTE PTR [BX],80H+24	; Save 24 bit integer
 5241/A120 : 8A C2                      	MOV	AL,DL			; Get LSB of number
 5242/A122 : 9F                         	LAHF
 5243/A123 : 86 E0                      	XCHG	AH,AL
 5244/A125 : 50                         	PUSH	AX			; Save LSB
 5245/A126 : 86 E0                      	XCHG	AH,AL
 5246/A128 : 8A C1                      	MOV	AL,CL			; Get MSB of number
 5247/A12A : D0 D0                      	RCL	AL,1			; Sign to carry
 5248/A12C : E8 C5 FB                   	CALL	CONPOS			; Set sign of result
 5249/A12F : 58                         	POP	AX			; Restore LSB of number
 5250/A130 : 86 E0                      	XCHG	AH,AL
 5251/A132 : 9E                         	SAHF
 5252/A133 : C3                         	RET
 5253/A134 :                            ;
 5254/A134 :                            MLDEBC:
 5255/A134 : BB 00 00                   	MOV	BX,0			; Clear partial product
 5256/A137 : 8A C5                      	MOV	AL,CH			; Test multiplier
 5257/A139 : 0A C1                      	OR	AL,CL
 5258/A13B : 75 01                      	JNZ	MLDEBC1
 5259/A13D : C3                         	RET				; Return zero if zero
 5260/A13E :                            MLDEBC1:
 5261/A13E : B0 10                      	MOV	AL,16			; 16 bits
 5262/A140 :                            MLDBLP:
 5263/A140 : 03 DB                      	ADD	BX,BX			; Shift P.P left
 5264/A142 : 73 03                      	JNC	MLDBLP1
 5265/A144 : E9 BB F4                   	JMP	BSERR			; ?BS Error if overflow
 5266/A147 :                            MLDBLP1:
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 89 - 2023/10/14 12時49分15秒


 5267/A147 : 87 DA                      	XCHG	BX,DX
 5268/A149 : 03 DB                      	ADD	BX,BX			; Shift multiplier left
 5269/A14B : 87 DA                      	XCHG	BX,DX
 5270/A14D : 73 07                      	JNC	NOMLAD			; Bit was zero - No add
 5271/A14F : 03 D9                      	ADD	BX,CX			; Add multiplicand
 5272/A151 : 73 03                      	JNC	NOMLAD
 5273/A153 : E9 AC F4                   	JMP	BSERR			; ?BS Error if overflow
 5274/A156 :                            NOMLAD:
 5275/A156 : FE C8                      	DEC	AL			; Count bits
 5276/A158 : 75 E6                      	JNZ	MLDBLP			; More
 5277/A15A : C3                         	RET
 5278/A15B :                            ;
 5279/A15B :                            ASCTFP:
 5280/A15B : 3C 2D                      	CMP	AL,'-'			; Negative?
 5281/A15D : 9F                         	LAHF
 5282/A15E : 86 E0                      	XCHG	AH,AL
 5283/A160 : 50                         	PUSH	AX			; Save it and flags
 5284/A161 : 86 E0                      	XCHG	AH,AL
 5285/A163 : 74 07                      	JZ	CNVNUM			; Yes - Convert number
 5286/A165 : 3C 2B                      	CMP	AL,'+'			; Positive?
 5287/A167 : 74 03                      	JZ	CNVNUM			; Yes - Convert number
 5288/A169 : 9F                         	LAHF
 5289/A16A : 4B                         	DEC	BX			; DEC 'cos GETCHR INCs
 5290/A16B : 9E                         	SAHF
 5291/A16C :                            CNVNUM:
 5292/A16C : E8 A8 FB                   	CALL	RESZER			; Set result to zero
 5293/A16F : 8A E8                      	MOV	CH,AL			; Digits after point counter
 5294/A171 : 8A F0                      	MOV	DH,AL			; Sign of exponent
 5295/A173 : 8A D0                      	MOV	DL,AL			; Exponent of ten
 5296/A175 : F6 D0                      	NOT	AL
 5297/A177 : 8A C8                      	MOV	CL,AL			; Before or after point flag
 5298/A179 :                            MANLP:
 5299/A179 : E8 60 EA                   	CALL	GETCHR			; Get next character
 5300/A17C : 72 5E                      	JC	ADDIG			; Digit - Add to number
 5301/A17E : 3C 2E                      	CMP	AL,'.'
 5302/A180 : 74 1B                      	JZ	DPOINT			; '.' - Flag point
 5303/A182 : 3C 45                      	CMP	AL,'E'
 5304/A184 : 75 1B                      	JNZ	CONEXP			; Not 'E' - Scale number
 5305/A186 : E8 53 EA                   	CALL	GETCHR			; Get next character
 5306/A189 : E8 BF F1                   	CALL	SGNEXP			; Get sign of exponent
 5307/A18C :                            EXPLP:
 5308/A18C : E8 4D EA                   	CALL	GETCHR			; Get next character
 5309/A18F : 72 73                      	JC	EDIGIT			; Digit - Add to exponent
 5310/A191 : FE C6                      	INC	DH			; Is sign negative?
 5311/A193 : 75 0C                      	JNZ	CONEXP			; No - Scale number
 5312/A195 : 32 C0                      	XOR	AL,AL
 5313/A197 : 2A C2                      	SUB	AL,DL			; Negate exponent
 5314/A199 : 8A D0                      	MOV	DL,AL			; And re-save it
 5315/A19B : FE C1                      	INC	CL			; Flag end of number
 5316/A19D :                            DPOINT:
 5317/A19D : FE C1                      	INC	CL			; Flag point passed
 5318/A19F : 74 D8                      	JZ	MANLP			; Zero - Get another digit
 5319/A1A1 :                            CONEXP:
 5320/A1A1 : 53                         	PUSH	BX			; Save code string address
 5321/A1A2 : 8A C2                      	MOV	AL,DL			; Get exponent
 5322/A1A4 : 2A C5                      	SUB	AL,CH			; Subtract digits after point
 5323/A1A6 :                            SCALMI:
 5324/A1A6 : 78 03                      	JS	SCALMI1
 5325/A1A8 : E8 20 00                   	CALL	SCALPL			; Positive - Multiply number
 5326/A1AB :                            SCALMI1:
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 90 - 2023/10/14 12時49分15秒


 5327/A1AB : 79 0F                      	JNS	ENDCON			; Positive - All done
 5328/A1AD : 9F                         	LAHF
 5329/A1AE : 86 E0                      	XCHG	AH,AL
 5330/A1B0 : 50                         	PUSH	AX			; Save number of times to /10
 5331/A1B1 : 86 E0                      	XCHG	AH,AL
 5332/A1B3 : E8 09 FD                   	CALL	DIV10			; Divide by 10
 5333/A1B6 : 58                         	POP	AX			; Restore count
 5334/A1B7 : 86 E0                      	XCHG	AH,AL
 5335/A1B9 : 9E                         	SAHF
 5336/A1BA : FE C0                      	INC	AL			; Count divides
 5337/A1BC :                            ;
 5338/A1BC :                            ENDCON:
 5339/A1BC : 75 E8                      	JNZ	SCALMI			; More to do
 5340/A1BE : 5A                         	POP	DX			; Restore code string address
 5341/A1BF : 58                         	POP	AX			; Restore sign of number
 5342/A1C0 : 86 E0                      	XCHG	AH,AL
 5343/A1C2 : 9E                         	SAHF
 5344/A1C3 : 75 03                      	JNZ	ENDCON1
 5345/A1C5 : E8 2D FE                   	CALL	INVSGN			; Negative - Negate number
 5346/A1C8 :                            ENDCON1:
 5347/A1C8 : 87 DA                      	XCHG	BX,DX			; Code string address to HL
 5348/A1CA : C3                         	RET
 5349/A1CB :                            ;
 5350/A1CB :                            SCALPL:
 5351/A1CB : 75 01                      	JNZ	MULTEN
 5352/A1CD : C3                         	RET				; Exit if no scaling needed
 5353/A1CE :                            MULTEN:
 5354/A1CE :                            ;	LAHF
 5355/A1CE : 86 E0                      	XCHG	AH,AL
 5356/A1D0 : 50                         	PUSH	AX			; Save count
 5357/A1D1 : 86 E0                      	XCHG	AH,AL
 5358/A1D3 : E8 C3 FD                   	CALL	MLSP10			; Multiply number by 10
 5359/A1D6 : 58                         	POP	AX			; Restore count
 5360/A1D7 : 86 E0                      	XCHG	AH,AL
 5361/A1D9 :                            ;	SAHF
 5362/A1D9 : FE C8                      	DEC	AL			; Count multiplies
 5363/A1DB : C3                         	RET
 5364/A1DC :                            ;
 5365/A1DC :                            ADDIG:
 5366/A1DC : 52                         	PUSH	DX			; Save sign of exponent
 5367/A1DD : 8A F0                      	MOV	DH,AL			; Save digit
 5368/A1DF : 8A C5                      	MOV	AL,CH			; Get digits after point
 5369/A1E1 : 12 C1                      	ADC	AL,CL			; Add one if after point
 5370/A1E3 : 8A E8                      	MOV	CH,AL			; Re-save counter
 5371/A1E5 : 51                         	PUSH	CX			; Save point flags
 5372/A1E6 : 53                         	PUSH	BX			; Save code string address
 5373/A1E7 : 52                         	PUSH	DX			; Save digit
 5374/A1E8 : E8 AE FD                   	CALL	MLSP10			; Multiply number by 10
 5375/A1EB : 58                         	POP	AX			; Restore digit
 5376/A1EC : 86 E0                      	XCHG	AH,AL
 5377/A1EE : 9E                         	SAHF
 5378/A1EF : 2C 30                      	SUB	AL,'0'			; Make it absolute
 5379/A1F1 : E8 05 00                   	CALL	RSCALE			; Re-scale number
 5380/A1F4 : 5B                         	POP	BX			; Restore code string address
 5381/A1F5 : 59                         	POP	CX			; Restore point flags
 5382/A1F6 : 5A                         	POP	DX			; Restore sign of exponent
 5383/A1F7 : EB 80                      	JMP	MANLP			; Get another digit
 5384/A1F9 :                            ;
 5385/A1F9 :                            RSCALE:
 5386/A1F9 : E8 03 FE                   	CALL	STAKFP			; Put number on stack
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 91 - 2023/10/14 12時49分15秒


 5387/A1FC : E8 D9 FD                   	CALL	FLGREL			; Digit to add to FPREG
 5388/A1FF :                            PADD:
 5389/A1FF : 59                         	POP	CX			; Restore number
 5390/A200 : 5A                         	POP	DX
 5391/A201 : E9 76 FA                   	JMP	FPADD			; Add BCDE to FPREG and return
 5392/A204 :                            ;
 5393/A204 :                            EDIGIT:
 5394/A204 : 8A C2                      	MOV	AL,DL			; Get digit
 5395/A206 : D0 C0                      	ROL	AL,1			; Times 2
 5396/A208 : D0 C0                      	ROL	AL,1			; Times 4
 5397/A20A : 02 C2                      	ADD	AL,DL			; Times 5
 5398/A20C : D0 C0                      	ROL	AL,1			; Times 10
 5399/A20E : 02 07                      	ADD	AL,[BX]			; Add next digit
 5400/A210 : 2C 30                      	SUB	AL,'0'			; Make it absolute
 5401/A212 : 8A D0                      	MOV	DL,AL			; Save new digit
 5402/A214 : E9 75 FF                   	JMP	EXPLP			; Look for another digit
 5403/A217 :                            ;
 5404/A217 :                            LINEIN:
 5405/A217 : 53                         	PUSH	BX			; Save code string address
 5406/A218 : BB 82 85                   	MOV	BX,INMSG		; Output " in "
 5407/A21B : E8 89 F6                   	CALL	PRS			; Output string at HL
 5408/A21E : 5B                         	POP	BX			; Restore code string address
 5409/A21F :                            PRNTHL:
 5410/A21F : 87 DA                      	XCHG	BX,DX			; Code string address to DE
 5411/A221 : 32 C0                      	XOR	AL,AL
 5412/A223 : B5 98                      	MOV	CH,80H+24		; 24 bits
 5413/A225 : E8 B5 FD                   	CALL	RETINT			; Return the integer
 5414/A228 : BB A4 98                   	MOV	BX,PRNUMS		; Print number string
 5415/A22B : 53                         	PUSH	BX			; Save for return
 5416/A22C :                            NUMASC:
 5417/A22C : BB 33 09                   	MOV	BX,PBUFF		; Convert number to ASCII
 5418/A22F : 53                         	PUSH	BX			; Save for return
 5419/A230 : E8 87 FD                   	CALL	TSTSGN			; Test sign of FPREG
 5420/A233 : C6 07 20                   	MOV	BYTE PTR [BX],' '	; Space at start
 5421/A236 : 79 03                      	JNS	SPCFST			; Positive - Space to start
 5422/A238 : C6 07 2D                   	MOV	BYTE PTR [BX],'-'	; '-' sign at start
 5423/A23B :                            SPCFST:
 5424/A23B : 9F                         	LAHF
 5425/A23C : 43                         	INC	BX			; First byte of number
 5426/A23D : 9E                         	SAHF
 5427/A23E : C6 07 30                   	MOV	BYTE PTR [BX],'0'	; '0' if zero
 5428/A241 : 75 03                      	JNZ	SPCFST1			; Return '0' if zero
 5429/A243 : E9 01 01                   	JMP	JSTZER
 5430/A246 :                            SPCFST1:
 5431/A246 : 53                         	PUSH	BX			; Save buffer address
 5432/A247 : 79 03                      	JNS	SPCFST2
 5433/A249 : E8 A9 FD                   	CALL	INVSGN			; Negate FPREG if negative
 5434/A24C :                            SPCFST2:
 5435/A24C : 32 C0                      	XOR	AL,AL			; Zero A
 5436/A24E : 9F                         	LAHF
 5437/A24F : 86 E0                      	XCHG	AH,AL
 5438/A251 : 50                         	PUSH	AX			; Save it
 5439/A252 : 86 E0                      	XCHG	AH,AL
 5440/A254 : E8 FC 00                   	CALL	RNGTST			; Test number is in range
 5441/A257 :                            SIXDIG:
 5442/A257 : B9 43 91                   	MOV	CX,9143H		; BCDE - 99999.9
 5443/A25A : BA F8 4F                   	MOV	DX,4FF8H
 5444/A25D : E8 15 FE                   	CALL	CMPNUM			; Compare numbers
 5445/A260 : 0A C0                      	OR	AL,AL
 5446/A262 : 7B 21                      	JPO	INRNG			; > 99999.9 - Sort it out	JP PO,INGNG
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 92 - 2023/10/14 12時49分15秒


 5447/A264 : 58                         	POP	AX			; Restore count
 5448/A265 : 86 E0                      	XCHG	AH,AL
 5449/A267 : 9E                         	SAHF
 5450/A268 : E8 63 FF                   	CALL	MULTEN			; Multiply by ten
 5451/A26B : 9F                         	LAHF
 5452/A26C : 86 E0                      	XCHG	AH,AL
 5453/A26E : 50                         	PUSH	AX			; Re-save count
 5454/A26F : 86 E0                      	XCHG	AH,AL
 5455/A271 : EB E4                      	JMP	SIXDIG			; Test it again
 5456/A273 :                            ;
 5457/A273 :                            GTSIXD:
 5458/A273 : E8 49 FC                   	CALL	DIV10			; Divide by 10
 5459/A276 : 58                         	POP	AX			; Get count
 5460/A277 : 86 E0                      	XCHG	AH,AL
 5461/A279 : 9E                         	SAHF
 5462/A27A : FE C0                      	INC	AL			; Count divides
 5463/A27C : 9F                         	LAHF
 5464/A27D : 86 E0                      	XCHG	AH,AL
 5465/A27F : 50                         	PUSH	AX			; Re-save count
 5466/A280 : 86 E0                      	XCHG	AH,AL
 5467/A282 : E8 CE 00                   	CALL	RNGTST			; Test number is in range
 5468/A285 :                            INRNG:
 5469/A285 : E8 E0 F9                   	CALL	ROUND			; Add 0.5 to FPREG
 5470/A288 : FE C0                      	INC	AL
 5471/A28A : E8 3A FE                   	CALL	FPINT			; F.P to integer
 5472/A28D : E8 8B FD                   	CALL	FPBCDE			; Move BCDE to FPREG
 5473/A290 : B9 06 03                   	MOV	CX,0306H		; 1E+06 to 1E-03 range
 5474/A293 : 58                         	POP	AX			; Restore count
 5475/A294 : 86 E0                      	XCHG	AH,AL
 5476/A296 : 9E                         	SAHF
 5477/A297 : 02 C1                      	ADD	AL,CL			; 6 digits before point
 5478/A299 : FE C0                      	INC	AL			; Add one
 5479/A29B : 78 0A                      	JS	MAKNUM			; Do it in 'E' form if < 1E-02
 5480/A29D : 3C 08                      	CMP	AL,6+1+1		; More than 999999 ?
 5481/A29F : 73 06                      	JNC	MAKNUM			; Yes - Do it in 'E' form
 5482/A2A1 : FE C0                      	INC	AL			; Adjust for exponent
 5483/A2A3 : 8A E8                      	MOV	CH,AL			; Exponent of number
 5484/A2A5 : B0 02                      	MOV	AL,2			; Make it zero after
 5485/A2A7 :                            ;
 5486/A2A7 :                            MAKNUM:
 5487/A2A7 : FE C8                      	DEC	AL			; Adjust for digits to do
 5488/A2A9 : FE C8                      	DEC	AL
 5489/A2AB : 5B                         	POP	BX			; Restore buffer addres
 5490/A2AC : 9F                         	LAHF
 5491/A2AD : 86 E0                      	XCHG	AH,AL
 5492/A2AF : 50                         	PUSH	AX			; Save count
 5493/A2B0 : 86 E0                      	XCHG	AH,AL
 5494/A2B2 : BA 6A A3                   	MOV	DX,POWERS		; Powers of ten
 5495/A2B5 : FE CD                      	DEC	CH			; Count digits before point
 5496/A2B7 : 75 0C                      	JNZ	DIGTXT			; Not zero - Do number
 5497/A2B9 : C6 07 2E                   	MOV	BYTE PTR [BX],'.'	; Save point
 5498/A2BC : 9F                         	LAHF
 5499/A2BD : 43                         	INC	BX			; Move on
 5500/A2BE : 9E                         	SAHF
 5501/A2BF : C6 07 30                   	MOV	BYTE PTR [BX],'0'	; Save zero
 5502/A2C2 : 9F                         	LAHF
 5503/A2C3 : 43                         	INC	BX			; Move on
 5504/A2C4 : 9E                         	SAHF
 5505/A2C5 :                            DIGTXT:
 5506/A2C5 : FE CD                      	DEC	CH			; Count digits before point
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 93 - 2023/10/14 12時49分15秒


 5507/A2C7 : C6 07 2E                   	MOV	BYTE PTR [BX],'.'	; Save point in case
 5508/A2CA : 75 03                      	JNZ	DIGTXT1
 5509/A2CC : E8 6B FD                   	CALL	INCHL			; Last digit - move on
 5510/A2CF :                            DIGTXT1:
 5511/A2CF : 51                         	PUSH	CX			; Save digits before point
 5512/A2D0 : 53                         	PUSH	BX			; Save buffer address
 5513/A2D1 : 52                         	PUSH	DX			; Save powers of ten
 5514/A2D2 : E8 55 FD                   	CALL	BCDEFP			; Move FPREG to BCDE
 5515/A2D5 : 5B                         	POP	BX			; Powers of ten table
 5516/A2D6 : B5 2F                      	MOV	CH,'0'-1		; ASCII '0' - 1
 5517/A2D8 :                            TRYAGN:
 5518/A2D8 : FE C5                      	INC	CH			; Count subtractions
 5519/A2DA : 8A C2                      	MOV	AL,DL			; Get LSB
 5520/A2DC : 2A 07                      	SUB	AL,[BX]			; Subtract LSB
 5521/A2DE : 8A D0                      	MOV	DL,AL			; Save LSB
 5522/A2E0 : 9F                         	LAHF
 5523/A2E1 : 43                         	INC	BX
 5524/A2E2 : 9E                         	SAHF
 5525/A2E3 : 8A C6                      	MOV	AL,DH			; Get NMSB
 5526/A2E5 : 1A 07                      	SBB	AL,[BX]			; Subtract NMSB
 5527/A2E7 : 8A F0                      	MOV	DH,AL			; Save NMSB
 5528/A2E9 : 9F                         	LAHF
 5529/A2EA : 43                         	INC	BX
 5530/A2EB : 9E                         	SAHF
 5531/A2EC : 8A C1                      	MOV	AL,CL			; Get MSB
 5532/A2EE : 1A 07                      	SBB	AL,[BX]			; Subtract MSB
 5533/A2F0 : 8A C8                      	MOV	CL,AL			; Save MSB
 5534/A2F2 : 9F                         	LAHF
 5535/A2F3 : 4B                         	DEC	BX			; Point back to start
 5536/A2F4 :                            ;	SAHF
 5537/A2F4 :                            ;	LAHF
 5538/A2F4 : 4B                         	DEC	BX
 5539/A2F5 : 9E                         	SAHF
 5540/A2F6 : 73 E0                      	JNC	TRYAGN			; No overflow - Try aga
 5541/A2F8 : E8 7F FA                   	CALL	PLUCDE			; Restore number
 5542/A2FB : 9F                         	LAHF
 5543/A2FC : 43                         	INC	BX
 5544/A2FD : 9E                         	SAHF				; Start of next number
 5545/A2FE : E8 1A FD                   	CALL	FPBCDE			; Move BCDE to FPREG
 5546/A301 : 87 DA                      	XCHG	BX,DX			; Save point in table
 5547/A303 : 5B                         	POP	BX			; Restore buffer address
 5548/A304 : 88 2F                      	MOV	[BX],CH			; Save digit in buffer
 5549/A306 : 9F                         	LAHF
 5550/A307 : 43                         	INC	BX			; And move on
 5551/A308 : 9E                         	SAHF
 5552/A309 : 59                         	POP	CX			; Restore digit count
 5553/A30A : FE C9                      	DEC	CL			; Count digits
 5554/A30C : 75 B7                      	JNZ	DIGTXT			; More - Do them
 5555/A30E : FE CD                      	DEC	CH			; Any decimal part?
 5556/A310 : 74 0E                      	JZ	DOEBIT			; No - Do 'E' bit
 5557/A312 :                            SUPTLZ:
 5558/A312 :                            ;	LAHF
 5559/A312 : 4B                         	DEC	BX			; Move back through buffer
 5560/A313 :                            ;	SAHF
 5561/A313 : 8A 07                      	MOV	AL,[BX]			; Get character
 5562/A315 : 3C 30                      	CMP	AL,'0'			; '0' character?
 5563/A317 : 74 F9                      	JZ	SUPTLZ			; Yes - Look back for more
 5564/A319 : 3C 2E                      	CMP	AL,'.'			; A decimal point?
 5565/A31B : 74 03                      	JZ	DOEBIT
 5566/A31D : E8 1A FD                   	CALL	INCHL			; Move back over digit
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 94 - 2023/10/14 12時49分15秒


 5567/A320 :                            ;
 5568/A320 :                            DOEBIT:
 5569/A320 : 58                         	POP	AX			; Get 'E' flag
 5570/A321 : 86 E0                      	XCHG	AH,AL
 5571/A323 : 9E                         	SAHF
 5572/A324 : 74 29                      	JZ	NOENED			; No 'E' needed - End buffer
 5573/A326 : C6 07 45                   	MOV	BYTE PTR [BX],'E'	; Put 'E' in buffer
 5574/A329 : 9F                         	LAHF
 5575/A32A : 43                         	INC	BX			; And move on
 5576/A32B : 9E                         	SAHF
 5577/A32C : C6 07 2B                   	MOV	BYTE PTR [BX],'+'	; Put '+' in buffer
 5578/A32F : 79 07                      	JNS	OUTEXP			; Positive - Output exponent
 5579/A331 : C6 07 2D                   	MOV	BYTE PTR [BX],'-'	; Put '-' in buffer
 5580/A334 : F6 D0                      	NOT	AL			; Negate exponent
 5581/A336 : FE C0                      	INC	AL
 5582/A338 :                            OUTEXP:
 5583/A338 : B5 2F                      	MOV	CH,'0'-1		; ASCII '0' - 1
 5584/A33A :                            EXPTEN:
 5585/A33A : FE C5                      	INC	CH			; Count subtractions
 5586/A33C : 2C 0A                      	SUB	AL,10			; Tens digit
 5587/A33E : 73 FA                      	JNC	EXPTEN			; More to do
 5588/A340 : 04 3A                      	ADD	AL,'0'+10		; Restore and make ASCII
 5589/A342 : 9F                         	LAHF
 5590/A343 : 43                         	INC	BX
 5591/A344 : 9E                         	SAHF				; Move on
 5592/A345 : 88 2F                      	MOV	[BX],CH			; Save MSB of exponent
 5593/A347 :                            JSTZER:
 5594/A347 : 9F                         	LAHF
 5595/A348 : 43                         	INC	BX
 5596/A349 : 9E                         	SAHF
 5597/A34A : 88 07                      	MOV	[BX],AL			; Save LSB of exponent
 5598/A34C : 9F                         	LAHF
 5599/A34D : 43                         	INC	BX
 5600/A34E : 9E                         	SAHF
 5601/A34F :                            NOENED:
 5602/A34F : 88 0F                      	MOV	[BX],CL			; Mark end of buffer
 5603/A351 : 5B                         	POP	BX			; Restore code string address
 5604/A352 : C3                         	RET
 5605/A353 :                            ;
 5606/A353 :                            RNGTST:
 5607/A353 : B9 74 94                   	MOV	CX,9474H		; BCDE = 999999.
 5608/A356 : BA F7 23                   	MOV	DX,23F7H
 5609/A359 : E8 19 FD                   	CALL	CMPNUM			; Compare numbers
 5610/A35C : 0A C0                      	OR	AL,AL
 5611/A35E : 5B                         	POP	BX			; Return address to HL
 5612/A35F : 7A 03                      	JPE	RNGTST1			; Too big - Divide by ten	JP PO,GTSIND
 5613/A361 : E9 0F FF                   	JMP	GTSIXD
 5614/A364 :                            RNGTST1:
 5615/A364 : 53                         	PUSH	BX
 5616/A365 : C3                         	RET
 5617/A366 :                            ;	JMP	[BX]			; Otherwise return to caller
 5618/A366 :                            ;
 5619/A366 :                            HALF:
 5620/A366 : 00 00 00 80                	DB	00H,00H,00H,80H 	; 0.5
 5621/A36A :                            ;
 5622/A36A :                            POWERS:
 5623/A36A : A0 86 01                   	DB	0A0H,086H,001H		; 100000
 5624/A36D : 10 27 00                   	DB	010H,027H,000H		; 10000
 5625/A370 : E8 03 00                   	DB	0E8H,003H,000H		; 1000
 5626/A373 : 64 00 00                   	DB	064H,000H,000H		; 100
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 95 - 2023/10/14 12時49分15秒


 5627/A376 : 0A 00 00                   	DB	00AH,000H,000H		; 10
 5628/A379 : 01 00 00                   	DB	001H,000H,000H		; 1
 5629/A37C :                            ;
 5630/A37C :                            NEGAFT:
 5631/A37C : BB F5 9F                   	MOV	BX,INVSGN		; Negate result
 5632/A37F : 8B EC                      	MOV	BP,SP
 5633/A381 : 87 5E 00                   	XCHG	[BP],BX			; To be done after call
 5634/A384 : 53                         	PUSH	BX
 5635/A385 : C3                         	RET
 5636/A386 :                            ;	JMP	[BX]			; Return to caller
 5637/A386 :                            ;
 5638/A386 :                            SQR:
 5639/A386 : E8 76 FC                   	CALL	STAKFP			; Put value on stack
 5640/A389 : BB 66 A3                   	MOV	BX,HALF			; Set power to 1/2
 5641/A38C : E8 89 FC                   	CALL	PHLTFP			; Move 1/2 to FPREG
 5642/A38F :                            ;
 5643/A38F :                            POWER:
 5644/A38F : 59                         	POP	CX			; Get base
 5645/A390 : 5A                         	POP	DX
 5646/A391 : E8 26 FC                   	CALL	TSTSGN			; Test sign of power
 5647/A394 : 8A C5                      	MOV	AL,CH			; Get exponent of base
 5648/A396 : 74 4E                      	JZ	EXP			; Make result 1 if zero
 5649/A398 : 79 07                      	JNS	POWER1			; Positive base - Ok
 5650/A39A : 0A C0                      	OR	AL,AL			; Zero to negative power?
 5651/A39C : 75 03                      	JNZ	POWER1			; Yes - ?/0 Error
 5652/A39E : E9 6E E2                   	JMP	DZERR
 5653/A3A1 :                            POWER1:
 5654/A3A1 : 0A C0                      	OR	AL,AL			; Base zero?
 5655/A3A3 : 75 03                      	JNZ	POWER5			; Yes - Return zero
 5656/A3A5 : E9 71 F9                   	JMP	SAVEXP
 5657/A3A8 :                            POWER5:
 5658/A3A8 : 52                         	PUSH	DX			; Save base
 5659/A3A9 : 51                         	PUSH	CX
 5660/A3AA : 8A C1                      	MOV	AL,CL			; Get MSB of base
 5661/A3AC : 0C 7F                      	OR	AL,01111111B		; Get sign status
 5662/A3AE : E8 79 FC                   	CALL	BCDEFP			; Move power to BCDE
 5663/A3B1 : 79 15                      	JNS	POWER2			; Positive base - Ok
 5664/A3B3 : 52                         	PUSH	DX			; Save power
 5665/A3B4 : 51                         	PUSH	CX
 5666/A3B5 : E8 53 FD                   	CALL	INT			; Get integer of power
 5667/A3B8 : 59                         	POP	CX			; Restore power
 5668/A3B9 : 5A                         	POP	DX
 5669/A3BA : 9F                         	LAHF
 5670/A3BB : 86 E0                      	XCHG	AH,AL
 5671/A3BD : 50                         	PUSH	AX			; MSB of base
 5672/A3BE : 86 E0                      	XCHG	AH,AL
 5673/A3C0 : E8 B2 FC                   	CALL	CMPNUM			; Power an integer?
 5674/A3C3 : 5B                         	POP	BX			; Restore MSB of base
 5675/A3C4 : 8A C7                      	MOV	AL,BH			; but don't affect flags
 5676/A3C6 : D0 D8                      	RCR	AL,1			; Exponent odd or even?
 5677/A3C8 :                            POWER2:
 5678/A3C8 : 5B                         	POP	BX			; Restore MSB and exponent
 5679/A3C9 : 89 1E 30 09                	MOV	[FPREG+2],BX		; Save base in FPREG
 5680/A3CD : 5B                         	POP	BX			; LSBs of base
 5681/A3CE : 89 1E 2E 09                	MOV	[FPREG],BX		; Save in FPREG
 5682/A3D2 : 73 03                      	JNC	POWER3
 5683/A3D4 : E8 A5 FF                   	CALL	NEGAFT			; Odd power - Negate result
 5684/A3D7 :                            POWER3:
 5685/A3D7 : 75 03                      	JNZ	POWER4
 5686/A3D9 : E8 19 FC                   	CALL	INVSGN			; Negative base - Negate it
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 96 - 2023/10/14 12時49分15秒


 5687/A3DC :                            POWER4:
 5688/A3DC : 52                         	PUSH	DX			; Save power
 5689/A3DD : 51                         	PUSH	CX
 5690/A3DE : E8 1C FA                   	CALL	LOG			; Get LOG of base
 5691/A3E1 : 59                         	POP	CX			; Restore power
 5692/A3E2 : 5A                         	POP	DX
 5693/A3E3 : E8 68 FA                   	CALL	FPMULT			; Multiply LOG by power
 5694/A3E6 :                            ;
 5695/A3E6 :                            EXP:
 5696/A3E6 : E8 16 FC                   	CALL	STAKFP			; Put value on stack
 5697/A3E9 : B9 38 81                   	MOV	CX,08138H		; BCDE = 1/Ln(2)
 5698/A3EC : BA 3B AA                   	MOV	DX,0AA3BH
 5699/A3EF : E8 5C FA                   	CALL	FPMULT			; Multiply value by 1/L(2)
 5700/A3F2 : A0 31 09                   	MOV	AL,[FPEXP]		; Get exponent
 5701/A3F5 : 3C 88                      	CMP	AL,80H+8		; Is it in range?
 5702/A3F7 : 72 03                      	JC	EXP1			; No - Test for overflow
 5703/A3F9 : E9 8C FB                   	JMP	OVTST1
 5704/A3FC :                            EXP1:
 5705/A3FC : E8 0C FD                   	CALL	INT			; Get INT of FPREG
 5706/A3FF : 04 80                      	ADD	AL,80H			; For excess 128
 5707/A401 : 04 02                      	ADD	AL,2			; Exponent > 126?
 5708/A403 : 73 03                      	JNC	EXP2			; Yes - Test for overflow
 5709/A405 : E9 80 FB                   	JMP	OVTST1
 5710/A408 :                            EXP2:
 5711/A408 : 9F                         	LAHF
 5712/A409 : 86 E0                      	XCHG	AH,AL
 5713/A40B : 50                         	PUSH	AX			; Save scaling factor
 5714/A40C : 86 E0                      	XCHG	AH,AL
 5715/A40E : BB EC 9D                   	MOV	BX,UNITY		; Point to 1.
 5716/A411 : E8 57 F8                   	CALL	ADDPHL			; Add 1 to FPREG
 5717/A414 : E8 2D FA                   	CALL	MULLN2			; Multiply by LN(2)
 5718/A417 : 58                         	POP	AX			; Restore scaling factor
 5719/A418 : 86 E0                      	XCHG	AH,AL
 5720/A41A : 9E                         	SAHF
 5721/A41B : 59                         	POP	CX			; Restore exponent
 5722/A41C : 5A                         	POP	DX
 5723/A41D : 9F                         	LAHF
 5724/A41E : 86 E0                      	XCHG	AH,AL
 5725/A420 : 50                         	PUSH	AX			; Save scaling factor
 5726/A421 : 86 E0                      	XCHG	AH,AL
 5727/A423 : E8 51 F8                   	CALL	SUBCDE			; Subtract exponent from FPREG
 5728/A426 : E8 CC FB                   	CALL	INVSGN			; Negate result
 5729/A429 : BB 38 A4                   	MOV	BX,EXPTAB		; Coefficient table
 5730/A42C : E8 39 00                   	CALL	SMSER1			; Sum the series
 5731/A42F : BA 00 00                   	MOV	DX,0			; Zero LSBs
 5732/A432 : 59                         	POP	CX			; Scaling factor
 5733/A433 : 8A CE                      	MOV	CL,DH			; Zero MSB
 5734/A435 : E9 16 FA                   	JMP	FPMULT			; Scale result to correct value
 5735/A438 :                            ;
 5736/A438 :                            EXPTAB:
 5737/A438 : 08                         	DB	8                  	; Table used by EXP
 5738/A439 : 40 2E 94 74                	DB	040H,02EH,094H,074H	; -1/7! (-1/504
 5739/A43D : 70 4F 2E 77                	DB	070H,04FH,02EH,077H	;  1/6! ( 1/720
 5740/A441 : 6E 02 88 7A                	DB	06EH,002H,088H,07AH	; -1/5! (-1/120
 5741/A445 : E6 A0 2A 7C                	DB	0E6H,0A0H,02AH,07CH	;  1/4! ( 1/24)
 5742/A449 : 50 AA AA 7E                	DB	050H,0AAH,0AAH,07EH	; -1/3! (-1/6)
 5743/A44D : FF FF 7F 7F                	DB	0FFH,0FFH,07FH,07FH	;  1/2! ( 1/2)
 5744/A451 : 00 00 80 81                	DB	000H,000H,080H,081H	; -1/1! (-1/1)
 5745/A455 : 00 00 00 81                	DB	000H,000H,000H,081H	;  1/0! ( 1/1)
 5746/A459 :                            ;
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 97 - 2023/10/14 12時49分15秒


 5747/A459 :                            SUMSER:
 5748/A459 : E8 A3 FB                   	CALL	STAKFP			; Put FPREG on stack
 5749/A45C : BA 4C 9E                   	MOV	DX,MULT			; Multiply by "X"
 5750/A45F : 52                         	PUSH	DX			; To be done after
 5751/A460 : 53                         	PUSH	BX			; Save address of table
 5752/A461 : E8 C6 FB                   	CALL	BCDEFP			; Move FPREG to BCDE
 5753/A464 : E8 E7 F9                   	CALL	FPMULT			; Square the value
 5754/A467 : 5B                         	POP	BX			; Restore address of table
 5755/A468 :                            SMSER1:
 5756/A468 : E8 94 FB                   	CALL	STAKFP			; Put value on stack
 5757/A46B : 8A 07                      	MOV	AL,[BX]			; Get number of coefficients
 5758/A46D : 9F                         	LAHF
 5759/A46E : 43                         	INC	BX			; Point to start of table
 5760/A46F : 9E                         	SAHF
 5761/A470 : E8 A5 FB                   	CALL	PHLTFP			; Move coefficient to FPREG
 5762/A473 : EB 03                      	JMP	SUMLP1			; Skip "POP AF"
 5763/A475 :                            SUMLP:
 5764/A475 : 58                         	POP	AX			; Restore count
 5765/A476 : 86 E0                      	XCHG	AH,AL
 5766/A478 :                            ;	SAHF
 5767/A478 :                            SUMLP1:
 5768/A478 : 59                         	POP	CX			; Restore number
 5769/A479 : 5A                         	POP	DX
 5770/A47A : FE C8                      	DEC	AL			; Cont coefficients
 5771/A47C : 75 01                      	JNZ	SUMLP2
 5772/A47E : C3                         	RET				; All done
 5773/A47F :                            SUMLP2:
 5774/A47F : 52                         	PUSH	DX			; Save number
 5775/A480 : 51                         	PUSH	CX
 5776/A481 :                            ;	LAHF
 5777/A481 : 86 E0                      	XCHG	AH,AL
 5778/A483 : 50                         	PUSH	AX			; Save count
 5779/A484 : 86 E0                      	XCHG	AH,AL
 5780/A486 : 53                         	PUSH	BX			; Save address in table
 5781/A487 : E8 C4 F9                   	CALL	FPMULT			; Multiply FPREG by BCD
 5782/A48A : 5B                         	POP	BX			; Restore address in table
 5783/A48B : E8 9F FB                   	CALL	LOADFP			; Number at HL to BCDE
 5784/A48E : 53                         	PUSH	BX			; Save address in table
 5785/A48F : E8 E8 F7                   	CALL	FPADD			; Add coefficient to FPREG
 5786/A492 : 5B                         	POP	BX			; Restore address in table
 5787/A493 : EB E0                      	JMP	SUMLP			; More coefficients
 5788/A495 :                            ;
 5789/A495 :                            RND:
 5790/A495 : E8 22 FB                   	CALL	TSTSGN			; Test sign of FPREG
 5791/A498 : BB 68 08                   	MOV	BX,SEED+2		; Random number seed
 5792/A49B : 78 71                      	JS	RESEED			; Negative - Re-seed
 5793/A49D : BB 84 08                   	MOV	BX,LSTRND		; Last random number
 5794/A4A0 : E8 75 FB                   	CALL	PHLTFP			; Move last RND to FPREG
 5795/A4A3 : BB 68 08                   	MOV	BX,SEED+2		; Random number seed
 5796/A4A6 : 75 01                      	JNZ	RND0
 5797/A4A8 : C3                         	RET				; Return if RND(0)
 5798/A4A9 :                            RND0:
 5799/A4A9 : 02 07                      	ADD	AL,[BX]			; Add (SEED)+2)
 5800/A4AB : 24 07                      	AND	AL,00000111B		; 0 to 7
 5801/A4AD : B5 00                      	MOV	CH,0
 5802/A4AF : 88 07                      	MOV	[BX],AL			; Re-save seed
 5803/A4B1 :                            ;	LAHF
 5804/A4B1 : 43                         	INC	BX			; Move to coefficient table
 5805/A4B2 :                            ;	SAHF
 5806/A4B2 : 02 C0                      	ADD	AL,AL			; 4 bytes
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 98 - 2023/10/14 12時49分15秒


 5807/A4B4 : 02 C0                      	ADD	AL,AL			; per entry
 5808/A4B6 : 8A C8                      	MOV	CL,AL			; BC = Offset into table
 5809/A4B8 : 03 D9                      	ADD	BX,CX			; Point to coefficient
 5810/A4BA : E8 70 FB                   	CALL	LOADFP			; Coefficient to BCDE
 5811/A4BD : E8 8E F9                   	CALL	FPMULT			; Multiply FPREG by coefficient
 5812/A4C0 : A0 67 08                   	MOV	AL,[SEED+1]		; Get [SEED+1]
 5813/A4C3 : FE C0                      	INC	AL			; Add 1
 5814/A4C5 : 24 03                      	AND	AL,00000011B		; 0 to 3
 5815/A4C7 : B5 00                      	MOV	CH,0
 5816/A4C9 : 3C 01                      	CMP	AL,1			; Is it zero?
 5817/A4CB : 12 C5                      	ADC	AL,CH			; Yes - Make it 1
 5818/A4CD : A2 67 08                   	MOV	[SEED+1],AL		; Re-save seed
 5819/A4D0 : BB 14 A5                   	MOV	BX,RNDTAB-4		; Addition table
 5820/A4D3 : 02 C0                      	ADD	AL,AL			; 4 bytes
 5821/A4D5 : 02 C0                      	ADD	AL,AL			; per entry
 5822/A4D7 : 8A C8                      	MOV	CL,AL			; BC = Offset into table
 5823/A4D9 : 03 D9                      	ADD	BX,CX			; Point to value
 5824/A4DB : E8 8D F7                   	CALL	ADDPHL			; Add value to FPREG
 5825/A4DE :                            RND1:
 5826/A4DE : E8 49 FB                   	CALL	BCDEFP			; Move FPREG to BCDE
 5827/A4E1 : 8A C2                      	MOV	AL,DL			; Get LSB
 5828/A4E3 : 8A D1                      	MOV	DL,CL			; LSB = MSB
 5829/A4E5 : 34 4F                      	XOR	AL,01001111B		; Fiddle around
 5830/A4E7 : 8A C8                      	MOV	CL,AL			; New MSB
 5831/A4E9 : C6 07 80                   	MOV	BYTE PTR [BX],80H	; Set exponent
 5832/A4EC :                            ;	LAHF
 5833/A4EC : 4B                         	DEC	BX			; Point to MSB
 5834/A4ED :                            ;	SAHF
 5835/A4ED : 8A 2F                      	MOV	CH,[BX]			; Get MSB
 5836/A4EF : C6 07 80                   	MOV	BYTE PTR [BX],80H	; Make value -0.5
 5837/A4F2 : BB 66 08                   	MOV	BX,SEED			; Random number seed
 5838/A4F5 : FE 07                      	INC	BYTE PTR [BX]		; Count seed
 5839/A4F7 : 8A 07                      	MOV	AL,[BX]			; Get seed
 5840/A4F9 : 2C AB                      	SUB	AL,171			; Do it modulo 171
 5841/A4FB : 75 08                      	JNZ	RND2			; Non-zero - Ok
 5842/A4FD : 88 07                      	MOV	[BX],AL			; Zero seed
 5843/A4FF : FE C1                      	INC	CL			; Fillde about
 5844/A501 : FE CE                      	DEC	DH			; with the
 5845/A503 : FE C2                      	INC	DL			; number
 5846/A505 :                            RND2:
 5847/A505 : E8 F1 F7                   	CALL	BNORM			; Normalise number
 5848/A508 : BB 84 08                   	MOV	BX,LSTRND		; Save random number
 5849/A50B : E9 30 FB                   	JMP	FPTHL			; Move FPREG to last and return
 5850/A50E :                            ;
 5851/A50E :                            RESEED:
 5852/A50E : 88 07                      	MOV	[BX],AL			; Re-seed random number
 5853/A510 :                            ;	LAHF
 5854/A510 : 4B                         	DEC	BX
 5855/A511 :                            ;	SAHF
 5856/A511 : 88 07                      	MOV	[BX],AL
 5857/A513 :                            ;	LAHF
 5858/A513 : 4B                         	DEC	BX
 5859/A514 :                            ;	SAHF
 5860/A514 : 88 07                      	MOV	[BX],AL
 5861/A516 : EB C6                      	JMP	RND1			; Return RND seed
 5862/A518 :                            ;
 5863/A518 :                            RNDTAB:
 5864/A518 : 68 B1 46 68                	DB	068H,0B1H,046H,068H	; Table used by RND
 5865/A51C : 99 E9 92 69                	DB	099H,0E9H,092H,069H
 5866/A520 : 10 D1 75 68                	DB	010H,0D1H,075H,068H
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 99 - 2023/10/14 12時49分15秒


 5867/A524 :                            ;
 5868/A524 :                            COS:
 5869/A524 : BB 7A A5                   	MOV	BX,HALFPI		; Point to PI/2
 5870/A527 : E8 41 F7                   	CALL	ADDPHL			; Add it to PPREG
 5871/A52A :                            SIN:
 5872/A52A : E8 D2 FA                   	CALL	STAKFP			; Put angle on stack
 5873/A52D : B9 49 83                   	MOV	CX,8349H		; BCDE = 2 PI
 5874/A530 : BA DB 0F                   	MOV	DX,0FDBH
 5875/A533 : E8 E5 FA                   	CALL	FPBCDE			; Move 2 PI to FPREG
 5876/A536 : 59                         	POP	CX			; Restore angle
 5877/A537 : 5A                         	POP	DX
 5878/A538 : E8 92 F9                   	CALL	DVBCDE			; Divide angle by 2 PI
 5879/A53B : E8 C1 FA                   	CALL	STAKFP			; Put it on stack
 5880/A53E : E8 CA FB                   	CALL	INT			; Get INT of result
 5881/A541 : 59                         	POP	CX			; Restore number
 5882/A542 : 5A                         	POP	DX
 5883/A543 : E8 31 F7                   	CALL	SUBCDE			; Make it 0 <= value < 1
 5884/A546 : BB 7E A5                   	MOV	BX,QUARTR		; Point to 0.25
 5885/A549 : E8 24 F7                   	CALL	SUBPHL			; Subtract value from 0.25
 5886/A54C : E8 6B FA                   	CALL	TSTSGN			; Test sign of value
 5887/A54F : F9                         	STC				; Flag positive
 5888/A550 : 79 08                      	JNS	SIN1			; Positive - Ok
 5889/A552 : E8 13 F7                   	CALL	ROUND			; Add 0.5 to value
 5890/A555 : E8 62 FA                   	CALL	TSTSGN			; Test sign of value
 5891/A558 : 0A C0                      	OR	AL,AL			; Flag negative
 5892/A55A :                            SIN1:
 5893/A55A : 9F                         	LAHF
 5894/A55B : 86 E0                      	XCHG	AH,AL
 5895/A55D : 50                         	PUSH	AX			; Save sign
 5896/A55E : 86 E0                      	XCHG	AH,AL
 5897/A560 : 78 03                      	JS	SIN2
 5898/A562 : E8 90 FA                   	CALL	INVSGN			; Negate value if positive
 5899/A565 :                            SIN2:
 5900/A565 : BB 7E A5                   	MOV	BX,QUARTR		; Point to 0.25
 5901/A568 : E8 00 F7                   	CALL	ADDPHL			; Add 0.25 to value
 5902/A56B : 58                         	POP	AX			; Restore sign
 5903/A56C : 86 E0                      	XCHG	AH,AL
 5904/A56E : 9E                         	SAHF
 5905/A56F : 72 03                      	JC	SIN3
 5906/A571 : E8 81 FA                   	CALL	INVSGN			; Negative - Make positive
 5907/A574 :                            SIN3:
 5908/A574 : BB 82 A5                   	MOV	BX,SINTAB		; Coefficient table
 5909/A577 : E9 DF FE                   	JMP	SUMSER			; Evaluate sum of series
 5910/A57A :                            ;
 5911/A57A :                            HALFPI:
 5912/A57A : DB 0F 49 81                	DB	0DBH,00FH,049H,081H	; 1.5708 (PI/2)
 5913/A57E :                            ;
 5914/A57E :                            QUARTR:
 5915/A57E : 00 00 00 7F                	DB	000H,000H,000H,07FH	; 0.25
 5916/A582 :                            ;
 5917/A582 :                            SINTAB:
 5918/A582 : 05                         	DB	5			; Table used by SIN
 5919/A583 : BA D7 1E 86                	DB	0BAH,0D7H,01EH,086H	; 39.711
 5920/A587 : 64 26 99 87                	DB	064H,026H,099H,087H	;-76.575
 5921/A58B : 58 34 23 87                	DB	058H,034H,023H,087H	; 81.602
 5922/A58F : E0 5D A5 86                	DB	0E0H,05DH,0A5H,086H	;-41.342
 5923/A593 : DA 0F 49 83                	DB	0DAH,00FH,049H,083H	; 6.2832
 5924/A597 :                            ;
 5925/A597 :                            TAN:
 5926/A597 : E8 65 FA                   	CALL	STAKFP			; Put angle on stack
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 100 - 2023/10/14 12時49分15秒


 5927/A59A : E8 8D FF                   	CALL	SIN			; Get SIN of angle
 5928/A59D : 59                         	POP	CX			; Restore angle
 5929/A59E : 5B                         	POP	BX
 5930/A59F : E8 5D FA                   	CALL	STAKFP			; Save SIN of angle
 5931/A5A2 : 87 DA                      	XCHG	BX,DX			; BCDE = Angle
 5932/A5A4 : E8 74 FA                   	CALL	FPBCDE			; Angle to FPREG
 5933/A5A7 : E8 7A FF                   	CALL	COS			; Get COS of angle
 5934/A5AA : E9 1E F9                   	JMP	DIV			; TAN = SIN / COS
 5935/A5AD :                            ;
 5936/A5AD :                            ATN:
 5937/A5AD : E8 0A FA                   	CALL	TSTSGN			; Test sign of value
 5938/A5B0 : 79 03                      	JNS	ATN1
 5939/A5B2 : E8 C7 FD                   	CALL	NEGAFT			; Negate result after if -ve
 5940/A5B5 :                            ATN1:
 5941/A5B5 : 79 03                      	JNS	ATN2
 5942/A5B7 : E8 3B FA                   	CALL	INVSGN			; Negate value if -ve
 5943/A5BA :                            ATN2:
 5944/A5BA : A0 31 09                   	MOV	AL,[FPEXP]		; Get exponent
 5945/A5BD : 3C 81                      	CMP	AL,81H			; Number less than 1?
 5946/A5BF : 72 0E                      	JC	ATN3			; Yes - Get arc tangnt
 5947/A5C1 : B9 00 81                   	MOV	CX,8100H		; BCDE = 1
 5948/A5C4 : 8A F1                      	MOV	DH,CL
 5949/A5C6 : 8A D1                      	MOV	DL,CL
 5950/A5C8 : E8 02 F9                   	CALL	DVBCDE			; Get reciprocal of number
 5951/A5CB : BB 70 9C                   	MOV	BX,SUBPHL		; Sub angle from PI/2
 5952/A5CE : 53                         	PUSH	BX			; Save for angle > 1
 5953/A5CF :                            ATN3:
 5954/A5CF : BB D9 A5                   	MOV	BX,ATNTAB		; Coefficient table
 5955/A5D2 : E8 84 FE                   	CALL	SUMSER			; Evaluate sum of series
 5956/A5D5 : BB 7A A5                   	MOV	BX,HALFPI		; PI/2 - angle in case > 1
 5957/A5D8 : C3                         	RET				; Number > 1 - Sub from PI/2
 5958/A5D9 :                            ;
 5959/A5D9 :                            ATNTAB:
 5960/A5D9 : 09                         	DB	9			; Table used by ATN
 5961/A5DA : 4A D7 3B 78                	DB	04AH,0D7H,03BH,078H	; 1/17
 5962/A5DE : 02 6E 84 7B                	DB	002H,06EH,084H,07BH	;-1/15
 5963/A5E2 : FE C1 2F 7C                	DB	0FEH,0C1H,02FH,07CH	; 1/13
 5964/A5E6 : 74 31 9A 7D                	DB	074H,031H,09AH,07DH	;-1/11
 5965/A5EA : 84 3D 5A 7D                	DB	084H,03DH,05AH,07DH	; 1/9
 5966/A5EE : C8 7F 91 7E                	DB	0C8H,07FH,091H,07EH	;-1/7
 5967/A5F2 : E4 BB 4C 7E                	DB	0E4H,0BBH,04CH,07EH	; 1/5
 5968/A5F6 : 6C AA AA 7F                	DB	06CH,0AAH,0AAH,07FH	;-1/3
 5969/A5FA : 00 00 00 81                	DB	000H,000H,000H,081H	; 1/1
 5970/A5FE :                            ;
 5971/A5FE :                            
 5972/A5FE :                            ARET:
 5973/A5FE : C3                         	RET				; A RETurn instruction
 5974/A5FF :                            ;
 5975/A5FF :                            CLS:
 5976/A5FF : B0 0C                      	MOV	AL,CLRSCRN		; ASCII Clear screen
 5977/A601 : E9 5A DA                   	JMP	putch			; Output character
 5978/A604 :                            ;
 5979/A604 :                            WIDTH:
 5980/A604 : E8 29 F6                   	CALL	GETINT			; Get integer 0-255
 5981/A607 : 8A C2                      	MOV	AL,DL			; Width to A
 5982/A609 : A2 8C 08                   	MOV	[LWIDTH],AL		; Set width
 5983/A60C : C3                         	RET
 5984/A60D :                            ;
 5985/A60D :                            LINES:
 5986/A60D : E8 9C EB                   	CALL	GETNUM			; Get a number
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 101 - 2023/10/14 12時49分15秒


 5987/A610 : E8 BE E6                   	CALL	DEINT			; Get integer -32768 to 32767
 5988/A613 : 89 16 90 08                	MOV	[LINESC],DX		; Set lines counter
 5989/A617 : 89 16 92 08                	MOV	[LINESN],DX		; Set lines number
 5990/A61B : C3                         	RET
 5991/A61C :                            ;
 5992/A61C :                            DEEK:
 5993/A61C : E8 B2 E6                   	CALL	DEINT			; Get integer -32768 to 32767
 5994/A61F : 52                         	PUSH	DX			; Save number
 5995/A620 : 5B                         	POP	BX			; Number to HL
 5996/A621 : 8A 2F                      	MOV	CH,[BX]			; Get LSB of contents
 5997/A623 :                            ;	LAHF
 5998/A623 : 43                         	INC	BX
 5999/A624 :                            ;	SAHF
 6000/A624 : 8A 07                      	MOV	AL,[BX]			; Get MSB of contents
 6001/A626 : E9 F9 F0                   	JMP	ABPASS			; Return integer AB
 6002/A629 :                            ;
 6003/A629 :                            DOKE:
 6004/A629 : E8 80 EB                   	CALL	GETNUM			; Get a number
 6005/A62C : E8 A2 E6                   	CALL	DEINT			; Get integer -32768 to 32767
 6006/A62F : 52                         	PUSH	DX			; Save address
 6007/A630 : E8 90 E3                   	CALL	CHKSYN			; Make sure ',' follows
 6008/A633 : 2C                         	DB	','
 6009/A634 : E8 75 EB                   	CALL	GETNUM			; Get a number
 6010/A637 : E8 97 E6                   	CALL	DEINT			; Get integer -32768 to 32767
 6011/A63A : 8B EC                      	MOV	BP,SP
 6012/A63C : 87 5E 00                   	XCHG	[BP],BX			; Save value,get address
 6013/A63F : 88 17                      	MOV	[BX],DL			; Save LSB of value
 6014/A641 :                            ;	LAHF
 6015/A641 : 43                         	INC	BX
 6016/A642 :                            ;	SAHF
 6017/A642 : 88 37                      	MOV	[BX],DH			; Save MSB of value
 6018/A644 : 5B                         	POP	BX			; Restore code string address
 6019/A645 : C3                         	RET
 6020/A646 :                            ;
 6021/A646 :                            ; HEX$(nn) Convert 16 bit number to Hexadecimal string
 6022/A646 :                            ;
 6023/A646 :                            HEX:
 6024/A646 : E8 66 EB                   	CALL	TSTNUM			; Verify it's a number
 6025/A649 : E8 85 E6                   	CALL	DEINT			; Get integer -32768 to 32767
 6026/A64C : 51                         	PUSH	CX			; Save contents of BC
 6027/A64D : BB 33 09                   	MOV	BX,PBUFF
 6028/A650 : 8A C6                      	MOV	AL,DH			; Get high order into A
 6029/A652 : 3C 00                      	CMP	AL,0
 6030/A654 : 74 0F                      	JZ	HEX2			; Skip output if both high digits are zero
 6031/A656 : E8 33 00                   	CALL	BYT2ASC			; Convert D to ASCII
 6032/A659 : 8A C5                      	MOV	AL,CH
 6033/A65B : 3C 30                      	CMP	AL,'0'
 6034/A65D : 74 03                      	JZ	HEX1			; Don't store high digit if zero
 6035/A65F : 88 2F                      	MOV	[BX],CH			; Store it to PBUFF
 6036/A661 :                            ;	LAHF
 6037/A661 : 43                         	INC	BX			; Next location
 6038/A662 :                            ;	SAHF
 6039/A662 :                            HEX1:
 6040/A662 : 88 0F                      	MOV	[BX],CL			; Store C to PBUFF+1
 6041/A664 :                            ;	LAHF
 6042/A664 : 43                         	INC	BX			; Next location
 6043/A665 :                            ;	SAHF
 6044/A665 :                            HEX2:
 6045/A665 : 8A C2                      	MOV	AL,DL			; Get lower byte
 6046/A667 : E8 22 00                   	CALL	BYT2ASC			; Convert E to ASCII
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 102 - 2023/10/14 12時49分15秒


 6047/A66A : 8A C6                      	MOV	AL,DH
 6048/A66C : 3C 00                      	CMP	AL,0
 6049/A66E : 75 06                      	JNZ	HEX3			; If upper byte was not zero then always print lower byte
 6050/A670 : 8A C5                      	MOV	AL,CH
 6051/A672 : 3C 30                      	CMP	AL,'0'			; If high digit of lower byte is zero then don't print
 6052/A674 : 74 05                      	JZ	HEX4
 6053/A676 :                            HEX3:
 6054/A676 : 88 2F                      	MOV	[BX],CH			; to PBUFF+2
 6055/A678 : 9F                         	LAHF
 6056/A679 : 43                         	INC	BX			; Next location
 6057/A67A : 9E                         	SAHF
 6058/A67B :                            HEX4:
 6059/A67B : 88 0F                      	MOV	[BX],CL			; to PBUFF+3
 6060/A67D :                            ;	LAHF
 6061/A67D : 43                         	INC	BX			; PBUFF+4 to zero
 6062/A67E :                            ;	SAHF
 6063/A67E : 32 C0                      	XOR	AL,AL			; Terminating character
 6064/A680 : 88 07                      	MOV	[BX],AL			; Store zero to terminate
 6065/A682 :                            ;	LAHF
 6066/A682 : 43                         	INC	BX			; Make sure PBUFF is terminated
 6067/A683 :                            ;	SAHF
 6068/A683 : 88 07                      	MOV	[BX],AL			; Store the double zero there
 6069/A685 : 59                         	POP	CX			; Get BC back
 6070/A686 : BB 33 09                   	MOV	BX,PBUFF		; Reset to start of PBUFF
 6071/A689 : E9 7F F1                   	JMP	STR1			; Convert the PBUFF to a string and return it
 6072/A68C :                            ;
 6073/A68C :                            BYT2ASC:
 6074/A68C : 8A E8                      	MOV	CH,AL			; Save original value
 6075/A68E : 24 0F                      	AND	AL,0FH			; Strip off upper nybbl
 6076/A690 : 3C 0A                      	CMP	AL,0AH			; 0-9?
 6077/A692 : 72 02                      	JC	ADD30			; If A-F, add 7 more
 6078/A694 : 04 07                      	ADD	AL,07H			; Bring value up to ASCII A-F
 6079/A696 :                            ADD30:
 6080/A696 : 04 30                      	ADD	AL,'0'			; And make ASCII
 6081/A698 : 8A C8                      	MOV	CL,AL			; Save converted char to C
 6082/A69A : 8A C5                      	MOV	AL,CH			; Retrieve original value
 6083/A69C : D0 C8                      	ROR	AL,1			; and Rotate it right
 6084/A69E : D0 C8                      	ROR	AL,1
 6085/A6A0 : D0 C8                      	ROR	AL,1
 6086/A6A2 : D0 C8                      	ROR	AL,1
 6087/A6A4 : 24 0F                      	AND	AL,0FH			; Mask off upper nybble
 6088/A6A6 : 3C 0A                      	CMP	AL,0AH			; 0-9? < A hex?
 6089/A6A8 : 72 02                      	JC	ADD301			; Skip Add 7
 6090/A6AA : 04 07                      	ADD	AL,07H			; Bring it up to ASCII A-F
 6091/A6AC :                            ADD301:
 6092/A6AC : 04 30                      	ADD	AL,'0'			; And make it full ASCII
 6093/A6AE : 8A E8                      	MOV	CH,AL			; Store high order byte
 6094/A6B0 : C3                         	RET
 6095/A6B1 :                            ;
 6096/A6B1 :                            ; Convert "&Hnnnn" to FPREG
 6097/A6B1 :                            ; Gets a character from (HL) checks for Hexadecimal ASCII numbers "&Hnnnn"
 6098/A6B1 :                            ; Char is in A, NC if char is;<=>?@ A-z, CY is set if 0-9
 6099/A6B1 :                            HEXTFP:
 6100/A6B1 : 87 DA                      	XCHG	BX,DX			; Move code string pointer to DE
 6101/A6B3 : BB 00 00                   	MOV	BX,0000H		; Zero out the value
 6102/A6B6 : E8 17 00                   	CALL	GETHEX			; Check the number for valid hex
 6103/A6B9 : 72 40                      	JC	HXERR			; First value wasn't hex, HX error
 6104/A6BB : EB 05                      	JMP	HEXLP1			; Convert first character
 6105/A6BD :                            HEXLP:
 6106/A6BD : E8 10 00                   	CALL	GETHEX			; Get second and addtional characters
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 103 - 2023/10/14 12時49分15秒


 6107/A6C0 : 72 2D                      	JC	HEXIT			; Exit if not a hex character
 6108/A6C2 :                            HEXLP1:
 6109/A6C2 : 03 DB                      	ADD	BX,BX			; Rotate 4 bits to the left
 6110/A6C4 : 03 DB                      	ADD	BX,BX
 6111/A6C6 : 03 DB                      	ADD	BX,BX
 6112/A6C8 : 03 DB                      	ADD	BX,BX
 6113/A6CA : 0A C3                      	OR	AL,BL			; Add in D0-D3 into L
 6114/A6CC : 8A D8                      	MOV	BL,AL			; Save new value
 6115/A6CE : EB ED                      	JMP	HEXLP			; And continue until all hex characters are in
 6116/A6D0 :                            ;
 6117/A6D0 :                            GETHEX:
 6118/A6D0 :                            ;	LAHF
 6119/A6D0 : 42                         	INC	DX			; Next location
 6120/A6D1 :                            ;	SAHF
 6121/A6D1 : 87 DA                      	XCHG	BX,DX
 6122/A6D3 : 8A 07                      	MOV	AL,[BX]
 6123/A6D5 : 87 DA                      	XCHG	BX,DX			; Load character at pointer
 6124/A6D7 : 3C 20                      	CMP	AL,' '
 6125/A6D9 : 74 F5                      	JZ	GETHEX			; Skip spaces
 6126/A6DB : 2C 30                      	SUB	AL,'0'			; Get absolute value
 6127/A6DD : 73 01                      	JNC	GETHEX1
 6128/A6DF : C3                         	RET				; < "0", error
 6129/A6E0 :                            GETHEX1:
 6130/A6E0 : 3C 0A                      	CMP	AL,0AH
 6131/A6E2 : 72 07                      	JC	NOSUB7			; Is already in the range 0-9
 6132/A6E4 : 2C 07                      	SUB	AL,07H			; Reduce to A-F
 6133/A6E6 : 3C 0A                      	CMP	AL,0AH			; Value should be $0A-$0F at this point
 6134/A6E8 : 73 01                      	JNC	NOSUB7
 6135/A6EA : C3                         	RET				; CY set if was :		; < = > ? @
 6136/A6EB :                            ;
 6137/A6EB :                            NOSUB7:
 6138/A6EB : 3C 10                      	CMP	AL,10H			; > Greater than "F"?
 6139/A6ED : F5                         	CMC
 6140/A6EE : C3                         	RET				; CY set if it wasn't valid hex
 6141/A6EF :                            ;
 6142/A6EF :                            HEXIT:
 6143/A6EF : 87 DA                      	XCHG	BX,DX			; Value into DE, Code string into HL
 6144/A6F1 : 8A C6                      	MOV	AL,DH			; Load DE into AC
 6145/A6F3 : 8A CA                      	MOV	CL,DL			; For prep to
 6146/A6F5 : 53                         	PUSH	BX
 6147/A6F6 : E8 27 F0                   	CALL	ACPASS			; ACPASS to set AC as integer into FPREG
 6148/A6F9 : 5B                         	POP	BX
 6149/A6FA : C3                         	RET
 6150/A6FB :                            ;
 6151/A6FB :                            HXERR:
 6152/A6FB : B2 26                      	MOV	DL,HX			; ?HEX Error
 6153/A6FD : E9 25 DF                   	JMP	ERROR
 6154/A700 :                            ;
 6155/A700 :                            ; BIN$(NN) Convert integer to a 1-16 char binary string
 6156/A700 :                            BIN:
 6157/A700 : E8 AC EA                   	CALL	TSTNUM			; Verify it's a number
 6158/A703 : E8 CB E5                   	CALL	DEINT			; Get integer -32768 to 32767
 6159/A706 :                            BIN2:
 6160/A706 : 51                         	PUSH	CX			; Save contents of BC
 6161/A707 : BB 33 09                   	MOV	BX,PBUFF
 6162/A70A : B5 11                      	MOV	CH,17			; One higher than max char count
 6163/A70C :                            ZEROSUP:				; Suppress leading zero
 6164/A70C : FE CD                      	DEC	CH			; Max 16 chars
 6165/A70E : 8A C5                      	MOV	AL,CH
 6166/A710 : 3C 01                      	CMP	AL,01H
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 104 - 2023/10/14 12時49分15秒


 6167/A712 : 74 06                      	JZ	BITOUT			; Always output at least one character
 6168/A714 :                            ;	RCL	DL,1
 6169/A714 :                            ;	RCL	DH,1
 6170/A714 : D1 D2                      	RCL	DX,1
 6171/A716 : 73 F4                      	JNC	ZEROSUP
 6172/A718 : EB 02                      	JMP	BITOUT2
 6173/A71A :                            BITOUT:
 6174/A71A :                            ;	RCL	DL,1
 6175/A71A :                            ;	RCL	DH,1
 6176/A71A : D1 D2                      	RCL	DX,1
 6177/A71C :                            BITOUT2:
 6178/A71C : B0 30                      	MOV	AL,'0'			; Char for '0'
 6179/A71E : 14 00                      	ADC	AL,0			; If carry set then '0' --> '1'
 6180/A720 : 88 07                      	MOV	[BX],AL
 6181/A722 :                            ;	LAHF
 6182/A722 : 43                         	INC	BX
 6183/A723 :                            ;	SAHF
 6184/A723 : FE CD                      	DEC	CH
 6185/A725 : 75 F3                      	JNZ	BITOUT
 6186/A727 : 32 C0                      	XOR	AL,AL			; Terminating character
 6187/A729 : 88 07                      	MOV	[BX],AL			; Store zero to terminate
 6188/A72B :                            ;	LAHF
 6189/A72B : 43                         	INC	BX			; Make sure PBUFF is terminated
 6190/A72C :                            ;	SAHF
 6191/A72C : 88 07                      	MOV	[BX],AL			; Store the double zero
 6192/A72E : 59                         	POP	CX
 6193/A72F : BB 33 09                   	MOV	BX,PBUFF
 6194/A732 : E9 D6 F0                   	JMP	STR1
 6195/A735 :                            ;
 6196/A735 :                            ; Convert "&Bnnnn" to FPREG
 6197/A735 :                            ; Gets a character from (HL) checks for Binary ASCII numbers "&Bnnnn"
 6198/A735 :                            BINTFP:
 6199/A735 : 87 DA                      	XCHG	BX,DX			; Move code string pointer
 6200/A737 : BB 00 00                   	MOV	BX,0000H		; Zero out the value
 6201/A73A : E8 1B 00                   	CALL	CHKBIN			; Check the number for valid bin
 6202/A73D : 72 2D                      	JC	BINERR			; First value wasn't bin, HX error
 6203/A73F :                            BINIT:
 6204/A73F : 2C 30                      	SUB	AL,'0'
 6205/A741 : 03 DB                      	ADD	BX,BX			; Rotate HL left
 6206/A743 : 0A C3                      	OR	AL,BL
 6207/A745 : 8A D8                      	MOV	BL,AL
 6208/A747 : E8 0E 00                   	CALL	CHKBIN			; Get second and addtional characters
 6209/A74A : 73 F3                      	JNC	BINIT			; Process if a bin character
 6210/A74C : 87 DA                      	XCHG	BX,DX			; Value into DE, Code string into HL
 6211/A74E : 8A C6                      	MOV	AL,DH			; Load DE into AC
 6212/A750 : 8A CA                      	MOV	CL,DL			; For prep to
 6213/A752 : 53                         	PUSH	BX
 6214/A753 : E8 CA EF                   	CALL	ACPASS			; ACPASS to set AC as integer into FPREG
 6215/A756 : 5B                         	POP	BX
 6216/A757 : C3                         	RET
 6217/A758 :                            ;
 6218/A758 :                            ; Char is in A, NC if char is 0 or 1
 6219/A758 :                            CHKBIN:
 6220/A758 :                            ;	LAHF
 6221/A758 : 42                         	INC	DX
 6222/A759 :                            ;	SAHF
 6223/A759 : 87 DA                      	XCHG	BX,DX
 6224/A75B : 8A 07                      	MOV	AL,[BX]
 6225/A75D : 87 DA                      	XCHG	BX,DX
 6226/A75F : 3C 20                      	CMP	AL,' '
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 105 - 2023/10/14 12時49分15秒


 6227/A761 : 74 F5                      	JZ	CHKBIN			; Skip spaces
 6228/A763 : 3C 30                      	CMP	AL,'0'			; Set C if < '0'
 6229/A765 : 73 01                      	JNC	CHKBIN1
 6230/A767 : C3                         	RET
 6231/A768 :                            CHKBIN1:
 6232/A768 : 3C 32                      	CMP	AL,'2'
 6233/A76A : F5                         	CMC				; Set C if > '1'
 6234/A76B : C3                         	RET
 6235/A76C :                            ;
 6236/A76C :                            BINERR:
 6237/A76C : B2 28                      	MOV	DL,BN			; ?BIN Error
 6238/A76E : E9 B4 DE                   	JMP	ERROR
 6239/A771 :                            ;
 6240/A771 :                            JJUMP1:
 6241/A771 : E9 9F DA                   	JMP	CSTART			; Go and initialise
 6242/A774 :                            ;
 6243/A774 :                            MONITR:
 6244/A774 : FA                         	CLI				; Clear Interrupt flag
 6245/A775 : E9 88 18                   	JMP	0C000H			; Restart (Normally Monitor)
 6246/A778 :                            ;
 6247/A778 :                            INITST:
 6248/A778 : B0 00                      	MOV	AL,0			; Clear break flag
 6249/A77A : A2 97 08                   	MOV	[BRKFLG],AL
 6250/A77D : E9 9B DA                   	JMP	INIT
 6251/A780 :                            ;
 6252/A780 :                            TSTBIT:
 6253/A780 :                            ;	LAHF
 6254/A780 : 86 E0                      	XCHG	AH,AL
 6255/A782 : 50                         	PUSH	AX			; Save bit mask
 6256/A783 : 86 E0                      	XCHG	AH,AL
 6257/A785 : 22 C5                      	AND	AL,CH			; Get common bits
 6258/A787 : 59                         	POP	CX			; Restore bit mask
 6259/A788 : 3A C5                      	CMP	AL,CH           	; Same bit set?
 6260/A78A : B0 00                      	MOV	AL,0			; Return 0 in A
 6261/A78C : C3                         	RET
 6262/A78D :                            ;
 6263/A78D :                            OUTNCR:
 6264/A78D : E8 4C E2                   	CALL	OUTC			; Output character in A
 6265/A790 : E9 CF E7                   	JMP	PRCRLF			; Output CRLF
 6266/A793 :                            ;
 6267/A793 :                            
 6268/A793 :                            ;	Reset
 6269/FFF0 :                            	ORG	0FFF0h
 6270/FFF0 : EA 81 80 00 00             	JMPF	0000:start
 6271/FFF5 :                            
 6272/FFF5 :                            	END
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 106 - 2023/10/14 12時49分15秒


  Symbol Table (* = unused):
  --------------------------

 ABPASS :                      9722 C |  ABS :                         9FEF C |
*ACCSUM :                      8CAA C |  ACPASS :                      9720 C |
 ADD30 :                      0A696 C |  ADD301 :                     0A6AC C |
 ADDEXP :                      9F5D C |  ADDEXP1 :                     9F7F C |
 ADDIG :                      0A1DC C |  ADDPHL :                      9C6B C |
 ALLFOL :                      9B24 C |  ALLFOL1 :                     9B26 C |
 ANTVLU :                      908C C |
*ARCHITECTURE :                                      "aarch64-apple-darwin" - |
*ARET :                       0A5FE C |  ARLDSV :                      95AE C |
 ARLDSV1 :                     95B5 C |  ARREND :                       924 - |
 ARRLP :                       9958 C |  ASC :                         9AE1 C |
 ASCTFP :                     0A15B C |  ASPCS :                       8FC5 C |
 ATN :                        0A5AD C |  ATN1 :                       0A5B5 C |
 ATN2 :                       0A5BA C |  ATN3 :                       0A5CF C |
 ATNTAB :                     0A5D9 C |  ATOH :                        8CF0 C |
 BADINP :                      8FEC C |  BADINP1 :                     8FF6 C |
 BAKSTK :                      8593 C |  BAKTMP :                      9AB7 C |
 BAKTMP1 :                     9AC9 C |  BASTXT :                       8A8 - |
 BCDEFP :                     0A02A C |  BFREE :                       82AE C |
 BIN :                        0A700 C | *BIN2 :                       0A706 C |
 BINERR :                     0A76C C |  BINIT :                      0A73F C |
 BINTFP :                     0A735 C |  BITOUT :                     0A71A C |
 BITOUT2 :                    0A71C C |  BKSP :                           8 - |
 BN :                            28 - |  BNORM :                       9CF9 C |
 BNRMLP :                      9CFF C | *BR3INS :                        0C D |
 BRK :                         8C37 C |  BRKFLG :                       897 - |
 BRKLIN :                       918 - |  BRKMSG :                      858D C |
 BRKRET :                      82A0 C | *BRK_FLG :                        4 D |
*BRVINS :                        10 D |  BS :                            10 - |
 BSERR :                       9602 C |  BUFFER :                       8AB - |
 BUFSIZ :                        80 - |  BYT2ASC :                    0A68C C |
 BYTSFT :                      9EB6 C | *CASESENSITIVE :                  0 - |
 CFEVAL :                      951B C |  CHARTY :                      94AC C |
 CHEKFN :                      97F2 C |  CHKBIN :                     0A758 C |
 CHKBIN1 :                    0A768 C |  CHKCHR :                      8202 C |
*CHKINS :                        14 D |  CHKLTR :                      8CBB C |
 CHKLTR1 :                     8CC2 C |  CHKSTK :                      85DD C |
 CHKSUM :                       894 - |  CHKSYN :                      89C3 C |
 CHKSYN1 :                     89D9 C |  CHKTYP :                      91B4 C |
 CHKTYP1 :                     91BE C |  CHR :                         9AFB C |
 CLEAR :                       8D29 C |  CLEAR1 :                      8D2E C |
 CLEAR2 :                      8D4E C |  CLOTST :                      8A1E C |
 CLOTST1 :                     8A28 C |  CLREG :                       87C2 C |
 CLRPTR :                      878A C |  CLRSCRN :                       0C - |
 CLS :                        0A5FF C |  CMPFP :                      0A09C C |
 CMPFP1 :                     0A0A6 C |  CMPFP2 :                     0A0B0 C |
 CMPFP3 :                     0A0BA C |  CMPFP4 :                     0A0C4 C |
 CMPLG1 :                      93CD C |  CMPLG2 :                      93E7 C |
 CMPLOG :                      93CB C |  CMPNUM :                     0A075 C |
 CMPNUM1 :                    0A07E C |  CMPNUM2 :                    0A08A C |
 CMPNUM3 :                    0A094 C |  CMPRES :                      9443 C |
 CMPSTR :                      9414 C |  CMPSTR1 :                     941B C |
 CMPSTR2 :                     9422 C |  CMPSTR3 :                     942B C |
 CN :                            20 - |  CNVNUM :                     0A16C C |
 COLD :                        8208 C |  COMMAN :                       88D - |
 COMPL :                       9D93 C |  CONCAT :                      9A14 C |
 CONCAT1 :                     9A3B C |  CONEXP :                     0A1A1 C |
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 107 - 2023/10/14 12時49分15秒


 CONPOS :                      9CF4 C | *CONSTPI :        3.141592653589793 - |
 CONT :                        8C84 C |  CONT1 :                       8C93 C |
 CONTAD :                       91E - |  CONVAR :                      92E5 C |
 COPY :                        8223 C |  COS :                        0A524 C |
 COUNT :                       8AB1 C |  COUNT1 :                      8AC5 C |
 CPDEHL :                      89B7 C |  CPDEHL1 :                     89BE C |
 CPYLIT :                      88D2 C |  CR :                            0D - |
 CRARLP :                      9638 C |  CREARY :                      9607 C |
 CREARY1 :                     9613 C |  CRESTR :                      8E83 C |
 CRESTR1 :                     8E84 C |  CRNCLP :                      87FF C |
 CRNCLP1 :                     8808 C |  CRNCLP2 :                     8811 C |
 CRNCLP3 :                     8818 C |  CRNCLP4 :                     8824 C |
 CRNCLP5 :                     882C C |  CRTMST :                      9837 C |
 CRTST :                       984C C |  CRTSTE :                      9869 C |
 CRTSTE1 :                     9870 C |  CRUNCH :                      87F5 C |
 CSTART :                      8213 C |  CTLOFG :                       88F - |
 CTRLC :                          3 - |  CTRLG :                          7 - |
 CTRLO :                         0F - |  CTRLQ :                         11 - |
 CTRLR :                         12 - |  CTRLS :                         13 - |
 CTRLU :                         15 - |  CUROPR :                       90F - |
 CURPOS :                       8F5 - |  DATA :                        8E0E C |
*DATE :                "2023/10/14" - |  DATFLG :                       8F8 - |
 DATLIN :                       913 - |  DATSNR :                      8603 C |
 DCBCDE :                     0A0FD C |  DCBCDE1 :                    0A107 C |
 DDERR :                       8617 C |  DEEK :                       0A61C C |
 DEF :                         9739 C |  DEFSIZ :                      9641 C |
 DEFSIZ1 :                     9671 C |  DEINT :                       8CD1 C |
 DEINT1 :                      8CDB C |  DEL :                           7F - |
 DELCHR :                      891D C |  DEPINT :                      8CCC C |
 DETHL4 :                     0A041 C |  DETHLB :                     0A043 C |
*DEVERR :                         0 D |  DIGTXT :                     0A2C5 C |
 DIGTXT1 :                    0A2CF C |  DIM :                         9478 C |
 DIMRET :                      946D C |  DIMRET1 :                     9474 C |
 DINPOS :                      8A15 C |  DIV :                         9ECB C |
 DIV1 :                         84F - |  DIV10 :                       9EBF C |
 DIV2 :                         855 - |  DIV3 :                         85B - |
 DIV4 :                         85F - |  DIVLP :                       9EFF C |
 DIVSUP :                       84E - |  DOAGN :                       87E3 C |
 DOCOM :                       8F8A C |  DOCOM1 :                      8F99 C |
 DODEL :                       88FA C |  DOEBIT :                     0A320 C |
 DOFN :                        9775 C |  DOFN1 :                       9797 C |
 DOFN2 :                       97CC C |  DOKE :                       0A629 C |
 DONULL :                      8F6C C |  DOSPC :                       8FBF C |
 DOTAB :                       8FA3 C |  DPOINT :                     0A19D C |
 DTSTR :                       9853 C |  DVBCDE :                      9ECD C |
 DVBCDE1 :                     9ED5 C |  DZ :                            14 - |
 DZERR :                       860F C |  ECHDEL :                      890F C |
 ECHDEL1 :                     8911 C |  EDIGIT :                     0A204 C |
*EMEM :                           0 - |  EMROM :                       8200 - |
 ENDBUF :                      88E2 C |  ENDCON :                     0A1BC C |
 ENDCON1 :                    0A1C8 C |  ENDDIM :                      96EF C |
 ENDINP :                      8F5C C |  ENDNAM :                      94A2 C |
 ENDPRG :                      8C4F C |  ENFMEM :                      85EA C |
 ENFMEM1 :                     85EB C |  ERRIN :                       8648 C |
 ERRIN1 :                      865A C |  ERRLIN :                       91C - |
 ERRMSG :                      857B C |  ERROR :                       8625 C |
 ERRORS :                      84EC C |  ESC :                           1B - |
 EVAL :                        91C5 C |  EVAL1 :                       91CA C |
 EVAL2 :                       91D3 C |  EVAL3 :                       91D7 C |
 EVAL4 :                       91E5 C |  EVLPAR :                      92CB C |
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 108 - 2023/10/14 12時49分15秒


 EVNOT :                       9451 C |  EXCUTE :                      8BAD C |
 EXP :                        0A3E6 C |  EXP1 :                       0A3FC C |
 EXP2 :                       0A408 C |  EXPLP :                      0A18C C |
 EXPTAB :                     0A438 C |  EXPTEN :                     0A33A C |
 EXTIG :                       9103 C | *FALSE :                          0 - |
 FANDT :                       913E C |  FC :                             8 - |
 FCERR :                       8CEB C |  FDTLP :                       9114 C |
 FDTLP1 :                      912C C |  FINDEL :                      96AC C |
 FLGDIF :                      9FCD C |  FLGDIF1 :                     9FD2 C |
 FLGREL :                      9FD8 C |  FNARG :                        92A - |
 FNCTAB :                      8336 C |  FNDARY :                      95BB C |
 FNDARY1 :                     95BD C |  FNDELP :                      96B7 C |
 FNDELP1 :                     96B8 C |  FNDELP2 :                     96D5 C |
 FNDEND :                      8745 C |  FNDNUM :                      9C2D C |
 FNDTOK :                      8A83 C |  FNDVAR :                      94F6 C |
 FNDWRD :                      8838 C |  FNOFST :                      92FB C |
 FNRGNM :                       928 - |  FNTHR :                       9508 C |
 FNVAL :                       932F C |  FOPRND :                      9209 C |
 FOPRND1 :                     9212 C |  FOPRND2 :                     921D C |
 FOPRND3 :                     9222 C |  FOPRND4 :                     9232 C |
 FOPRND5 :                     9246 C |  FOR :                         8AE3 C |
 FORFLG :                       915 - |  FORFND :                      8B18 C |
 FORSLP :                      8AF9 C |  FPADD :                       9C7A C |
 FPADD1 :                      9C81 C |  FPADD2 :                      9C8B C |
 FPBCDE :                     0A01B C |  FPEXP :                        931 - |
 FPINT :                      0A0C7 C |  FPINT1 :                     0A0D4 C |
 FPINT2 :                     0A0E4 C |  FPINT3 :                     0A0F4 C |
 FPINT4 :                     0A0FB C |  FPMULT :                      9E4E C |
 FPMULT1 :                     9E54 C |  FPREG :                        92E - |
 FPROND :                      9D61 C |  FPROND1 :                     9D66 C |
 FPROND2 :                     9D6B C |  FPROND3 :                     9D70 C |
 FPROND4 :                     9D77 C |  FPSINT :                      8CC6 C |
 FPTHL :                      0A03E C |  FRE :                         96F4 C |
 FRENUM :                      9716 C |  FRMEVL :                      92E8 C |
 FRMEVL1 :                     92F9 C | *FULLPMMU :                       1 - |
 FULSIZ :                        70 - |  GARBGE :                      9917 C |
 GARBLP :                      991B C |  GCST1 :                       8030 C |
 GCST2 :                       8047 C |  GETCH :                       802F C |
 GETCHR :                      8BDC C |  GETCHR1 :                     8BE4 C |
 GETCMD :                      8676 C |  GETCMD1 :                     86A4 C |
 GETCMD2 :                     86CA C |  GETHEX :                     0A6D0 C |
 GETHEX1 :                    0A6E0 C |  GETINT :                      9C30 C |
 GETLEN :                      9AD2 C |  GETLIN :                      892F C |
 GETLN :                       8CF3 C |  GETNUM :                      91AC C |
 GETNXT :                      8855 C |  GETNXT1 :                     8865 C |
 GETSTR :                      9A8B C |  GETVAR :                      9480 C |
 GETVAR1 :                     9482 C |  GNXARY :                      9957 C |
 GOFUNC :                      933B C |  GOSUB :                       8D94 C |
 GOTO :                        8DAF C |  GOTO1 :                       8DC6 C |
 GOTO2 :                       8DCB C |  GRBARY :                      9981 C |
 GRBDON :                      98D0 C |  GRBDON1 :                     98D4 C |
 GRBLP :                       992B C |  GSTRCU :                      9A8E C |
 GSTRDE :                      9A94 C |  GSTRDE1 :                     9A9C C |
 GSTRHL :                      9A92 C | *GTFLNM :                      9AE5 C |
 GTFLNM1 :                     9AED C |  GTFNAM :                      9487 C |
 GTFNAM1 :                     948F C |  GTLNLP :                      8CF6 C |
 GTLNLP1 :                     8CFC C |  GTLNLP2 :                     8D0E C |
 GTSIXD :                     0A273 C |  GTVLUS :                      9053 C |
 GTVLUS1 :                     906C C |  GTVLUS2 :                     907B C |
 GTVLUS3 :                     908B C |  HALF :                       0A366 C |
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 109 - 2023/10/14 12時49分15秒


 HALFPI :                     0A57A C | *HAS64 :                          1 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 HEX :                        0A646 C |  HEX1 :                       0A662 C |
 HEX2 :                       0A665 C |  HEX3 :                       0A676 C |
 HEX4 :                       0A67B C |  HEXIT :                      0A6EF C |
 HEXLP :                      0A6BD C |  HEXLP1 :                     0A6C2 C |
 HEXTFP :                     0A6B1 C |  HX :                            26 - |
 HXERR :                      0A6FB C |  ID :                            16 - |
 IDTEST :                      97DD C |  IDTEST1 :                     97ED C |
 IF :                          8EC3 C |  IFGO :                        8ED3 C |
 IFGO1 :                       8EDE C |  IFGO2 :                       8EE6 C |
 IFJMP :                       8BB4 C |  INCHL :                      0A03A C |
 INCLEN :                      8A10 C |  INDFND :                      85B6 C |
 INDFND1 :                     85BD C |  INEWLN :                      86F0 C |
 INIT :                        821B C |  INITAB :                      8516 C |
 INITBE :                      857B C |  INITST :                     0A778 C |
 INMSG :                       8582 C |  INP :                         9BE9 C |
 INPBIN :                      90BF C |  INPBRK :                      8C4C C |
 INPBRK1 :                     8C4E C |  INPORT :                       889 - |
 INPSUB :                       888 - |  INPUT :                       9000 C |
 INRNG :                      0A285 C | *INSUPMODE :                      0 - |
 INT :                        0A10B C |  INT1 :                       0A118 C |
 INTREQ :                       3FC D |  INTSR :                       8000 C |
 INTVAR :                      87A5 C |  INVSGN :                      9FF5 C |
 ISEXT :                       802B C |  ISST1 :                       801A C |
 ITMSEP :                      90A9 C | *JJUMP1 :                     0A771 C |
 JSTZER :                     0A347 C |  KILFOR :                      9197 C |
 KILFOR1 :                     91A6 C |  KILIN :                       892A C |
 LCRFLG :                       8F6 - |  LEFT :                        9B0D C |
 LEN :                         9ACE C |  LET :                         8E31 C |
 LETNUM :                      8E95 C |  LETSTR :                      8E59 C |
 LF :                            0A - |  LFRGNM :                      9BDD C |
 LINEAT :                       8A6 - |  LINEIN :                     0A217 C |
 LINES :                      0A60D C |  LINESC :                       890 - |
 LINESN :                       892 - |  LINFND :                      86CC C |
 LIST :                        8A33 C |  LIST1 :                       8A39 C |
 LISTLP :                      8A41 C |  LISTLP1 :                     8A51 C |
*LISTON :                         1 - |  LOADFP :                     0A02D C |
 LOG :                         9DFD C |  LOG1 :                        9E07 C |
 LOGTAB :                      9DF0 C |  LOKFOR :                      8598 C |
 LOKFOR1 :                     85A0 C |  LOOPST :                       911 - |
 LS :                            1C - |  LSTBIN :                       916 - |
 LSTLP2 :                      8A6E C |  LSTLP3 :                      8A71 C |
 LSTRAM :                       8F9 - |  LSTRND :                       884 - |
 LTSTND :                      90CE C |  LWIDTH :                       88C - |
*MACEXP :                         7 - |  MAKINT :                      9C33 C |
 MAKINT1 :                     9C3F C |  MAKNUM :                     0A2A7 C |
 MANLP :                      0A179 C |  MATCH :                       8897 C |
 MEMMSG :                      8304 C |  MID :                         9B5A C |
 MID1 :                        9B19 C |  MID2 :                        9B6A C |
 MIDNUM :                      9BE3 C |  MINCDE :                      9CD6 C |
 MINUS :                       92D3 C |  MKTMST :                      9834 C |
 MLDBLP :                     0A140 C |  MLDBLP1 :                    0A147 C |
 MLDEBC :                     0A134 C |  MLDEBC1 :                    0A13E C |
 MLOOP :                       8242 C |  MLSP10 :                      9F99 C |
 MLSP101 :                     9FA3 C |  MLSP102 :                     9FAA C |
 MLSP103 :                     9FB7 C |  MO :                            24 - |
*MOMCPU :                      8086 - | *MOMCPUNAME :                "8086" - |
 MONITR :                     0A774 C |  MORDT :                       90DB C |
 MORDT1 :                      90E9 C |  MORDT2 :                      90F6 C |
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 110 - 2023/10/14 12時49分15秒


 MORDT3 :                      9101 C |  MORINP :                      8939 C |
 MOVBUF :                      871E C |  MOVDIR :                      88A6 C |
 MOVLP :                       85CB C |  MOVLP1 :                      85D9 C |
 MOVSTR :                      85C4 C |  MOVUP :                       85C1 C |
 MRPRNT :                      8EE9 C | *MSIZE :                       823F C |
 MUL8LP :                      9E81 C |  MULLN2 :                      9E44 C |
 MULT :                        9E4C C |  MULT8 :                       9E77 C |
 MULTEN :                     0A1CE C |  MULVAL :                       940 - |
 MVSTPT :                      8E8C C |  NEDMOR :                      904F C |
 NEGAFT :                     0A37C C |  NEMEM :                       82A6 C |
*NESTMAX :                      100 - |  NEW :                         8787 C |
 NEXITM :                      8FD2 C |  NEXT :                        9148 C |
 NEXT1 :                       914B C |  NEXT2 :                       9150 C |
 NEXT3 :                       915C C |  NF :                             0 - |
 NFERR :                       8613 C |  NGETCH :                      8075 C |
 NKBHIT :                      8079 C | *NMIFLG :                       896 - |
*NMIREQ :                         8 D |  NOCHNG :                      8890 C |
 NOENED :                     0A34F C |  NOLIN :                       8C6D C |
 NOLIN1 :                      8C81 C |  NOMADD :                      9E98 C |
 NOMLAD :                     0A156 C |  NOPMPT :                      901B C |
 NOPMPT1 :                     901C C |  NOPMPT2 :                     9025 C |
 NOPMPT3 :                     9035 C |  NORMAL :                      9D1D C |
 NOSPC :                       8887 C |  NOSUB7 :                     0A6EB C |
 NOSWAP :                      9C9F C |  NOSWAP1 :                     9CA4 C |
 NOSWAP2 :                     9CC5 C |  NOSWAP3 :                     9CCF C |
 NOTAMP :                      92A3 C |  NOTAMP1 :                     92AE C |
 NOTAMP2 :                     92B9 C |  NOTAMP3 :                     92C0 C |
 NOTAMP4 :                     92C7 C |  NOTSTR :                      94BE C |
 NOTSTR1 :                     94C8 C |  NOXOR :                       9C13 C |
 NPUTCH :                      807D C |  NSCFOR :                      94D3 C |
 NSCFOR1 :                     94EC C |  NULFLG :                       88E - |
 NULL :                        8CA0 C |  NULL1 :                       8CA6 C |
 NULLP :                       8F74 C |  NULLP1 :                      8F79 C |
 NULLS :                        88B - |  NUMASC :                     0A22C C |
 NXTARY :                      95D7 C |  NXTARY1 :                     95F0 C |
 NXTARY2 :                     95FB C |  NXTBYT :                      886C C |
 NXTCHR :                      88C8 C |  NXTDAT :                       926 - |
 NXTDTA :                      8E0D C |  NXTITM :                      9043 C |
 NXTITM1 :                     9045 C |  NXTOPR :                       91A - |
 NXTSTL :                      8E16 C |  NXTSTT :                      8E1C C |
 NXTSTT1 :                     8E23 C |  NXTSTT2 :                     8E28 C |
 OD :                             6 - |  OKMSG :                       8587 C |
 OM :                            0C - |  OMERR :                       85FF C |
 ON :                          8E9C C |  ONGO :                        8EAE C |
 ONGOLP :                      8EB0 C |  ONGOLP1 :                     8EB9 C |
 ONJMP :                       8BB7 C |  ONJMP1 :                      8BBE C |
 ONJMP2 :                      8BC5 C |  OPNPAR :                      91C1 C |
 OPRND :                       926E C |  OPRND1 :                      927D C |
 OPRND2 :                      9282 C |  OPRND3 :                      9295 C |
 OPRND4 :                      929C C |  OS :                            1A - |
 OTKLN :                       8927 C |  OTPORT :                       84C - |
 OUTC :                        89DC C |  OUTC1 :                       89EC C |
 OUTEXP :                     0A338 C |  OUTIT :                       89AB C |
 OUTNBS :                      89B0 C |  OUTNCR :                     0A78D C |
 OUTSUB :                       84B - |  OUTWRD :                      8A92 C |
 OV :                            0A - |  OVERR :                       861F C |
 OVTST1 :                      9F88 C |  OVTST2 :                      9F8E C |
 OVTST3 :                      9F90 C |  OVTST4 :                      9F96 C |
 PADD :                       0A1FF C | *PADDING :                        1 - |
 PAND :                        9369 C |  PAND1 :                       936B C |
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 111 - 2023/10/14 12時49分15秒


 PASSA :                       9733 C |  PBUFF :                        933 - |
 PCST1 :                       805F C |  PEEK :                        9C46 C |
 PEND :                        8C43 C |  PEND1 :                       8C46 C |
 PHLTFP :                     0A018 C |  PLUCDE :                      9D7A C |
 PNORM :                       9D2D C |  POINT :                        89B - |
 POKE :                        9C52 C |  POPAF :                       98FB C |
 POPHL :                       9AB5 C |  POPHRT :                      9EB4 C |
 POPNOK :                      8667 C |  POR :                         9365 C |
 POR1 :                        93A7 C |  POS :                         9730 C |
 POSINT :                      8CC9 C |  POUT :                        9BF5 C |
 POWER :                      0A38F C |  POWER1 :                     0A3A1 C |
 POWER2 :                     0A3C8 C |  POWER3 :                     0A3D7 C |
 POWER4 :                     0A3DC C |  POWER5 :                     0A3A8 C |
 POWERS :                     0A36A C |  PRCRLF :                      8F62 C |
 PRINT :                       8EED C |  PRITAB :                      84D7 C |
 PRNTHL :                     0A21F C |  PRNTLP :                      8EEF C |
 PRNTLP1 :                     8EF2 C |  PRNTLP2 :                     8EF9 C |
 PRNTLP3 :                     8F00 C |  PRNTLP4 :                     8F08 C |
 PRNTLP5 :                     8F0F C |  PRNTNB :                      8F47 C |
 PRNTOK :                      8668 C |  PRNTST :                      8F4C C |
 PRNTST1 :                     8F51 C |  PRNUMS :                      98A4 C |
 PROCES :                      8953 C |  PROCES1 :                     8960 C |
 PROCES2 :                     8964 C |  PROCES3 :                     896B C |
 PROGND :                       920 - |  PROGST :                       943 - |
 PROG_CODE :                   8200 C |  PROMPT :                      87E8 C |
 PRS :                         98A7 C |  PRS1 :                        98AA C |
 PRSLP :                       98B2 C |  PRSLP1 :                      98B7 C |
 PRSLP2 :                      98C7 C |  PSET :                         89E - |
 PSUB :                        9C75 C |  PTEXT :                       8074 C |
 PTRLP :                       8734 C |  PTRLP1 :                      8740 C |
 PTST1 :                       806A C |  PUTBUF :                      8993 C |
 PUTCH :                       805E C |  PUTCTL :                      8997 C |
 PUTFID :                      8B74 C | *PUTS :                        8069 C |
 QTSTLP :                      9856 C |  QTSTR :                       984F C |
 QUARTR :                     0A57E C |  RAM :                            0 - |
 RAMTOP :                       800 - |  RBFCNT :                       484 D |
 RBFRDP :                       480 D |  RBFWTP :                       482 D |
 RD :                            12 - |  READ :                        903A C |
 READFG :                       917 - |  RECBUF :                       400 D |
 REDO :                        8FD9 C |  REGAC :                          1 - |
 REGAD :                          0 - | *RELAXED :                        0 - |
 REM :                         8E12 C |  REM1 :                        8E14 C |
 RESDIV :                      9F16 C |  RESDIV1 :                     9F18 C |
 RESDIV2 :                     9F25 C |  RESEED :                     0A50E C |
 RESET :                        8A1 - |  RESTNL :                      8C09 C |
 RESTOR :                      8BF0 C |  RESZER :                      9D17 C |
 RETADR :                      9562 C |  RETINT :                      9FDD C |
 RETLIN :                      8E03 C |  RETNAD :                      88A0 C |
 RETNUL :                      9566 C |  RETNUM :                      92E0 C |
 RETREL :                      9FC9 C |  RETREL1 :                     9FCB C |
 RETURN :                      8DD8 C |  RETURN1 :                     8DDB C |
 RETURN2 :                     8DEB C |  RG :                             4 - |
 RIGHT :                       9B4B C |  RIGHT1 :                      9B12 C |
*RINPUT :                       898 - |  RLTLP :                       91E9 C |
 RLTLP1 :                      9200 C |  RND :                        0A495 C |
 RND0 :                       0A4A9 C |  RND1 :                       0A4DE C |
 RND2 :                       0A505 C |  RNDTAB :                     0A518 C |
 RNGTST :                     0A353 C |  RNGTST1 :                    0A364 C |
 ROM :                         8000 - |  RONDB :                       9D47 C |
 RONDB1 :                      9D51 C |  RONDUP :                      9D45 C |
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 112 - 2023/10/14 12時49分15秒


 ROUND :                       9C68 C |  RSCALE :                     0A1F9 C |
 RSLNBK :                      8AD8 C |  RSTSTR :                      9B78 C |
 RSTSTR1 :                     9B91 C |  RSTSTR2 :                     9B9E C |
 RTSHIG :                        17 - |  RTSLOW :                        37 - |
 RUN :                         8D87 C |  RUN1 :                        8D8C C |
 RUNCNT :                      8B78 C |  RUNCNT1 :                     8B8C C |
 RUNCNT2 :                     8B9B C |  RUNFST :                      879E C |
 RUNLIN :                      8DAE C |  SAVEXP :                      9D19 C |
 SAVSTP :                      8B61 C |  SAVSTR :                      9815 C |
 SBSCPT :                      9572 C |  SCALE :                       9DB7 C |
 SCALLP :                      9DB9 C |  SCALMI :                     0A1A6 C |
 SCALMI1 :                    0A1AB C |  SCALPL :                     0A1CB C |
 SCNEND :                      99D4 C |  SCNEND1 :                     99DD C |
 SCPTLP :                      957E C |  SEARCH :                      8851 C |
 SEED :                         866 - |  SETIO :                       9C1E C |
 SETLIN :                      8AA6 C |  SETLIT :                      88BC C |
 SETPTR :                      872C C |  SETTOP :                      8259 C |
 SFTPRG :                      86D5 C |  SGN :                         9FD5 C |
 SGNEXP :                      934B C |  SGNEXP1 :                     9352 C |
 SGNEXP2 :                     9357 C |  SGNEXP3 :                     935E C |
 SGNEXP4 :                     9363 C |  SGNRES :                       932 - |
 SHRITE :                      9DC7 C |  SHRLP :                       9DCB C |
 SHRLP1 :                      9DD2 C |  SHRT1 :                       9DD4 C |
 SIGNON :                      82BD C |  SIGNS :                      0A052 C |
 SIN :                        0A52A C |  SIN1 :                       0A55A C |
 SIN2 :                       0A565 C |  SIN3 :                       0A574 C |
 SINTAB :                     0A582 C |  SIXDIG :                     0A257 C |
 SMPVAR :                      993F C |  SMSER1 :                     0A468 C |
 SN :                             2 - |  SNERR :                       860B C |
 SPCFST :                     0A23B C |  SPCFST1 :                    0A246 C |
 SPCFST2 :                    0A24C C |  SPCLP :                       8FCB C |
 SQR :                        0A386 C |  SRCHLN :                      8755 C |
 SRCHLP :                      8759 C |  SRCHLP1 :                     8766 C |
 SRCHLP2 :                     8781 C |  SRCHLP3 :                     8785 C |
 SSTSA :                       9A63 C |  ST :                            1E - |
 STACK :                        8B0 - |  STAKFP :                      9FFF C |
 STALL :                       8C29 C |  STALL1 :                      8C31 C |
 START :                       8081 C |  STARTB :                      820D C |
 STKTHS :                      924C C |  STLOOK :                       9A7 - |
 STOP :                        8C3C C |  STOP1 :                       8C3F C |
 STORED :                      8D55 C |  STORED1 :                     8D66 C |
 STORED2 :                     8D78 C |  STPOOL :                      9991 C |
 STR :                         9805 C |  STR1 :                        980B C |
 STRADD :                      9994 C |  STRADD1 :                     99A3 C |
 STRADD2 :                     99A8 C |  STRADD3 :                     99B6 C |
 STRADD4 :                     99CA C |  STRBOT :                       90D - |
 STRENT :                      90AE C |  STRSPC :                       8A4 - |
 STTLIN :                      8F54 C |  SUBCDE :                      9C77 C |
 SUBPHL :                      9C70 C |  SUMLP :                      0A475 C |
 SUMLP1 :                     0A478 C |  SUMLP2 :                     0A47F C |
 SUMSER :                     0A459 C |  SUPTLZ :                     0A312 C |
 SVNAM2 :                      94A0 C |  SVSTAD :                      9840 C |
 SYSSTK :                       500 - |  TAN :                        0A597 C |
 TESTOS :                      9900 C |  TESTOS1 :                     990B C |
 TESTR :                       98CC C |
*TIME :               "12\-026\-103\-12649\-027\-120\-12215\-025\-089\-110" - |
 TM :                            18 - |  TMERR :                       8623 C |
 TMPSTR :                       909 - |  TMSTPL :                       8FD - |
 TMSTPT :                       8FB - |  TOPOOL :                      9B09 C |
 TOSTRA :                      9A74 C | *TRUE :                           1 - |
 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 113 - 2023/10/14 12時49分15秒


 TRYAGN :                     0A2D8 C |  TSALP :                       9A76 C |
 TSALP1 :                      9A7B C | *TSTBIT :                     0A780 C |
 TSTBRK :                      8C13 C |  TSTBRK1 :                     8C19 C |
 TSTNUM :                      91AF C |  TSTOPL :                      987F C |
 TSTOPL1 :                     989F C |  TSTRED :                      93B1 C |
 TSTRED1 :                     93C8 C |  TSTREM :                      88BF C |
 TSTREM1 :                     88C6 C |  TSTSGN :                      9FBA C |
 TSTSGN1 :                     9FC2 C |  TSTSTR :                      91B3 C |
 TTYLIN :                      892F C |  TYPE :                         8F7 - |
 UF :                            22 - |  UFERR :                       861B C |
 UL :                            0E - |  ULERR :                       8DD3 C |
 UNITY :                       9DEC C |  UPDATA :                      8C0C C |
 USR :                          848 - |  VAL :                         9BA1 C |
 VAL0 :                        9BA9 C |  VAL1 :                        9BCC C |
 VAL2 :                        9BD5 C |  VAL3 :                        9BD8 C |
 VAREND :                       922 - |  VBRKEM :                       3F8 D |
*VERSION :                     142F - |  VGETCH :                       3EC D |
 VKBHIT :                       3F0 D |  VPUTCH :                       3F4 D |
 WAIT :                        9BFB C |  WAITLP :                      9C14 C |
*WARM :                        820A C |  WARMST :                      829D C |
 WIDTH :                      0A604 C |  WORDS :                       836E C |
 WORDTB :                      848D C |  WRKSPC :                       845 - |
 XXXXX :                       82AC C |  ZDATA :                         83 - |
*ZDIV :                         0AF - |  ZEND :                          80 - |
 ZEQUAL :                       0B4 - |  ZERARY :                      9678 C |
 ZERBYT :                      8586 - |  ZEROLP :                      954C C |
 ZEROSUP :                    0A70C C |  ZFN :                          0A7 - |
 ZFOR :                          81 - |  ZGOSUB :                        8C - |
 ZGOTO :                         88 - |  ZGTR :                         0B3 - |
 ZLEFT :                        0CF - |  ZLTH :                         0B5 - |
 ZMINUS :                       0AD - |  ZNEW :                         0A4 - |
 ZNOT :                         0AA - |  ZONELP :                      8F9B C |
 ZOR :                          0B2 - |  ZPLUS :                        0AC - |
*ZPOINT :                       0C7 - |  ZPRINT :                        9E - |
 ZREM :                          8E - |  ZSGN :                         0B6 - |
 ZSPC :                         0A8 - |  ZSTEP :                        0AB - |
 ZTAB :                         0A5 - |  ZTHEN :                        0A9 - |
*ZTIMES :                       0AE - |  ZTO :                          0A6 - |

    906 symbols
     41 unused symbols

 AS V1.42 Beta [Bld 250] - Source File 8088basic.asm - Page 114 - 2023/10/14 12時49分15秒


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.07 seconds assembly time

   6273 lines source file
      5 passes
      0 errors
      0 warnings
