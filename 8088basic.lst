 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 1 - 2023/09/19 18時02分31秒


       1/       0 :                     ;	8088 NASCOM BASIC
       2/       0 :                     ;		Converted source code from 8080/Z80 to 8086
       3/       0 :                     ;	Assembler: Macro Assembler 1.42
       4/       0 :                     ;
       5/       0 :                     ;
       6/       0 :                     ;	SBCV20 NASCOM BASIC
       7/       0 :                     ;	Assembler: asm86.com/asm86.cmd
       8/       0 :                     ;
       9/       0 :                     
      10/       0 :                     	CPU	8086
      11/       0 :                     	ASSUME	CS:CODE, DS:DATA, SS:DATA, ES:NOTHING
      12/       0 :                     
      13/       0 : =0H                  RAM	EQU	0000h	; RAM top
      14/       0 : =8000H               ROM	EQU	8000h	; Rom top
      15/       0 : =500H                SYSSTK	EQU	0500h	; Stack top
      16/       0 : =0H                  EMEM	EQU	0000h	; Memory top in emulation mode
      17/       0 : =8200H               EMROM	EQU	8200h	; Start address in emulation mode
      18/       0 :                     
      19/       0 : =800H                RAMTOP	EQU	0800h 	; BASIC Work space
      20/       0 :                     
      21/       0 : =0H                  REGAD	EQU	00h	; 8251 data register
      22/       0 : =1H                  REGAC	EQU	01h	; 8251 control register
      23/       0 : =17H                 RTSHIG	EQU	17h	; RTS high
      24/       0 : =37H                 RTSLOW	EQU	37h	; RTS low
      25/       0 :                     ;
      26/       0 : =80H                 BUFSIZ	EQU	128		; Buffer size(2^n, max128)
      27/       0 : =70H                 FULSIZ	EQU	BUFSIZ*14/16	; Buffer almost full
      28/       0 :                     ;
      29/       0 :                     ;
      30/       0 :                     ;	dseg
      31/       0 :                     	SEGMENT	DATA
      32/       0 :                     	ORG	RAM
      33/       0 :                     ;
      34/       0 :                     ;	Interrupt vector
      35/       0 :                     DEVERR	DS	4	; Devide error
      36/       4 :                     BRK_FLG	DS	4	; Break flag
      37/       8 :                     NMIREQ	DS	4	; Non maskable interrupt
      38/       C :                     BR3INS	DS	4	; BRK3 instruction
      39/      10 :                     BRVINS	DS	4	; BRKV instruction
      40/      14 :                     CHKINS	DS	4	; CHKIND instruction
      41/      18 :                     
      42/     3EC :                     	ORG	0400h-20
      43/     3EC :                     VGETCH	DS	4	; CALLN 251
      44/     3F0 :                     VKBHIT	DS	4	; CALLN 252
      45/     3F4 :                     VPUTCH	DS	4	; CALLN 253
      46/     3F8 :                     VBRKEM	DS	4	; BRKEM 254
      47/     3FC :                     INTREQ	DS	4	; External interrupt
      48/     400 :                     ;
      49/     400 :                     ;	Receive buffer
      50/     400 :                     RECBUF	DS	BUFSIZ	; Buffer
      51/     480 :                     RBFRDP	DS	2	; Read address
      52/     482 :                     RBFWTP	DS	2	; Write address
      53/     484 :                     RBFCNT	DS	1	; Count of chars
      54/     485 :                     ;
      55/     485 :                     ;	cseg
      56/       0 :                     	SEGMENT	CODE
      57/    8000 :                     	ORG	ROM
      58/    8000 :                     ;
      59/    8000 :                     ;	8251 -> buffer by interrupt
      60/    8000 :                     ;
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 2 - 2023/09/19 18時02分31秒


      61/    8000 :                     intsr:
      62/    8000 : 50                  	push	ax		; Save ax
      63/    8001 : 53                  	push	bx		; Save bx
      64/    8002 : E4 00               	in	al,REGAD	; Get char
      65/    8004 : 8A E0               	mov	ah,al		; Save it
      66/    8006 :                     ;
      67/    8006 : A0 84 04            	mov	al,[RBFCNT]	; Get count of chars
      68/    8009 : 3C 80               	cmp	al,BUFSIZ	; Buffer full?
      69/    800B : 74 1E               	jz	isext		; If yes, ignore
      70/    800D : FE C0               	inc	al		; Count up
      71/    800F : A2 84 04            	mov	[RBFCNT],al	; Update
      72/    8012 : 3C 70               	cmp	al,FULSIZ	; Buffer almost full?
      73/    8014 : 75 04               	jnz	isst1		; If no, skip flow control
      74/    8016 : B0 17               	mov	al,RTSHIG	; RTS control
      75/    8018 : E6 01               	out	REGAC,al	; Out it
      76/    801A :                     ;
      77/    801A :                     isst1:
      78/    801A : 8B 1E 82 04         	mov	bx,[RBFWTP]	; Get write point
      79/    801E : 8A C4               	mov	al,ah		; Restore char
      80/    8020 : 88 07               	mov	[bx],al		; Write char into buffer
      81/    8022 :                     ;
      82/    8022 : FE C3               	inc	bl		; Next write point
      83/    8024 : 80 E3 7F            	and	bl,BUFSIZ-1	; Wrap
      84/    8027 : 89 1E 82 04         	mov	[RBFWTP],bx	; Update
      85/    802B :                     ;
      86/    802B :                     isext:
      87/    802B : 5B                  	pop	bx		; Restore bx
      88/    802C : 58                  	pop	ax		; Restore ax
      89/    802D : FB                  	sti			; Enable interrupt
      90/    802E : CF                  	iret
      91/    802F :                     ;
      92/    802F :                     ;	buffer -> al
      93/    802F :                     getch:
      94/    802F : 53                  	push	bx		; Save bx
      95/    8030 :                     ;
      96/    8030 :                     gcst1:
      97/    8030 : A0 84 04            	mov	al,[RBFCNT]	; Get count of chars
      98/    8033 : 3C 00               	cmp	al,0		; Buffer enpty?
      99/    8035 : 74 F9               	jz	gcst1		; If yes, wait
     100/    8037 : FA                  	cli			; Disable interrupt
     101/    8038 :                     ;
     102/    8038 : A0 84 04            	mov	al,[RBFCNT]	; Critical timing measures
     103/    803B : 3C 70               	cmp	al,FULSIZ	; Need flow control?
     104/    803D : 75 08               	jnz	gcst2		; If no, skip flow control
     105/    803F : 8A E0               	mov	ah,al		; Save char
     106/    8041 : B0 37               	mov	al,RTSLOW	; RTS control
     107/    8043 : E6 01               	out	REGAC,al	; Out it
     108/    8045 : 8A C4               	mov	al,ah		; Restore char
     109/    8047 :                     gcst2:
     110/    8047 : FE C8               	dec	AL		; Count down
     111/    8049 : A2 84 04            	mov	[RBFCNT],al	; Update
     112/    804C :                     ;
     113/    804C : 8B 1E 80 04         	mov	bx,[RBFRDP]	; Get read point
     114/    8050 : 8A 07               	mov	al,[bx]		; Read char from buffer
     115/    8052 :                     ;
     116/    8052 : FE C3               	inc	bl		; Next read point
     117/    8054 : 80 E3 7F            	and	bl,BUFSIZ-1	; Wrap
     118/    8057 : 89 1E 80 04         	mov	[RBFRDP],bx	; Update
     119/    805B :                     ;
     120/    805B : 5B                  	pop	bx		; Restore bx
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 3 - 2023/09/19 18時02分31秒


     121/    805C : FB                  	sti			; Enable interrupt
     122/    805D : C3                  	ret
     123/    805E :                     ;
     124/    805E :                     ;	al -> 8251
     125/    805E :                     putch:
     126/    805E : 50                  	push	ax		; Save char
     127/    805F :                     ;
     128/    805F :                     pcst1:
     129/    805F : E4 01               	in	al,REGAC	; Get status
     130/    8061 : 24 01               	and	al,01h		; check TxBUF enpty
     131/    8063 : 74 FA               	jz	pcst1		; wait for empty
     132/    8065 :                     ;
     133/    8065 : 58                  	pop	ax		; Restore char
     134/    8066 : E6 00               	out	REGAD,al	; Out it
     135/    8068 : C3                  	ret
     136/    8069 :                     ;
     137/    8069 :                     ;	put string
     138/    8069 :                     puts:
     139/    8069 : FC                  	cld			; set DF for SI increment
     140/    806A :                     ptst1:
     141/    806A : AC                  	lodsb			; get data to AL and SI++
     142/    806B : 3C 00               	cmp	al,00h		; check tail
     143/    806D : 74 05               	jz	ptext		; if tail, return
     144/    806F : E8 EC FF            	call	putch		; display a charactor
     145/    8072 : EB F6               	jmp	ptst1		; loop until tail
     146/    8074 :                     ptext:
     147/    8074 : C3                  	ret
     148/    8075 :                     ;;
     149/    8075 :                     ;;	message
     150/    8075 :                     ;ckcpu	db	13,10,'PROCESSOR: ',0
     151/    8075 :                     ;nec	db	'NEC V20(uPD70108)',13,10
     152/    8075 :                     ;	db	'It will soon be turned 8080 emulation mode.',13,10,0
     153/    8075 :                     ;intel	db	'Intel 8088',13,10
     154/    8075 :                     ;	db	'Sorry, It will soon be out of control',13,10,0
     155/    8075 :                     ;natv	db	'Returned to native mode.',13,10
     156/    8075 :                     ;	db	'There is no code to run, so please reset.',13,10,0
     157/    8075 :                     ;
     158/    8075 :                     ;	CALLN wrapping
     159/    8075 :                     ngetch:
     160/    8075 : E8 B7 FF            	call	getch		; Get a char
     161/    8078 : CF                  	iret
     162/    8079 :                     nkbhit:
     163/    8079 : A0 84 04            	mov	al,[RBFCNT]	; Get count of char
     164/    807C : CF                  	iret
     165/    807D :                     nputch:
     166/    807D : E8 DE FF            	call	putch		; Put a char
     167/    8080 : CF                  	iret
     168/    8081 :                     ;
     169/    8081 :                     ;	Start
     170/    8081 : 8C C8               start:	mov	ax,cs		; Set com model
     171/    8083 : 8E D8               	mov	ds,ax		; Overlay ds with cs
     172/    8085 : 8E C0               	mov	es,ax		; Overlay es with cs
     173/    8087 : 8E D0               	mov	ss,ax		; Overlay ss with cs
     174/    8089 : BC 00 05            	mov	sp,SYSSTK	; Set stack
     175/    808C :                     ;
     176/    808C :                     ;	Vector 251-255 setup
     177/    808C : C7 06 EC 03 75 80   	mov	WORD PTR[VGETCH],ngetch
     178/    8092 : A3 EE 03            	mov	[VGETCH+2],ax
     179/    8095 : C7 06 F0 03 79 80   	mov	WORD PTR[VKBHIT],nkbhit
     180/    809B : A3 F2 03            	mov	[VKBHIT+2],ax
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 4 - 2023/09/19 18時02分31秒


     181/    809E : C7 06 F4 03 7D 80   	mov	WORD PTR[VPUTCH],nputch
     182/    80A4 : A3 F6 03            	mov	[VPUTCH+2],ax
     183/    80A7 : C7 06 F8 03 00 82   	mov	WORD PTR[VBRKEM],EMROM
     184/    80AD : A3 FA 03            	mov	[VBRKEM+2],ax
     185/    80B0 : C7 06 FC 03 00 80   	mov	WORD PTR[INTREQ],intsr
     186/    80B6 : A3 FE 03            	mov	[INTREQ+2],ax
     187/    80B9 :                     ;
     188/    80B9 :                     ;	8251 setup
     189/    80B9 : BA 01 00            	mov	dx,REGAC
     190/    80BC : B0 00               	mov	al,00h		; Default mode or no operation
     191/    80BE : EE                  	out	dx,al		; Try command
     192/    80BF : EE                  	out	dx,al		; Try command
     193/    80C0 : EE                  	out	dx,al		; Try command
     194/    80C1 : B0 40               	mov	al,40h		; reset
     195/    80C3 : EE                  	out	dx,al		; Out it
     196/    80C4 : B9 10 00            	mov	CX,16		; Delay
     197/    80C7 : E2 FE               	loop	$		; Delay
     198/    80C9 : B0 4E               	mov	al,4eh		; mode
     199/    80CB : EE                  	out	dx,al		; Out it
     200/    80CC : B0 37               	mov	al,37h		; command
     201/    80CE : EE                  	out	dx,al		; Out it
     202/    80CF :                     ;
     203/    80CF :                     ;	Buffer initialize
     204/    80CF : 32 C0               	xor	al,al		; Clear al
     205/    80D1 : A2 84 04            	mov	[RBFCNT],al	; Set count of chars
     206/    80D4 : A1 00 04            	mov	ax,[RECBUF]	; Get buffer top
     207/    80D7 : A3 80 04            	mov	[RBFRDP],ax	; Set read point
     208/    80DA : A3 82 04            	mov	[RBFWTP],ax	; Set write point
     209/    80DD :                     ;
     210/    80DD : FB                  	sti			; Enable interrupt
     211/    80DE :                     ;;
     212/    80DE :                     ;;	Check CPU
     213/    80DE :                     ;	mov	si,offset ckcpu	;set message top
     214/    80DE :                     ;	call	puts		;display message
     215/    80DE :                     ;;
     216/    80DE :                     ;	mov	ax,0101h
     217/    80DE :                     ;	db	0d5h,10h	;aad 10h
     218/    80DE :                     ;	cmp	al,0bh		;NEC V20 ignores the argument
     219/    80DE :                     ;	je	isv20		;If V20, skip follw 3 step
     220/    80DE :                     ;	mov	si,offset intel	;8088 message
     221/    80DE :                     ;	call	puts		;Out it
     222/    80DE :                     ;	jmps	$		;Stop
     223/    80DE :                     ;isV20:	call	puts		;V20 message
     224/    80DE :                     ;;
     225/    80DE :                     ;;	Emulation sequence
     226/    80DE :                     ;;	db	0fh,0ffh	;BRKEM
     227/    80DE :                     ;;	db	offset VBRKEM/4	;Vector number
     228/    80DE :                     
     229/    80DE : E9 1F 01            	JMP	PROG_CODE
     230/    80E1 :                     
     231/    80E1 :                     ;;
     232/    80E1 :                     ;;	Returned native mode
     233/    80E1 :                     ;	mov	si,offset natv	;8088 message
     234/    80E1 :                     ;	call	puts		;Out it
     235/    80E1 :                     ;	jmps	$		;Stop
     236/    80E1 :                     ;;
     237/    80E1 :                     
     238/    80E1 :                     
     239/    80E1 :                     ;       MS-BASIC START UP ROUTINE
     240/    80E1 :                     ;       TARGET: SBC8080
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 5 - 2023/09/19 18時02分31秒


     241/    80E1 :                     ;       ASSEMBLER: ARCPIT XZ80.EXE
     242/    80E1 :                     ;
     243/    8200 :                     	ORG	EMROM
     244/    8200 :                     ;
     245/    8200 :                     ;       START BASIC
     246/    8200 :                     PROG_CODE:
     247/    8200 : EB 06               	JMP	COLD
     248/    8202 :                     
     249/    8202 :                     CHKCHR:
     250/    8202 : A0 84 04            	MOV	AL,[RBFCNT]
     251/    8205 : 3C 00               	CMP	AL,00H
     252/    8207 : C3                  	RET
     253/    8208 :                     
     254/    8208 :                     ;
     255/    8208 :                     ;==================================================================================
     256/    8208 :                     ; The updates to the original BASIC within this file are copyright Grant Searle
     257/    8208 :                     ;
     258/    8208 :                     ; You have permission to use this for NON COMMERCIAL USE ONLY
     259/    8208 :                     ; If you wish to use it elsewhere, please include an acknowledgement to myself.
     260/    8208 :                     ;
     261/    8208 :                     ; http://searle.hostei.com/grant/index.html
     262/    8208 :                     ;
     263/    8208 :                     ; eMail: home.micros01@btinternet.com
     264/    8208 :                     ;
     265/    8208 :                     ; If the above don't work, please perform an Internet search to see if I have
     266/    8208 :                     ; updated the web page hosting service.
     267/    8208 :                     ;
     268/    8208 :                     ;==================================================================================
     269/    8208 :                     ;
     270/    8208 :                     ; NASCOM ROM BASIC Ver 4.7, (C) 1978 Microsoft
     271/    8208 :                     ; Scanned from source published in 80-BUS NEWS from Vol 2, Issue 3
     272/    8208 :                     ; (May-June 1983) to Vol 3, Issue 3 (May-June 1984)
     273/    8208 :                     ; Adapted for the freeware Zilog Macro Assembler 2.10 to produce
     274/    8208 :                     ; the original ROM code (checksum A934H). PA
     275/    8208 :                     ;
     276/    8208 :                     ; GENERAL EQUATES
     277/    8208 :                     ;
     278/    8208 : =3H                  CTRLC		EQU	03H	; Control "C"
     279/    8208 : =7H                  CTRLG		EQU	07H	; Control "G"
     280/    8208 : =8H                  BKSP		EQU	08H	; Back space
     281/    8208 : =0AH                 LF		EQU	0AH	; Line feed
     282/    8208 : =0CH                 CLRSCRN		EQU	0CH	; Clear screen
     283/    8208 : =0DH                 CR		EQU	0DH	; Carriage return
     284/    8208 : =0FH                 CTRLO		EQU	0FH	; Control "O"
     285/    8208 : =11H                 CTRLQ		EQU	11H	; Control "Q"
     286/    8208 : =12H                 CTRLR		EQU	12H	; Control "R"
     287/    8208 : =13H                 CTRLS		EQU	13H	; Control "S"
     288/    8208 : =15H                 CTRLU		EQU	15H	; Control "U"
     289/    8208 : =1BH                 ESC		EQU	1BH	; Escape
     290/    8208 : =7FH                 DEL		EQU	7FH	; Delete
     291/    8208 :                     ;
     292/    8208 :                     ; BASIC WORK SPACE LOCATIONS
     293/    8208 :                     ;
     294/    8208 : =845H                WRKSPC		EQU	RAMTOP+45H  ; BASIC Work space
     295/    8208 : =848H                USR		EQU	WRKSPC+3H   ; "USR (x)" jump
     296/    8208 : =84BH                OUTSUB		EQU	WRKSPC+6H   ; "OUT p,n"
     297/    8208 : =84CH                OTPORT		EQU	WRKSPC+7H   ; Port (p)
     298/    8208 : =84EH                DIVSUP		EQU	WRKSPC+9H   ; Division support routine
     299/    8208 : =84FH                DIV1		EQU	WRKSPC+0AH  ; <- Values
     300/    8208 :                     ;DIV2		EQU	WRKSPC+0EH  ; <- to
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 6 - 2023/09/19 18時02分31秒


     301/    8208 :                     ;DIV3		EQU	WRKSPC+12H  ; <- be
     302/    8208 :                     ;DIV4		EQU	WRKSPC+15H  ; <- inserted
     303/    8208 : =855H                DIV2		EQU	WRKSPC+10H  ; <- to
     304/    8208 : =85BH                DIV3		EQU	WRKSPC+16H  ; <- be
     305/    8208 : =85FH                DIV4		EQU	WRKSPC+1AH  ; <- inserted
     306/    8208 : =866H                SEED		EQU	WRKSPC+1CH  +5; Random number seed
     307/    8208 : =884H                LSTRND		EQU	WRKSPC+3AH  +5; Last random number
     308/    8208 : =888H                INPSUB		EQU	WRKSPC+3EH  +5; #INP (x)" Routine
     309/    8208 : =889H                INPORT		EQU	WRKSPC+3FH  +5; PORT (x)
     310/    8208 : =88BH                NULLS		EQU	WRKSPC+41H  +5; Number of nulls
     311/    8208 : =88CH                LWIDTH		EQU	WRKSPC+42H  +5; Terminal width
     312/    8208 : =88DH                COMMAN		EQU	WRKSPC+43H  +5; Width for commas
     313/    8208 : =88EH                NULFLG		EQU	WRKSPC+44H  +5; Null after input byte flag
     314/    8208 : =88FH                CTLOFG		EQU	WRKSPC+45H  +5; Control "O" flag
     315/    8208 : =890H                LINESC		EQU	WRKSPC+46H  +5; Lines counter
     316/    8208 : =892H                LINESN		EQU	WRKSPC+48H  +5; Lines number
     317/    8208 : =894H                CHKSUM		EQU	WRKSPC+4AH  +5; rray load/save check sum
     318/    8208 : =896H                NMIFLG		EQU	WRKSPC+4CH  +5; Flag for NMI break routine
     319/    8208 : =897H                BRKFLG		EQU	WRKSPC+4DH  +5; Break flag
     320/    8208 : =898H                RINPUT		EQU	WRKSPC+4EH  +5; Input reflection
     321/    8208 : =89BH                POINT		EQU	WRKSPC+51H  +5; "POINT" reflection (unused)
     322/    8208 : =89EH                PSET		EQU	WRKSPC+54H  +5; "SET"   reflection
     323/    8208 : =8A1H                RESET		EQU	WRKSPC+57H  +5; "RESET" reflection
     324/    8208 : =8A4H                STRSPC		EQU	WRKSPC+5AH  +5; Bottom of string space
     325/    8208 : =8A6H                LINEAT		EQU	WRKSPC+5CH  +5; Current line number
     326/    8208 : =8A8H                BASTXT		EQU	WRKSPC+5EH  +5; Pointer to start of program
     327/    8208 : =8ABH                BUFFER		EQU	WRKSPC+61H  +5; Input buffer
     328/    8208 : =8B0H                STACK		EQU	WRKSPC+66H  +5; Initial stack
     329/    8208 : =8F5H                CURPOS		EQU	WRKSPC+0ABH +5; Character position on line
     330/    8208 : =8F6H                LCRFLG		EQU	WRKSPC+0ACH +5; Locate/Create flag
     331/    8208 : =8F7H                TYPE		EQU	WRKSPC+0ADH +5; Data type flag
     332/    8208 : =8F8H                DATFLG		EQU	WRKSPC+0AEH +5; Literal statement flag
     333/    8208 : =8F9H                LSTRAM		EQU	WRKSPC+0AFH +5; Last available RAM
     334/    8208 : =8FBH                TMSTPT		EQU	WRKSPC+0B1H +5; Temporary string pointer
     335/    8208 : =8FDH                TMSTPL		EQU	WRKSPC+0B3H +5; Temporary string pool
     336/    8208 : =909H                TMPSTR		EQU	WRKSPC+0BFH +5; Temporary string
     337/    8208 : =90DH                STRBOT		EQU	WRKSPC+0C3H +5; Bottom of string space
     338/    8208 : =90FH                CUROPR		EQU	WRKSPC+0C5H +5; Current operator in EVAL
     339/    8208 : =911H                LOOPST		EQU	WRKSPC+0C7H +5; First statement of loop
     340/    8208 : =913H                DATLIN		EQU	WRKSPC+0C9H +5; Line of current DATA item
     341/    8208 : =915H                FORFLG		EQU	WRKSPC+0CBH +5; "FOR" loop flag
     342/    8208 : =916H                LSTBIN		EQU	WRKSPC+0CCH +5; Last byte entered
     343/    8208 : =917H                READFG		EQU	WRKSPC+0CDH +5; Read/Input flag
     344/    8208 : =918H                BRKLIN		EQU	WRKSPC+0CEH +5; Line of break
     345/    8208 : =91AH                NXTOPR		EQU	WRKSPC+0D0H +5; Next operator in EVAL
     346/    8208 : =91CH                ERRLIN		EQU	WRKSPC+0D2H +5; Line of error
     347/    8208 : =91EH                CONTAD		EQU	WRKSPC+0D4H +5; Where to CONTinue
     348/    8208 : =920H                PROGND		EQU	WRKSPC+0D6H +5; End of program
     349/    8208 : =922H                VAREND		EQU	WRKSPC+0D8H +5; End of variables
     350/    8208 : =924H                ARREND		EQU	WRKSPC+0DAH +5; End of arrays
     351/    8208 : =926H                NXTDAT		EQU	WRKSPC+0DCH +5; Next data item
     352/    8208 : =928H                FNRGNM		EQU	WRKSPC+0DEH +5; Name of FN argument
     353/    8208 : =92AH                FNARG		EQU	WRKSPC+0E0H +5; FN argument value
     354/    8208 : =92EH                FPREG		EQU	WRKSPC+0E4H +5; Floating point register
     355/    8208 : =931H                FPEXP		EQU	FPREG+3       ; Floating point exponent
     356/    8208 : =932H                SGNRES		EQU	WRKSPC+0E8H +5; Sign of result
     357/    8208 : =933H                PBUFF		EQU	WRKSPC+0E9H +5; Number print buffer
     358/    8208 : =940H                MULVAL		EQU	WRKSPC+0F6H +5; Multiplier
     359/    8208 : =943H                PROGST		EQU	WRKSPC+0F9H +5; Start of program text area
     360/    8208 : =9A7H                STLOOK		EQU	WRKSPC+15DH +5; Start of memory test
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 7 - 2023/09/19 18時02分31秒


     361/    8208 :                     ;
     362/    8208 :                     ; BASIC ERROR CODE VALUES
     363/    8208 :                     ;
     364/    8208 : =0H                  NF	EQU	00H	; NEXT without FOR
     365/    8208 : =2H                  SN	EQU	02H	; Syntax error
     366/    8208 : =4H                  RG	EQU	04H	; RETURN without GOSUB
     367/    8208 : =6H                  OD	EQU	06H	; Out of DATA
     368/    8208 : =8H                  FC	EQU	08H	; Function call error
     369/    8208 : =0AH                 OV	EQU	0AH	; Overflow
     370/    8208 : =0CH                 OM	EQU	0CH	; Out of memory
     371/    8208 : =0EH                 UL	EQU	0EH	; Undefined line number
     372/    8208 : =10H                 BS	EQU	10H	; Bad subscript
     373/    8208 : =12H                 RD	EQU	12H	; Re-DIMensioned array
     374/    8208 : =14H                 DZ	EQU	14H	; Division by zero (/0)
     375/    8208 : =16H                 ID	EQU	16H	; Illegal direct
     376/    8208 : =18H                 TM	EQU	18H	; Type miss-match
     377/    8208 : =1AH                 OS	EQU	1AH	; Out of string space
     378/    8208 : =1CH                 LS	EQU	1CH	; String too long
     379/    8208 : =1EH                 ST	EQU	1EH	; String formula too complex
     380/    8208 : =20H                 CN	EQU	20H	; Can't CONTinue
     381/    8208 : =22H                 UF	EQU	22H	; UnDEFined FN function
     382/    8208 : =24H                 MO	EQU	24H	; Missing operand
     383/    8208 : =26H                 HX	EQU	26H	; HEX error
     384/    8208 : =28H                 BN	EQU	28H	; BIN error
     385/    8208 :                     ;
     386/    8208 :                     COLD:
     387/    8208 : EB 03               	JMP	STARTB			; Jump for cold start jump
     388/    820A :                     WARM:
     389/    820A : E9 90 00            	JMP	WARMST			; Jump for warm start jump
     390/    820D :                     STARTB:
     391/    820D : EB 04               	JMP	CSTART			; Jump to initialise
     392/    820F :                     ;
     393/    820F : CF 8C               	DW	DEINT			; Get integer -32768 to 32767
     394/    8211 : 20 97               	DW	ABPASS			; Return integer in AB
     395/    8213 :                     ;
     396/    8213 :                     CSTART:
     397/    8213 : BB 45 08            	MOV	BX,WRKSPC		; Start of workspace RAM
     398/    8216 : 8B E3               	MOV	SP,BX			; Set up a temporary stack
     399/    8218 : E9 5B 25            	JMP	INITST			; Go to initialise
     400/    821B :                     ;
     401/    821B :                     INIT:
     402/    821B : BA 16 85            	MOV	DX,INITAB		; Initialise workspace
     403/    821E : B5 68               	MOV	CH,INITBE-INITAB+3	; Bytes to copy
     404/    8220 : BB 45 08            	MOV	BX,WRKSPC		; Into workspace RAM
     405/    8223 :                     COPY:
     406/    8223 : 87 DA               	XCHG	BX,DX
     407/    8225 : 8A 07               	MOV	AL,[BX]			; Get source
     408/    8227 : 87 DA               	XCHG	BX,DX
     409/    8229 : 88 07               	MOV	[BX],AL			; To destination
     410/    822B :                     ;	LAHF
     411/    822B : 43                  	INC	BX			; Next destination
     412/    822C :                     ;	SAHF
     413/    822C :                     ;	LAHF
     414/    822C : 42                  	INC	DX			; Next source
     415/    822D :                     ;	SAHF
     416/    822D : FE CD               	DEC	CH			; Count bytes
     417/    822F : 75 F2               	JNZ	COPY			; More to move
     418/    8231 : 8B E3               	MOV	SP,BX			; Temporary stack
     419/    8233 : E8 8A 05            	CALL	CLREG			; Clear registers and stack
     420/    8236 : E8 27 0D            	CALL	PRCRLF			; Output CRLF
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 8 - 2023/09/19 18時02分31秒


     421/    8239 : A2 F4 08            	MOV	[BUFFER+72+1],AL	; Mark end of buffe
     422/    823C : A2 43 09            	MOV	[PROGST],AL  		; Initialise program area
     423/    823F :                     MSIZE:
     424/    823F : BB A7 09            	MOV	BX,STLOOK		; Point to start of RAM
     425/    8242 :                     MLOOP:
     426/    8242 : 9F                  	LAHF
     427/    8243 : 43                  	INC	BX			; Next byte
     428/    8244 : 9E                  	SAHF
     429/    8245 : 8A C7               	MOV	AL,BH			; Above address FFFF ?
     430/    8247 : 0A C3               	OR	AL,BL
     431/    8249 : 74 0E               	JZ	SETTOP			; Yes - 64K RAM
     432/    824B : 8A 07               	MOV	AL,[BX]			; Get contents
     433/    824D : 8A E8               	MOV	CH,AL			; Save it
     434/    824F : F6 D0               	NOT	AL			; Flip all bits
     435/    8251 : 88 07               	MOV	[BX],AL			; Put it back
     436/    8253 : 3A 07               	CMP	AL,[BX]			; RAM there if same
     437/    8255 : 88 2F               	MOV	[BX],CH			; Restore old contents
     438/    8257 : 74 E9               	JZ	MLOOP			; If RAM - test next byte
     439/    8259 :                     ;
     440/    8259 :                     SETTOP:
     441/    8259 : 9F                  	LAHF
     442/    825A : 4B                  	DEC	BX			; Back one byte
     443/    825B : 9E                  	SAHF
     444/    825C : BA A6 09            	MOV	DX,STLOOK-1		; See if enough RAM
     445/    825F : E8 53 07            	CALL	CPDEHL			; Compare DE with HL
     446/    8262 : 72 42               	JC	NEMEM			; If not enough RAM
     447/    8264 : BA CE FF            	MOV	DX,0-50			; 50 Bytes string space
     448/    8267 : 89 1E F9 08         	MOV	[LSTRAM],BX		; Save last available RAM
     449/    826B : 03 DA               	ADD	BX,DX			; Allocate string space
     450/    826D : 89 1E A4 08         	MOV	[STRSPC],BX		; Save string space
     451/    8271 : E8 14 05            	CALL	CLRPTR			; Clear program area
     452/    8274 : 8B 1E A4 08         	MOV	BX,[STRSPC]		; Get end of memory
     453/    8278 : BA EF FF            	MOV	DX,0-17			; Offset for free bytes
     454/    827B : 03 DA               	ADD	BX,DX			; Adjust HL
     455/    827D : BA 43 09            	MOV	DX,PROGST		; Start of program text
     456/    8280 : 8A C3               	MOV	AL,BL			; Get LSB
     457/    8282 : 2A C2               	SUB	AL,DL			; Adjust it
     458/    8284 : 8A D8               	MOV	BL,AL			; Re-save
     459/    8286 : 8A C7               	MOV	AL,BH			; Get MSB
     460/    8288 : 1A C6               	SBB	AL,DH			; Adjust it
     461/    828A : 8A F8               	MOV	BH,AL			; Re-save
     462/    828C : 53                  	PUSH	BX			; Save bytes free
     463/    828D : BB BD 82            	MOV	BX,SIGNON		; Sign-on message
     464/    8290 : E8 12 16            	CALL	PRS			; Output string
     465/    8293 : 5B                  	POP	BX			; Get bytes free back
     466/    8294 : E8 86 1F            	CALL	PRNTHL			; Output amount of free memory
     467/    8297 : BB AE 82            	MOV	BX,BFREE		; " Bytes free" message
     468/    829A : E8 08 16            	CALL	PRS			; Output string
     469/    829D :                     WARMST:
     470/    829D : BC B0 08            	MOV	SP,STACK		; Temporary stack
     471/    82A0 :                     BRKRET:
     472/    82A0 : E8 1D 05            	CALL	CLREG			; Clear registers and s
     473/    82A3 : E9 C0 03            	JMP	PRNTOK			; Go to get command lin
     474/    82A6 :                     ;
     475/    82A6 :                     NEMEM:
     476/    82A6 : BB 04 83            	MOV	BX,MEMMSG		; Memory size not enough
     477/    82A9 : E8 F9 15            	CALL	PRS			; Print it
     478/    82AC :                     XXXXX:
     479/    82AC : EB FE               	JMP	XXXXX			; Stop
     480/    82AE :                     ;
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 9 - 2023/09/19 18時02分31秒


     481/    82AE :                     BFREE:
     482/    82AE : 20 42 79 74 65 73   	DB	" Bytes free",CR,LF,0,0
             82B4 : 20 66 72 65 65 0D 
             82BA : 0A 00 00          
     483/    82BD :                     ;
     484/    82BD :                     SIGNON:
     485/    82BD : 49 4E 54 45 4C 38   	DB	"INTEL8080 Based x86 BASIC Ver 4.7b",CR,LF
             82C3 : 30 38 30 20 42 61 
             82C9 : 73 65 64 20 78 38 
             82CF : 36 20 42 41 53 49 
             82D5 : 43 20 56 65 72 20 
             82DB : 34 2E 37 62 0D 0A 
     486/    82E1 : 43 6F 70 79 72 69   	DB	"Copyright ",40,"C",41
             82E7 : 67 68 74 20 28 43 
             82ED : 29                
     487/    82EE : 20 31 39 37 38 20   	DB	" 1978 by Microsoft",CR,LF,0,0
             82F4 : 62 79 20 4D 69 63 
             82FA : 72 6F 73 6F 66 74 
             8300 : 0D 0A 00 00       
     488/    8304 :                     ;
     489/    8304 :                     MEMMSG:
     490/    8304 : 4D 65 6D 6F 72 79   	DB	"Memory size not enough",CR,LF
             830A : 20 73 69 7A 65 20 
             8310 : 6E 6F 74 20 65 6E 
             8316 : 6F 75 67 68 0D 0A 
     491/    831C : 54 68 65 20 73 79   	DB	"The system is stopped.",CR,LF,0,0
             8322 : 73 74 65 6D 20 69 
             8328 : 73 20 73 74 6F 70 
             832E : 70 65 64 2E 0D 0A 
             8334 : 00 00             
     492/    8336 :                     ;
     493/    8336 :                     ; FUNCTION ADDRESS TABLE
     494/    8336 :                     ;
     495/    8336 :                     FNCTAB:
     496/    8336 : D3 9F               	DW	SGN
     497/    8338 : 09 A1               	DW	INT
     498/    833A : ED 9F               	DW	ABS
     499/    833C : 48 08               	DW	USR
     500/    833E : F2 96               	DW	FRE
     501/    8340 : E7 9B               	DW	INP
     502/    8342 : 2E 97               	DW	POS
     503/    8344 : 84 A3               	DW	SQR
     504/    8346 : 93 A4               	DW	RND
     505/    8348 : FB 9D               	DW	LOG
     506/    834A : E4 A3               	DW	EXP
     507/    834C : 22 A5               	DW	COS
     508/    834E : 28 A5               	DW	SIN
     509/    8350 : 95 A5               	DW	TAN
     510/    8352 : AB A5               	DW	ATN
     511/    8354 : 44 9C               	DW	PEEK
     512/    8356 : 1A A6               	DW	DEEK
     513/    8358 : 9B 08               	DW	POINT
     514/    835A : CC 9A               	DW	LEN
     515/    835C : 03 98               	DW	STR
     516/    835E : 9F 9B               	DW	VAL
     517/    8360 : DF 9A               	DW	ASC
     518/    8362 : F9 9A               	DW	CHR
     519/    8364 : 44 A6               	DW	HEX
     520/    8366 : FE A6               	DW	BIN
     521/    8368 : 0B 9B               	DW	LEFT
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 10 - 2023/09/19 18時02分31秒


     522/    836A : 49 9B               	DW	RIGHT
     523/    836C : 58 9B               	DW	MID
     524/    836E :                     ;
     525/    836E :                     ; RESERVED WORD LIST
     526/    836E :                     ;
     527/    836E :                     WORDS:
     528/    836E : C5 4E 44            	DB	0C5H,"ND"
     529/    8371 : C6 4F 52            	DB	0C6H,"OR"
     530/    8374 : CE 45 58 54         	DB	0CEH,"EXT"
     531/    8378 : C4 41 54 41         	DB	0C4H,"ATA"
     532/    837C : C9 4E 50 55 54      	DB	0C9H,"NPUT"
     533/    8381 : C4 49 4D            	DB	0C4H,"IM"
     534/    8384 : D2 45 41 44         	DB	0D2H,"EAD"
     535/    8388 : CC 45 54            	DB	0CCH,"ET"
     536/    838B : C7 4F 54 4F         	DB	0C7H,"OTO"
     537/    838F : D2 55 4E            	DB	0D2H,"UN"
     538/    8392 : C9 46               	DB	0C9H,"F"
     539/    8394 : D2 45 53 54 4F 52   	DB	0D2H,"ESTORE"
             839A : 45                
     540/    839B :                     
     541/    839B : C7 4F 53 55 42      	DB	0C7H,"OSUB"
     542/    83A0 : D2 45 54 55 52 4E   	DB	0D2H,"ETURN"
     543/    83A6 : D2 45 4D            	DB	0D2H,"EM"
     544/    83A9 : D3 54 4F 50         	DB	0D3H,"TOP"
     545/    83AD : CF 55 54            	DB	0CFH,"UT"
     546/    83B0 : CF 4E               	DB	0CFH,"N"
     547/    83B2 : CE 55 4C 4C         	DB	0CEH,"ULL"
     548/    83B6 : D7 41 49 54         	DB	0D7H,"AIT"
     549/    83BA : C4 45 46            	DB	0C4H,"EF"
     550/    83BD : D0 4F 4B 45         	DB	0D0H,"OKE"
     551/    83C1 : C4 4F 4B 45         	DB	0C4H,"OKE"
     552/    83C5 : D3 43 52 45 45 4E   	DB	0D3H,"CREEN"
     553/    83CB : CC 49 4E 45 53      	DB	0CCH,"INES"
     554/    83D0 : C3 4C 53            	DB	0C3H,"LS"
     555/    83D3 : D7 49 44 54 48      	DB	0D7H,"IDTH"
     556/    83D8 : CD 4F 4E 49 54 4F   	DB	0CDH,"ONITOR"
             83DE : 52                
     557/    83DF :                     
     558/    83DF : D3 45 54            	DB	0D3H,"ET"
     559/    83E2 : D2 45 53 45 54      	DB	0D2H,"ESET"
     560/    83E7 : D0 52 49 4E 54      	DB	0D0H,"RINT"
     561/    83EC : C3 4F 4E 54         	DB	0C3H,"ONT"
     562/    83F0 : CC 49 53 54         	DB	0CCH,"IST"
     563/    83F4 : C3 4C 45 41 52      	DB	0C3H,"LEAR"
     564/    83F9 : C3 4C 4F 41 44      	DB	0C3H,"LOAD"
     565/    83FE : C3 53 41 56 45      	DB	0C3H,"SAVE"
     566/    8403 : CE 45 57            	DB	0CEH,"EW"
     567/    8406 :                     ;
     568/    8406 : D4 41 42 28         	DB	0D4H,"AB("
     569/    840A : D4 4F               	DB	0D4H,"O"
     570/    840C : C6 4E               	DB	0C6H,"N"
     571/    840E : D3 50 43 28         	DB	0D3H,"PC("
     572/    8412 : D4 48 45 4E         	DB	0D4H,"HEN"
     573/    8416 : CE 4F 54            	DB	0CEH,"OT"
     574/    8419 : D3 54 45 50         	DB	0D3H,"TEP"
     575/    841D :                     ;
     576/    841D : AB                  	DB	0ABH
     577/    841E : AD                  	DB	0ADH
     578/    841F : AA                  	DB	0AAH
     579/    8420 : AF                  	DB	0AFH
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 11 - 2023/09/19 18時02分31秒


     580/    8421 : DE                  	DB	0DEH
     581/    8422 : C1 4E 44            	DB	0C1H,"ND"
     582/    8425 : CF 52               	DB	0CFH,"R"
     583/    8427 : BE                  	DB	0BEH
     584/    8428 : BD                  	DB	0BDH
     585/    8429 : BC                  	DB	0BCH
     586/    842A :                     ;
     587/    842A : D3 47 4E            	DB	0D3H,"GN"
     588/    842D : C9 4E 54            	DB	0C9H,"NT"
     589/    8430 : C1 42 53            	DB	0C1H,"BS"
     590/    8433 : D5 53 52            	DB	0D5H,"SR"
     591/    8436 : C6 52 45            	DB	0C6H,"RE"
     592/    8439 : C9 4E 50            	DB	0C9H,"NP"
     593/    843C : D0 4F 53            	DB	0D0H,"OS"
     594/    843F : D3 51 52            	DB	0D3H,"QR"
     595/    8442 : D2 4E 44            	DB	0D2H,"ND"
     596/    8445 : CC 4F 47            	DB	0CCH,"OG"
     597/    8448 : C5 58 50            	DB	0C5H,"XP"
     598/    844B : C3 4F 53            	DB	0C3H,"OS"
     599/    844E : D3 49 4E            	DB	0D3H,"IN"
     600/    8451 : D4 41 4E            	DB	0D4H,"AN"
     601/    8454 : C1 54 4E            	DB	0C1H,"TN"
     602/    8457 : D0 45 45 4B         	DB	0D0H,"EEK"
     603/    845B : C4 45 45 4B         	DB	0C4H,"EEK"
     604/    845F : D0 4F 49 4E 54      	DB	0D0H,"OINT"
     605/    8464 : CC 45 4E            	DB	0CCH,"EN"
     606/    8467 : D3 54 52 24         	DB	0D3H,"TR$"
     607/    846B : D6 41 4C            	DB	0D6H,"AL"
     608/    846E : C1 53 43            	DB	0C1H,"SC"
     609/    8471 : C3 48 52 24         	DB	0C3H,"HR$"
     610/    8475 : C8 45 58 24         	DB	0C8H,"EX$"
     611/    8479 : C2 49 4E 24         	DB	0C2H,"IN$"
     612/    847D : CC 45 46 54 24      	DB	0CCH,"EFT$"
     613/    8482 : D2 49 47 48 54 24   	DB	0D2H,"IGHT$"
     614/    8488 : CD 49 44 24         	DB	0CDH,"ID$"
     615/    848C : 80                  	DB	80H         ; End of list marker
     616/    848D :                     ;
     617/    848D :                     ; KEYWORD ADDRESS TABLE
     618/    848D :                     ;
     619/    848D :                     WORDTB:
     620/    848D : 41 8C               	DW	PEND
     621/    848F : E1 8A               	DW	FOR
     622/    8491 : 46 91               	DW	NEXT
     623/    8493 : 0C 8E               	DW	DATA
     624/    8495 : FE 8F               	DW	INPUT
     625/    8497 : 76 94               	DW	DIM
     626/    8499 : 38 90               	DW	READ
     627/    849B : 2F 8E               	DW	LET
     628/    849D : AD 8D               	DW	GOTO
     629/    849F : 85 8D               	DW	RUN
     630/    84A1 : C1 8E               	DW	IF
     631/    84A3 : EE 8B               	DW	RESTOR
     632/    84A5 : 92 8D               	DW	GOSUB
     633/    84A7 : D6 8D               	DW	RETURN
     634/    84A9 : 10 8E               	DW	REM
     635/    84AB : 3A 8C               	DW	STOP
     636/    84AD : F3 9B               	DW	POUT
     637/    84AF : 9A 8E               	DW	ON
     638/    84B1 : 9E 8C               	DW	NULL
     639/    84B3 : F9 9B               	DW	WAIT
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 12 - 2023/09/19 18時02分31秒


     640/    84B5 : 37 97               	DW	DEF
     641/    84B7 : 50 9C               	DW	POKE
     642/    84B9 : 27 A6               	DW	DOKE
     643/    84BB : 10 8E               	DW	REM
     644/    84BD : 0B A6               	DW	LINES
     645/    84BF : FD A5               	DW	CLS
     646/    84C1 : 02 A6               	DW	WIDTH
     647/    84C3 : 72 A7               	DW	MONITR
     648/    84C5 : 9E 08               	DW	PSET
     649/    84C7 : A1 08               	DW	RESET
     650/    84C9 : EB 8E               	DW	PRINT
     651/    84CB : 82 8C               	DW	CONT
     652/    84CD : 31 8A               	DW	LIST
     653/    84CF : 27 8D               	DW	CLEAR
     654/    84D1 : 10 8E               	DW	REM
     655/    84D3 : 10 8E               	DW	REM
     656/    84D5 : 85 87               	DW	NEW
     657/    84D7 :                     ;
     658/    84D7 :                     ; RESERVED WORD TOKEN VALUES
     659/    84D7 :                     ;
     660/    84D7 : =80H                 ZEND       EQU      080H        ; END
     661/    84D7 : =81H                 ZFOR       EQU      081H        ; FOR
     662/    84D7 : =83H                 ZDATA      EQU      083H        ; DATA
     663/    84D7 : =88H                 ZGOTO      EQU      088H        ; GOTO
     664/    84D7 : =8CH                 ZGOSUB     EQU      08CH        ; GOSUB
     665/    84D7 : =8EH                 ZREM       EQU      08EH        ; REM
     666/    84D7 : =9EH                 ZPRINT     EQU      09EH        ; PRINT
     667/    84D7 : =0A4H                ZNEW       EQU      0A4H        ; NEW
     668/    84D7 :                     ;
     669/    84D7 : =0A5H                ZTAB       EQU      0A5H        ; TAB
     670/    84D7 : =0A6H                ZTO        EQU      0A6H        ; TO
     671/    84D7 : =0A7H                ZFN        EQU      0A7H        ; FN
     672/    84D7 : =0A8H                ZSPC       EQU      0A8H        ; SPC
     673/    84D7 : =0A9H                ZTHEN      EQU      0A9H        ; THEN
     674/    84D7 : =0AAH                ZNOT       EQU      0AAH        ; NOT
     675/    84D7 : =0ABH                ZSTEP      EQU      0ABH        ; STEP
     676/    84D7 :                     ;
     677/    84D7 : =0ACH                ZPLUS      EQU      0ACH        ; +
     678/    84D7 : =0ADH                ZMINUS     EQU      0ADH        ; -
     679/    84D7 : =0AEH                ZTIMES     EQU      0AEH        ; *
     680/    84D7 : =0AFH                ZDIV       EQU      0AFH        ; /
     681/    84D7 : =0B2H                ZOR        EQU      0B2H        ; OR
     682/    84D7 : =0B3H                ZGTR       EQU      0B3H        ; >
     683/    84D7 : =0B4H                ZEQUAL     EQU      0B4H        ; M
     684/    84D7 : =0B5H                ZLTH       EQU      0B5H        ; <
     685/    84D7 : =0B6H                ZSGN       EQU      0B6H        ; SGN
     686/    84D7 : =0C7H                ZPOINT     EQU      0C7H        ; POINT
     687/    84D7 : =0CFH                ZLEFT      EQU      0CDH +2     ; LEFT$
     688/    84D7 :                     ;
     689/    84D7 :                     ; ARITHMETIC PRECEDENCE TABLE
     690/    84D7 :                     ;
     691/    84D7 :                     PRITAB:
     692/    84D7 : 79                  	DB	79H         ; Precedence value
     693/    84D8 : FD A1               	DW	PADD        ; FPREG = <last> + FPREG
     694/    84DA :                     ;
     695/    84DA : 79                  	DB	79H         ; Precedence value
     696/    84DB : 73 9C               	DW	PSUB        ; FPREG = <last> - FPREG
     697/    84DD :                     ;
     698/    84DD : 7C                  	DB	7CH         ; Precedence value
     699/    84DE : 4A 9E               	DW	MULT        ; PPREG = <last> * FPREG
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 13 - 2023/09/19 18時02分31秒


     700/    84E0 :                     ;
     701/    84E0 : 7C                  	DB	7CH         ; Precedence value
     702/    84E1 : C9 9E               	DW	DIV         ; FPREG = <last> / FPREG
     703/    84E3 :                     ;
     704/    84E3 : 7F                  	DB	7FH         ; Precedence value
     705/    84E4 : 8D A3               	DW	POWER       ; FPREG = <last> ^ FPREG
     706/    84E6 :                     ;
     707/    84E6 : 50                  	DB	50H         ; Precedence value
     708/    84E7 : 67 93               	DW	PAND        ; FPREG = <last> AND FPREG
     709/    84E9 :                     ;
     710/    84E9 : 46                  	DB	46H         ; Precedence value
     711/    84EA : 63 93               	DW	POR         ; FPREG = <last> OR FPREG
     712/    84EC :                     ;
     713/    84EC :                     ; BASIC ERROR CODE LIST
     714/    84EC :                     ;
     715/    84EC :                     ERRORS:
     716/    84EC : 4E 46               	DB	"NF"        ; NEXT without FOR
     717/    84EE : 53 4E               	DB	"SN"        ; Syntax error
     718/    84F0 : 52 47               	DB	"RG"        ; RETURN without GOSUB
     719/    84F2 : 4F 44               	DB	"OD"        ; Out of DATA
     720/    84F4 : 46 43               	DB	"FC"        ; Illegal function call
     721/    84F6 : 4F 56               	DB	"OV"        ; Overflow error
     722/    84F8 : 4F 4D               	DB	"OM"        ; Out of memory
     723/    84FA : 55 4C               	DB	"UL"        ; Undefined line
     724/    84FC : 42 53               	DB	"BS"        ; Bad subscript
     725/    84FE : 44 44               	DB	"DD"        ; Re-DIMensioned array
     726/    8500 : 2F 30               	DB	"/0"        ; Division by zero
     727/    8502 : 49 44               	DB	"ID"        ; Illegal direct
     728/    8504 : 54 4D               	DB	"TM"        ; Type mis-match
     729/    8506 : 4F 53               	DB	"OS"        ; Out of string space
     730/    8508 : 4C 53               	DB	"LS"        ; String too long
     731/    850A : 53 54               	DB	"ST"        ; String formula too co
     732/    850C : 43 4E               	DB	"CN"        ; Can't CONTinue
     733/    850E : 55 46               	DB	"UF"        ; Undefined FN function
     734/    8510 : 4D 4F               	DB	"MO"        ; Missing operand
     735/    8512 : 48 58               	DB	"HX"        ; HEX error
     736/    8514 : 42 4E               	DB	"BN"        ; BIN error
     737/    8516 :                     ;
     738/    8516 :                     ; INITIALISATION TABLE --------------------------------
     739/    8516 :                     ;
     740/    8516 :                     INITAB:
     741/    8516 : E9 84 FD            	JMP	WARMST			; Warm start jump
     742/    8519 : E9 CD 07            	JMP	FCERR			; "USR (X)" jump (Set to Error)
     743/    851C : E6 00               	OUT	0,AL			; "OUT p,n" skeleton
     744/    851E : C3                  	RET
     745/    851F : 2C 00               	SUB	AL,0			; Division support routine
     746/    8521 : 8A D8               	MOV	BL,AL
     747/    8523 : 8A C7               	MOV	AL,BH
     748/    8525 : 1C 00               	SBB	AL,0
     749/    8527 : 8A F8               	MOV	BH,AL
     750/    8529 : 8A C5               	MOV	AL,CH
     751/    852B : 1C 00               	SBB	AL,0
     752/    852D : 8A E8               	MOV	CH,AL
     753/    852F : B0 00               	MOV	AL,0
     754/    8531 : C3                  	RET
     755/    8532 : 00 00 00            	DB	0,0,0			; Random number seed ta
     756/    8535 : 35 4A CA 99         	DB	035H,04AH,0CAH,099H	;-2.65145E+07
     757/    8539 : 39 1C 76 98         	DB	039H,01CH,076H,098H	; 1.61291E+07
     758/    853D : 22 95 B3 98         	DB	022H,095H,0B3H,098H	;-1.17691E+07
     759/    8541 : 0A DD 47 98         	DB	00AH,0DDH,047H,098H	; 1.30983E+07
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 14 - 2023/09/19 18時02分31秒


     760/    8545 : 53 D1 99 99         	DB	053H,0D1H,099H,099H	;-2-01612E+07
     761/    8549 : 0A 1A 9F 98         	DB	00AH,01AH,09FH,098H	;-1.04269E+07
     762/    854D : 65 BC CD 98         	DB	065H,0BCH,0CDH,098H	;-1.34831E+07
     763/    8551 : D6 77 3E 98         	DB	0D6H,077H,03EH,098H	; 1.24825E+07
     764/    8555 : 52 C7 4F 80         	DB	052H,0C7H,04FH,080H	; Last random n
     765/    8559 : E4 00               	IN	AL,0			; INP (x) skeleton
     766/    855B : C3                  	RET
     767/    855C : 01                  	DB	1			; POS (x) number (1)
     768/    855D : FF                  	DB	255			; Terminal width (255)
     769/    855E : 1C                  	DB	28			; Width for commas (3 colums)
     770/    855F : 00                  	DB	0			; No nulls after input bytes
     771/    8560 : 00                  	DB	0			; Output enabled (^O off)
     772/    8561 : 14 00               	DW	20			; Initial lines counter
     773/    8563 : 14 00               	DW	20			; Initial lines number
     774/    8565 : 00 00               	DW	0			; Array load/save check sum
     775/    8567 : 00                  	DB	0			; Break not by NMI
     776/    8568 : 00                  	DB	0			; Break flag
     777/    8569 : E9 C1 03            	JMP	TTYLIN			; Input reflection (set to TTY)
     778/    856C : E9 91 7A            	JMP	0000H			; POINT reflection unused
     779/    856F : E9 8E 7A            	JMP	0000H			; SET reflection
     780/    8572 : E9 8B 7A            	JMP	0000H			; RESET reflection
     781/    8575 : A7 09               	DW	STLOOK			; Temp string space
     782/    8577 : FE FF               	DW	-2			; Current line number (old)
     783/    8579 : 44 09               	DW	PROGST+1		; Start of program text
     784/    857B :                     INITBE:					; END OF INITIALISATION TABLE
     785/    857B :                     ;
     786/    857B :                     ; END OF INITIALISATION TABLE -------------------------
     787/    857B :                     ;
     788/    857B :                     ERRMSG:
     789/    857B : 20 45 72 72 6F 72   	DB	" Error",0
             8581 : 00                
     790/    8582 :                     
     791/    8582 :                     INMSG:
     792/    8582 : 20 69 6E 20 00      	DB	" in ",0
     793/    8587 : =8586H               ZERBYT	EQU      $-1			; A zero byte
     794/    8587 :                     OKMSG:
     795/    8587 : 4F 6B 0D 0A 00 00   	DB	"Ok",CR,LF,0,0
     796/    858D :                     BRKMSG:
     797/    858D : 42 72 65 61 6B 00   	DB	"Break",0
     798/    8593 :                     ;
     799/    8593 :                     BAKSTK:
     800/    8593 : BB 04 00            	MOV	BX,4			; Look for "FOR" block with
     801/    8596 : 03 DC               	ADD	BX,SP			; same index as specified
     802/    8598 :                     LOKFOR:
     803/    8598 : 8A 07               	MOV	AL,[BX]			; Get block ID
     804/    859A :                     ;	LAHF
     805/    859A : 43                  	INC	BX			; Point to index address
     806/    859B :                     ;	SAHF
     807/    859B : 3C 81               	CMP	AL,ZFOR			; Is it a "FOR" token
     808/    859D : 74 01               	JZ	LOKFOR1
     809/    859F : C3                  	RET				; No - exit
     810/    85A0 :                     LOKFOR1:
     811/    85A0 : 8A 0F               	MOV	CL,[BX]			; BC = Address of "FOR" index
     812/    85A2 :                     ;	LAHF
     813/    85A2 : 43                  	INC	BX
     814/    85A3 :                     ;	SAHF
     815/    85A3 : 8A 2F               	MOV	CH,[BX]
     816/    85A5 :                     ;	LAHF
     817/    85A5 : 43                  	INC	BX			; Point to sign of STEP
     818/    85A6 :                     ;	SAHF
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 15 - 2023/09/19 18時02分31秒


     819/    85A6 : 53                  	PUSH	BX			; Save pointer to sign
     820/    85A7 : 8B D9               	MOV	BX,CX			; HL = address of "FOR" index
     821/    85A9 : 8A C6               	MOV	AL,DH			; See if an index was specified
     822/    85AB : 0A C2               	OR	AL,DL			; DE = 0 if no index specified
     823/    85AD : 87 DA               	XCHG	BX,DX			; Specified index into HL
     824/    85AF : 74 05               	JZ	INDFND			; Skip if no index given
     825/    85B1 : 87 DA               	XCHG	BX,DX			; Index back into DE
     826/    85B3 : E8 FF 03            	CALL	CPDEHL			; Compare index with one given
     827/    85B6 :                     INDFND:
     828/    85B6 : B9 0D 00            	MOV	CX,16-3			; Offset to next block
     829/    85B9 : 5B                  	POP	BX			; Restore pointer to sign
     830/    85BA : 75 01               	JNZ	INDFND1
     831/    85BC : C3                  	RET				; Return if block found
     832/    85BD :                     INDFND1:
     833/    85BD : 03 D9               	ADD	BX,CX			; Point to next block
     834/    85BF : EB D7               	JMP	LOKFOR			; Keep on looking
     835/    85C1 :                     ;
     836/    85C1 :                     MOVUP:
     837/    85C1 : E8 26 00            	CALL	ENFMEM			; See if enough memory
     838/    85C4 :                     MOVSTR:
     839/    85C4 : 51                  	PUSH	CX			; Save end of source
     840/    85C5 : 8B EC               	MOV	BP,SP
     841/    85C7 : 87 5E 00            	XCHG	[BP],BX			; Swap source and dest" end
     842/    85CA : 59                  	POP	CX			; Get end of destination
     843/    85CB :                     MOVLP:
     844/    85CB : E8 E7 03            	CALL	CPDEHL			; See if list moved
     845/    85CE : 8A 07               	MOV	AL,[BX]			; Get byte
     846/    85D0 : 87 D9               	XCHG	BX,CX
     847/    85D2 : 88 07               	MOV	[BX],AL			; Move it
     848/    85D4 : 87 D9               	XCHG	BX,CX
     849/    85D6 : 75 01               	JNZ	MOVLP1
     850/    85D8 : C3                  	RET				; Exit if all done
     851/    85D9 :                     MOVLP1:
     852/    85D9 :                     ;	LAHF
     853/    85D9 : 49                  	DEC	CX			; Next byte to move to
     854/    85DA :                     ;	SAHF
     855/    85DA :                     ;	LAHF
     856/    85DA : 4B                  	DEC	BX			; Next byte to move
     857/    85DB :                     ;	SAHF
     858/    85DB : EB EE               	JMP	MOVLP			; Loop until all bytes moved
     859/    85DD :                     ;
     860/    85DD :                     CHKSTK:
     861/    85DD : 53                  	PUSH	BX			; Save code string address
     862/    85DE : 8B 1E 24 09         	MOV	BX,[ARREND]		; Lowest free memory
     863/    85E2 : B5 00               	MOV	CH,0			; BC = Number of levels to test
     864/    85E4 : 03 D9               	ADD	BX,CX			; 2 Bytes for each level
     865/    85E6 : 03 D9               	ADD	BX,CX
     866/    85E8 : EB 01               	JMP	ENFMEM1			; Skip "PUSH HL"
     867/    85EA :                     ENFMEM:
     868/    85EA : 53                  	PUSH	BX			; Save code string address
     869/    85EB :                     ENFMEM1:
     870/    85EB : B0 D0               	MOV	AL,0D0H			; LOW -48; 48 Bytes minimum RAM
     871/    85ED : 2A C3               	SUB	AL,BL
     872/    85EF : 8A D8               	MOV	BL,AL
     873/    85F1 : B0 FF               	MOV	AL,0FFH			; HIGH (-48); 48 Bytes minimum RAM
     874/    85F3 : 1A C7               	SBB	AL,BH
     875/    85F5 : 72 08               	JC	OMERR			; Not enough - ?OM Erro
     876/    85F7 : 8A F8               	MOV	BH,AL
     877/    85F9 : 03 DC               	ADD	BX,SP			; Test if stack is overflowed
     878/    85FB : 5B                  	POP	BX			; Restore code string address
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 16 - 2023/09/19 18時02分31秒


     879/    85FC : 73 01               	JNC	OMERR
     880/    85FE : C3                  	RET				; Return if enough memory
     881/    85FF :                     OMERR:
     882/    85FF : B2 0C               	MOV	DL,OM			; ?OM Error
     883/    8601 : EB 20               	JMP	ERROR
     884/    8603 :                     ;
     885/    8603 :                     DATSNR:
     886/    8603 : 8B 1E 13 09         	MOV	BX,[DATLIN]		; Get line of current DATA item
     887/    8607 : 89 1E A6 08         	MOV	[LINEAT],BX		; Save as current line
     888/    860B :                     SNERR:
     889/    860B : B2 02               	MOV	DL,SN			; ?SN Error
     890/    860D :                     DZERR:
     891/    860D : B2 14               	MOV	DL,DZ			; ?/0 Error
     892/    860F : EB 12               	JMP	ERROR
     893/    8611 :                     NFERR:
     894/    8611 : B2 00               	MOV	DL,NF			; ?NF Error
     895/    8613 : EB 0E               	JMP	ERROR
     896/    8615 :                     DDERR:
     897/    8615 : B2 12               	MOV	DL,RD			; ?DD Error
     898/    8617 : EB 0A               	JMP	ERROR
     899/    8619 :                     UFERR:
     900/    8619 : B2 22               	MOV	DL,UF			; ?UF Error
     901/    861B : EB 06               	JMP	ERROR
     902/    861D :                     OVERR:
     903/    861D : B2 0A               	MOV	DL,OV			; ?OV Error
     904/    861F : EB 02               	JMP	ERROR
     905/    8621 :                     TMERR:
     906/    8621 : B2 18               	MOV	DL,TM			; ?TM Error
     907/    8623 :                     ;
     908/    8623 :                     ERROR:
     909/    8623 : E8 9A 01            	CALL	CLREG			; Clear registers and stack
     910/    8626 : A2 8F 08            	MOV	[CTLOFG],AL		; Enable output (A is 0)
     911/    8629 : E8 26 09            	CALL	STTLIN			; Start new line
     912/    862C : BB EC 84            	MOV	BX,ERRORS		; Point to error codes
     913/    862F : 8A F0               	MOV	DH,AL			; D = 0 (A is 0)
     914/    8631 : B0 3F               	MOV	AL,'?'
     915/    8633 : E8 A4 03            	CALL	OUTC			; Output '?'
     916/    8636 : 03 DA               	ADD	BX,DX			; Offset to correct error code
     917/    8638 : 8A 07               	MOV	AL,[BX]			; First character
     918/    863A : E8 9D 03            	CALL	OUTC			; Output it
     919/    863D : E8 9A 05            	CALL	GETCHR			; Get next character
     920/    8640 : E8 97 03            	CALL	OUTC			; Output it
     921/    8643 : BB 7B 85            	MOV	BX,ERRMSG		; "Error" message
     922/    8646 :                     ERRIN:
     923/    8646 : E8 5C 12            	CALL	PRS			; Output message
     924/    8649 : 8B 1E A6 08         	MOV	BX,[LINEAT]		; Get line of error
     925/    864D : BA FE FF            	MOV	DX,-2			; Cold start error if -2
     926/    8650 : E8 62 03            	CALL	CPDEHL			; See if cold start error
     927/    8653 : 75 03               	JNZ	ERRIN1			; Cold start error - Restart
     928/    8655 : E9 BB FB            	JMP	CSTART
     929/    8658 :                     ERRIN1:
     930/    8658 : 8A C7               	MOV	AL,BH			; Was it a direct error
     931/    865A : 22 C3               	AND	AL,BL			; Line = -1 if direct error
     932/    865C : FE C0               	INC	AL
     933/    865E : 74 06               	JZ	PRNTOK
     934/    8660 : E8 B2 1B            	CALL	LINEIN			; No - output line of error
     935/    8663 : EB 01               	JMP	PRNTOK			; Skip "POP BC"
     936/    8665 :                     POPNOK:
     937/    8665 : 59                  	POP	CX			; Drop address in input buffer
     938/    8666 :                     ;
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 17 - 2023/09/19 18時02分31秒


     939/    8666 :                     PRNTOK:
     940/    8666 : 32 C0               	XOR	AL,AL			; Output "Ok" and get command
     941/    8668 : A2 8F 08            	MOV	[CTLOFG],AL		; Enable output
     942/    866B : E8 E4 08            	CALL	STTLIN			; Start new line
     943/    866E : BB 87 85            	MOV	BX,OKMSG		; "Ok" message
     944/    8671 : E8 31 12            	CALL	PRS			; Output "Ok"
     945/    8674 :                     GETCMD:
     946/    8674 : BB FF FF            	MOV	BX,-1			; Flag direct mode
     947/    8677 : 89 1E A6 08         	MOV	[LINEAT],BX		; Save as current line
     948/    867B : E8 AF 02            	CALL	GETLIN			; Get an input line
     949/    867E : 72 F4               	JC	GETCMD			; Get line again if break
     950/    8680 : E8 57 05            	CALL	GETCHR			; Get first character
     951/    8683 : FE C0               	INC	AL			; Test if end of line
     952/    8685 : FE C8               	DEC	AL			; Without affecting Carry
     953/    8687 : 74 EB               	JZ	GETCMD			; Nothing entered - Get another
     954/    8689 : 9F                  	LAHF
     955/    868A : 86 E0               	XCHG	AH,AL
     956/    868C : 50                  	PUSH	AX			; Save Carry status
     957/    868D : 86 E0               	XCHG	AH,AL
     958/    868F : E8 5C 06            	CALL	ATOH			; Get line number into DE
     959/    8692 : 52                  	PUSH	DX			; Save line number
     960/    8693 : E8 5D 01            	CALL	CRUNCH			; Tokenise rest of line
     961/    8696 : 8A E8               	MOV	CH,AL			; Length of tokenised line
     962/    8698 : 5A                  	POP	DX			; Restore line number
     963/    8699 : 58                  	POP	AX			; Restore Carry
     964/    869A : 86 E0               	XCHG	AH,AL
     965/    869C : 9E                  	SAHF
     966/    869D : 72 03               	JC	GETCMD1
     967/    869F : E9 09 05            	JMP	EXCUTE			; No line number - Direct mode
     968/    86A2 :                     GETCMD1:
     969/    86A2 : 52                  	PUSH	DX			; Save line number
     970/    86A3 : 51                  	PUSH	CX			; Save length of tokenised line
     971/    86A4 : 32 C0               	XOR	AL,AL
     972/    86A6 : A2 16 09            	MOV	[LSTBIN],AL		; Clear last byte input
     973/    86A9 : E8 2E 05            	CALL	GETCHR			; Get next character
     974/    86AC : 0A C0               	OR	AL,AL			; Set flags
     975/    86AE : 9F                  	LAHF
     976/    86AF : 86 E0               	XCHG	AH,AL
     977/    86B1 : 50                  	PUSH	AX			; And save them
     978/    86B2 : 86 E0               	XCHG	AH,AL
     979/    86B4 : E8 9C 00            	CALL	SRCHLN			; Search for line numbe
     980/    86B7 : 72 11               	JC	LINFND			; Jump if line found
     981/    86B9 : 58                  	POP	AX			; Get status
     982/    86BA : 86 E0               	XCHG	AH,AL
     983/    86BC : 9E                  	SAHF
     984/    86BD : 9F                  	LAHF
     985/    86BE : 86 E0               	XCHG	AH,AL
     986/    86C0 : 50                  	PUSH	AX			; And re-save
     987/    86C1 : 86 E0               	XCHG	AH,AL
     988/    86C3 : 75 03               	JNZ	GETCMD2
     989/    86C5 : E9 09 07            	JMP	ULERR			; Nothing after number - Error
     990/    86C8 :                     GETCMD2:
     991/    86C8 : 0A C0               	OR	AL,AL			; Clear Carry
     992/    86CA :                     LINFND:
     993/    86CA : 51                  	PUSH	CX			; Save address of line in prog
     994/    86CB : 73 21               	JNC	INEWLN			; Line not found - Inseer new
     995/    86CD : 87 DA               	XCHG	BX,DX			; Next line address in DE
     996/    86CF : 8B 1E 20 09         	MOV	BX,[PROGND]		; End of program
     997/    86D3 :                     SFTPRG:
     998/    86D3 : 87 DA               	XCHG	BX,DX
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 18 - 2023/09/19 18時02分31秒


     999/    86D5 : 8A 07               	MOV	AL,[BX]			; Shift rest of program down
    1000/    86D7 : 87 DA               	XCHG	BX,DX
    1001/    86D9 : 87 D9               	XCHG	BX,CX
    1002/    86DB : 88 07               	MOV	[BX],AL
    1003/    86DD : 87 D9               	XCHG	BX,CX
    1004/    86DF : 9F                  	LAHF
    1005/    86E0 : 41                  	INC	CX			; Next destination
    1006/    86E1 : 42                  	INC	DX			; Next source
    1007/    86E2 : 9E                  	SAHF
    1008/    86E3 : E8 CF 02            	CALL	CPDEHL			; All done?
    1009/    86E6 : 75 EB               	JNZ	SFTPRG			; More to do
    1010/    86E8 : 8B D9               	MOV	BX,CX			; HL - New end of program
    1011/    86EA : 89 1E 20 09         	MOV	[PROGND],BX		; Update end of program
    1012/    86EE :                     ;
    1013/    86EE :                     INEWLN:
    1014/    86EE : 5A                  	POP	DX			; Get address of line,
    1015/    86EF : 58                  	POP	AX			; Get status
    1016/    86F0 : 86 E0               	XCHG	AH,AL
    1017/    86F2 : 9E                  	SAHF
    1018/    86F3 : 74 35               	JZ	SETPTR			; No text - Set up pointers
    1019/    86F5 : 8B 1E 20 09         	MOV	BX,[PROGND]		; Get end of program
    1020/    86F9 : 8B EC               	MOV	BP,SP
    1021/    86FB : 87 5E 00            	XCHG	[BP],BX			; Get length of input line
    1022/    86FE : 59                  	POP	CX			; End of program to BC
    1023/    86FF : 03 D9               	ADD	BX,CX			; Find new end
    1024/    8701 : 53                  	PUSH	BX			; Save new end
    1025/    8702 : E8 BC FE            	CALL	MOVUP			; Make space for line
    1026/    8705 : 5B                  	POP	BX			; Restore new end
    1027/    8706 : 89 1E 20 09         	MOV	[PROGND],BX		; Update end of program pointer
    1028/    870A : 87 DA               	XCHG	BX,DX			; Get line to move up in HL
    1029/    870C : 88 3F               	MOV	[BX],BH			; Save MSB
    1030/    870E : 5A                  	POP	DX			; Get new line number
    1031/    870F : 9F                  	LAHF
    1032/    8710 : 43                  	INC	BX			; Skip pointer
    1033/    8711 : 43                  	INC	BX
    1034/    8712 : 88 17               	MOV	[BX],DL			; Save LSB of line numb
    1035/    8714 : 43                  	INC	BX
    1036/    8715 : 88 37               	MOV	[BX],DH			; Save MSB of line numb
    1037/    8717 : 43                  	INC	BX			; To first byte in line
    1038/    8718 : 9E                  	SAHF
    1039/    8719 : BA AB 08            	MOV	DX,BUFFER		; Copy buffer to program
    1040/    871C :                     MOVBUF:
    1041/    871C : 87 DA               	XCHG	BX,DX
    1042/    871E : 8A 07               	MOV	AL,[BX]			; Get source
    1043/    8720 : 87 DA               	XCHG	BX,DX
    1044/    8722 : 88 07               	MOV	[BX],AL			; Save destinations
    1045/    8724 : 43                  	INC	BX			; Next source
    1046/    8725 : 42                  	INC	DX			; Next destination
    1047/    8726 : 0A C0               	OR	AL,AL			; Done?
    1048/    8728 : 75 F2               	JNZ	MOVBUF			; No - Repeat
    1049/    872A :                     SETPTR:
    1050/    872A : E8 6F 00            	CALL	RUNFST			; Set line pointers
    1051/    872D : 9F                  	LAHF
    1052/    872E : 43                  	INC	BX			; To LSB of pointer
    1053/    872F : 9E                  	SAHF
    1054/    8730 : 87 DA               	XCHG	BX,DX			; Address to DE
    1055/    8732 :                     PTRLP:
    1056/    8732 : 8B DA               	MOV	BX,DX			; Address to HL
    1057/    8734 : 8A 07               	MOV	AL,[BX]			; Get LSB of pointer
    1058/    8736 : 43                  	INC	BX			; To MSB of pointer
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 19 - 2023/09/19 18時02分31秒


    1059/    8737 : 0A 07               	OR	AL,[BX]			; Compare with MSB poiner
    1060/    8739 : 75 03               	JNZ	PTRLP1
    1061/    873B : E9 36 FF            	JMP	GETCMD			; Get command line if end
    1062/    873E :                     PTRLP1:
    1063/    873E : 43                  	INC	BX			; To LSB of line number
    1064/    873F : 43                  	INC	BX			; Skip line number
    1065/    8740 : 43                  	INC	BX			; Point to first byte i
    1066/    8741 : 32 C0               	XOR	AL,AL			; Looking for 00 byte
    1067/    8743 :                     FNDEND:
    1068/    8743 : 3A 07               	CMP	AL,[BX]			; Found end of line?
    1069/    8745 : 9F                  	LAHF
    1070/    8746 : 43                  	INC	BX			; Move to next byte
    1071/    8747 : 9E                  	SAHF
    1072/    8748 : 75 F9               	JNZ	FNDEND			; No - Keep looking
    1073/    874A : 87 DA               	XCHG	BX,DX			; Next line address to HL
    1074/    874C : 88 17               	MOV	[BX],DL			; Save LSB of pointer
    1075/    874E : 43                  	INC	BX
    1076/    874F : 88 37               	MOV	[BX],DH			; Save MSB of pointer
    1077/    8751 : EB DF               	JMP	PTRLP			; Do next line
    1078/    8753 :                     ;
    1079/    8753 :                     SRCHLN:
    1080/    8753 : 8B 1E A8 08         	MOV	BX,[BASTXT]		; Start of program text
    1081/    8757 :                     SRCHLP:
    1082/    8757 : 8B CB               	MOV	CX,BX			; BC = Address to look at
    1083/    8759 : 8A 07               	MOV	AL,[BX]			; Get address of next line
    1084/    875B :                     ;	LAHF
    1085/    875B : 43                  	INC	BX
    1086/    875C :                     ;	SAHF
    1087/    875C : 0A 07               	OR	AL,[BX]			; End of program found?
    1088/    875E : 9F                  	LAHF
    1089/    875F : 4B                  	DEC	BX
    1090/    8760 : 9E                  	SAHF
    1091/    8761 : 75 01               	JNZ	SRCHLP1
    1092/    8763 : C3                  	RET				; Yes - Line not found
    1093/    8764 :                     SRCHLP1:
    1094/    8764 :                     ;	LAHF
    1095/    8764 : 43                  	INC	BX
    1096/    8765 :                     ;	SAHF
    1097/    8765 :                     ;	LAHF
    1098/    8765 : 43                  	INC	BX
    1099/    8766 :                     ;	SAHF
    1100/    8766 : 8A 07               	MOV	AL,[BX]			; Get LSB of line number
    1101/    8768 :                     ;	LAHF
    1102/    8768 : 43                  	INC	BX
    1103/    8769 :                     ;	SAHF
    1104/    8769 : 8A 3F               	MOV	BH,[BX]			; Get MSB of line number
    1105/    876B : 8A D8               	MOV	BL,AL
    1106/    876D : E8 45 02            	CALL	CPDEHL			; Compare with line in DE
    1107/    8770 : 8B D9               	MOV	BX,CX			; HL = Start of this line
    1108/    8772 : 8A 07               	MOV	AL,[BX]			; Get LSB of next line address
    1109/    8774 : 9F                  	LAHF
    1110/    8775 : 43                  	INC	BX
    1111/    8776 : 9E                  	SAHF
    1112/    8777 : 8A 3F               	MOV	BH,[BX]			; Get MSB of next line address
    1113/    8779 : 8A D8               	MOV	BL,AL			; Next line to HL
    1114/    877B : F5                  	CMC
    1115/    877C : 75 01               	JNZ	SRCHLP2
    1116/    877E : C3                  	RET				; Lines found - Exit
    1117/    877F :                     SRCHLP2:
    1118/    877F : F5                  	CMC
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 20 - 2023/09/19 18時02分31秒


    1119/    8780 : 72 01               	JC	SRCHLP3
    1120/    8782 : C3                  	RET				; Line not found,at line after
    1121/    8783 :                     SRCHLP3:
    1122/    8783 : EB D2               	JMP	SRCHLP			; Keep looking
    1123/    8785 :                     ;
    1124/    8785 :                     NEW:
    1125/    8785 : 74 01               	JZ	CLRPTR
    1126/    8787 : C3                  	RET				; Return if any more on line
    1127/    8788 :                     CLRPTR:
    1128/    8788 : 8B 1E A8 08         	MOV	BX,[BASTXT]		; Point to start of program
    1129/    878C : 32 C0               	XOR	AL,AL			; Set program area to empty
    1130/    878E : 88 07               	MOV	[BX],AL			; Save LSB = 00
    1131/    8790 : 9F                  	LAHF
    1132/    8791 : 43                  	INC	BX
    1133/    8792 : 9E                  	SAHF
    1134/    8793 : 88 07               	MOV	[BX],AL			; Save MSB = 00
    1135/    8795 : 9F                  	LAHF
    1136/    8796 : 43                  	INC	BX
    1137/    8797 : 9E                  	SAHF
    1138/    8798 : 89 1E 20 09         	MOV	[PROGND],BX		; Set program end
    1139/    879C :                     ;
    1140/    879C :                     RUNFST:
    1141/    879C : 8B 1E A8 08         	MOV	BX,[BASTXT]		; Clear all variables
    1142/    87A0 : 9F                  	LAHF
    1143/    87A1 : 4B                  	DEC	BX
    1144/    87A2 : 9E                  	SAHF
    1145/    87A3 :                     ;
    1146/    87A3 :                     INTVAR:
    1147/    87A3 : 89 1E 18 09         	MOV	[BRKLIN],BX		; Initialise RUN variables
    1148/    87A7 : 8B 1E F9 08         	MOV	BX,[LSTRAM]		; Get end of RAM
    1149/    87AB : 89 1E 0D 09         	MOV	[STRBOT],BX		; Clear string space
    1150/    87AF : 32 C0               	XOR	AL,AL
    1151/    87B1 : E8 3A 04            	CALL	RESTOR			; Reset DATA pointers
    1152/    87B4 : 8B 1E 20 09         	MOV	BX,[PROGND]		; Get end of program
    1153/    87B8 : 89 1E 22 09         	MOV	[VAREND],BX		; Clear variables
    1154/    87BC : 89 1E 24 09         	MOV	[ARREND],BX		; Clear arrays
    1155/    87C0 :                     ;
    1156/    87C0 :                     CLREG:
    1157/    87C0 : 59                  	POP	CX			; Save return address
    1158/    87C1 : 8B 1E A4 08         	MOV	BX,[STRSPC]		; Get end of working RAM
    1159/    87C5 : 8B E3               	MOV	SP,BX			; Set stack
    1160/    87C7 : BB FD 08            	MOV	BX,TMSTPL		; Temporary string pool
    1161/    87CA : 89 1E FB 08         	MOV	[TMSTPT],BX		; Reset temporary string ptr
    1162/    87CE : 32 C0               	XOR	AL,AL			; A = 00
    1163/    87D0 : 8A D8               	MOV	BL,AL			; HL = 0000
    1164/    87D2 : 8A F8               	MOV	BH,AL
    1165/    87D4 : 89 1E 1E 09         	MOV	[CONTAD],BX		; No CONTinue
    1166/    87D8 : A2 15 09            	MOV	[FORFLG],AL		; Clear FOR flag
    1167/    87DB : 89 1E 28 09         	MOV	[FNRGNM],BX		 ; Clear FN argument
    1168/    87DF : 53                  	PUSH	BX			; HL = 0000
    1169/    87E0 : 51                  	PUSH	CX			; Put back return
    1170/    87E1 :                     DOAGN:
    1171/    87E1 : 8B 1E 18 09         	MOV	BX,[BRKLIN]		; Get address of code t
    1172/    87E5 : C3                  	RET				; Return to execution d
    1173/    87E6 :                     ;
    1174/    87E6 :                     PROMPT:
    1175/    87E6 : B0 3F               	MOV	AL,'?'			; '?'
    1176/    87E8 : E8 EF 01            	CALL	OUTC			; Output character
    1177/    87EB : B0 20               	MOV	AL,' '			; Space
    1178/    87ED : E8 EA 01            	CALL	OUTC			; Output character
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 21 - 2023/09/19 18時02分31秒


    1179/    87F0 :                     ;	JMP	RINPUT			; Get input line
    1180/    87F0 : E9 3A 01            	JMP	GETLIN			; Get input line
    1181/    87F3 :                     ;
    1182/    87F3 :                     CRUNCH:
    1183/    87F3 : 32 C0               	XOR	AL,AL			; Tokenise line @ HL to BUFFER
    1184/    87F5 : A2 F8 08            	MOV	[DATFLG],AL		; Reset literal flag
    1185/    87F8 : B1 05               	MOV	CL,2+3			; 2 byte number and 3 nulls
    1186/    87FA : BA AB 08            	MOV	DX,BUFFER		; Start of input buffer
    1187/    87FD :                     CRNCLP:
    1188/    87FD : 8A 07               	MOV	AL,[BX]			; Get byte
    1189/    87FF : 3C 20               	CMP	AL,' '			; Is it a space?
    1190/    8801 : 75 03               	JNZ	CRNCLP1			; Yes - Copy direct
    1191/    8803 : E9 9E 00            	JMP	MOVDIR
    1192/    8806 :                     CRNCLP1:
    1193/    8806 : 8A E8               	MOV	CH,AL			; Save character
    1194/    8808 : 3C 22               	CMP	AL,'"'			; Is it a quote?
    1195/    880A : 75 03               	JNZ	CRNCLP2			; Yes - Copy literal string
    1196/    880C : E9 C1 00            	JMP	CPYLIT
    1197/    880F :                     CRNCLP2:
    1198/    880F : 0A C0               	OR	AL,AL			; Is it end of buffer?
    1199/    8811 : 75 03               	JNZ	CRNCLP3			; Yes - End buffer
    1200/    8813 : E9 CA 00            	JMP	ENDBUF
    1201/    8816 :                     CRNCLP3:
    1202/    8816 : A0 F8 08            	MOV	AL,[DATFLG]		; Get data type
    1203/    8819 : 0A C0               	OR	AL,AL			; Literal?
    1204/    881B : 8A 07               	MOV	AL,[BX]			; Get byte to copy
    1205/    881D : 74 03               	JZ	CRNCLP4			; Literal - Copy direct
    1206/    881F : E9 82 00            	JMP	MOVDIR
    1207/    8822 :                     CRNCLP4:
    1208/    8822 : 3C 3F               	CMP	AL,'?'			; Is it '?' short for PRING
    1209/    8824 : B0 9E               	MOV	AL,ZPRINT		; "PRINT" token
    1210/    8826 : 75 02               	JNZ	CRNCLP5			; Yes - replace it
    1211/    8828 : EB 7A               	JMP	MOVDIR
    1212/    882A :                     CRNCLP5:
    1213/    882A : 8A 07               	MOV	AL,[BX]			; Get byte again
    1214/    882C : 3C 30               	CMP	AL,'0'			; Is it less than '0'
    1215/    882E : 72 06               	JC	FNDWRD			; Yes - Look for reserved words
    1216/    8830 : 3C 3C               	CMP	AL,60			; ";"+1; Is it "0123456789:;" ?
    1217/    8832 : 73 02               	JNC	FNDWRD			; Yes - copy it direct
    1218/    8834 : EB 6E               	JMP	MOVDIR
    1219/    8836 :                     FNDWRD:
    1220/    8836 : 52                  	PUSH	DX			; Look for reserved words
    1221/    8837 : BA 6D 83            	MOV	DX,WORDS-1		; Point to table
    1222/    883A : 51                  	PUSH	CX			; Save count
    1223/    883B : B9 9E 88            	MOV	CX,RETNAD		; Where to return to
    1224/    883E : 51                  	PUSH	CX			; Save return address
    1225/    883F : B5 7F               	MOV	CH,ZEND-1		; First token value -1
    1226/    8841 : 8A 07               	MOV	AL,[BX]			; Get byte
    1227/    8843 : 3C 61               	CMP	AL,'a'			; Less than 'a' ?
    1228/    8845 : 72 08               	JC	SEARCH			; Yes - search for words
    1229/    8847 : 3C 7B               	CMP	AL,'z'+1		; Greater than 'z' ?
    1230/    8849 : 73 04               	JNC	SEARCH			; Yes - search for words
    1231/    884B : 24 5F               	AND	AL,01011111B		; Force upper case
    1232/    884D : 88 07               	MOV	[BX],AL			; Replace byte
    1233/    884F :                     SEARCH:
    1234/    884F : 8A 0F               	MOV	CL,[BX]			; Search for a word
    1235/    8851 : 87 DA               	XCHG	BX,DX
    1236/    8853 :                     GETNXT:
    1237/    8853 : 9F                  	LAHF
    1238/    8854 : 43                  	INC	BX
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 22 - 2023/09/19 18時02分31秒


    1239/    8855 : 9E                  	SAHF				; Get next reserved word
    1240/    8856 : 0A 07               	OR	AL,[BX]			; Start of word?
    1241/    8858 : 79 F9               	JNS	GETNXT			; No - move on
    1242/    885A : FE C5               	INC	CH			; Increment token value
    1243/    885C : 8A 07               	MOV	AL,[BX]			; Get byte from table
    1244/    885E : 24 7F               	AND	AL,01111111B		; Strip bit 7
    1245/    8860 : 75 01               	JNZ	GETNXT1
    1246/    8862 : C3                  	RET				; Return if end of list
    1247/    8863 :                     GETNXT1:
    1248/    8863 : 3A C1               	CMP	AL,CL			; Same character as in buffer?
    1249/    8865 : 75 EC               	JNZ	GETNXT			; No - get next word
    1250/    8867 : 87 DA               	XCHG	BX,DX
    1251/    8869 : 53                  	PUSH	BX			; Save start of word
    1252/    886A :                     ;
    1253/    886A :                     NXTBYT:
    1254/    886A : 9F                  	LAHF
    1255/    886B : 42                  	INC	DX			; Look through rest of word
    1256/    886C : 9E                  	SAHF
    1257/    886D : 87 DA               	XCHG	BX,DX
    1258/    886F : 8A 07               	MOV	AL,[BX]			; Get byte from table
    1259/    8871 : 87 DA               	XCHG	BX,DX
    1260/    8873 : 0A C0               	OR	AL,AL			; End of word ?
    1261/    8875 : 78 1E               	JS	MATCH			; Yes - Match found
    1262/    8877 : 8A C8               	MOV	CL,AL			; Save it
    1263/    8879 : 8A C5               	MOV	AL,CH			; Get token value
    1264/    887B : 3C 88               	CMP	AL,ZGOTO		; Is it "GOTO" token ?
    1265/    887D : 75 06               	JNZ	NOSPC			; No - Don't allow spaces
    1266/    887F : E8 58 03            	CALL	GETCHR			; Get next character
    1267/    8882 : 9F                  	LAHF
    1268/    8883 : 4B                  	DEC	BX			; Cancel increment fromGETCHR
    1269/    8884 : 9E                  	SAHF
    1270/    8885 :                     NOSPC:
    1271/    8885 :                     ;	LAHF
    1272/    8885 : 43                  	INC	BX
    1273/    8886 :                     ;	SAHF				; Next byte
    1274/    8886 : 8A 07               	MOV	AL,[BX]			; Get byte
    1275/    8888 : 3C 61               	CMP	AL,'a'			; Less than 'a' ?
    1276/    888A : 72 02               	JC	NOCHNG			; Yes - don't change
    1277/    888C : 24 5F               	AND	AL,01011111B		; Make upper case
    1278/    888E :                     NOCHNG:
    1279/    888E : 3A C1               	CMP	AL,CL			; Same as in buffer ?
    1280/    8890 : 74 D8               	JZ	NXTBYT			; Yes - keep testing
    1281/    8892 : 5B                  	POP	BX			; Get back start of word
    1282/    8893 : EB BA               	JMP	SEARCH			; Look at next word
    1283/    8895 :                     ;
    1284/    8895 :                     MATCH:
    1285/    8895 : 8A CD               	MOV	CL,CH			; Word found - Save token value
    1286/    8897 : 58                  	POP	AX			; Throw away return
    1287/    8898 : 86 E0               	XCHG	AH,AL
    1288/    889A : 9E                  	SAHF
    1289/    889B : 87 DA               	XCHG	BX,DX
    1290/    889D : C3                  	RET				; Return to "RETNAD"
    1291/    889E :                     RETNAD:
    1292/    889E : 87 DA               	XCHG	BX,DX			; Get address in string
    1293/    88A0 : 8A C1               	MOV	AL,CL			; Get token value
    1294/    88A2 : 59                  	POP	CX			; Restore buffer length
    1295/    88A3 : 5A                  	POP	DX			; Get destination address
    1296/    88A4 :                     MOVDIR:
    1297/    88A4 : 9F                  	LAHF
    1298/    88A5 : 43                  	INC	BX			; Next source in buffer
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 23 - 2023/09/19 18時02分31秒


    1299/    88A6 : 9E                  	SAHF
    1300/    88A7 : 87 DA               	XCHG	BX,DX
    1301/    88A9 : 88 07               	MOV	[BX],AL			; Put byte in buffer
    1302/    88AB : 87 DA               	XCHG	BX,DX
    1303/    88AD : 9F                  	LAHF
    1304/    88AE : 42                  	INC	DX			; Move up buffer
    1305/    88AF : 9E                  	SAHF
    1306/    88B0 : FE C1               	INC	CL			; Increment length of buffer
    1307/    88B2 : 2C 3A               	SUB	AL,':'			; End of statement?
    1308/    88B4 : 74 04               	JZ	SETLIT			; Jump if multi-stateme line
    1309/    88B6 : 3C 49               	CMP	AL,ZDATA-3AH		; Is it DATA statement ?
    1310/    88B8 : 75 03               	JNZ	TSTREM			; No - see if REM
    1311/    88BA :                     SETLIT:
    1312/    88BA : A2 F8 08            	MOV	[DATFLG],AL		; Set literal flag
    1313/    88BD :                     TSTREM:
    1314/    88BD : 2C 54               	SUB	AL,ZREM-3AH		; Is it REM?
    1315/    88BF : 74 03               	JZ	TSTREM1			; No - Leave flag
    1316/    88C1 : E9 39 FF            	JMP	CRNCLP
    1317/    88C4 :                     TSTREM1:
    1318/    88C4 : 8A E8               	MOV	CH,AL			; Copy rest of buffer
    1319/    88C6 :                     NXTCHR:
    1320/    88C6 : 8A 07               	MOV	AL,[BX]			; Get byte
    1321/    88C8 : 0A C0               	OR	AL,AL			; End of line ?
    1322/    88CA : 74 14               	JZ	ENDBUF			; Yes - Terminate buffe
    1323/    88CC : 3A C5               	CMP	AL,CH			; End of statement ?
    1324/    88CE : 74 D4               	JZ	MOVDIR			; Yes - Get next one
    1325/    88D0 :                     CPYLIT:
    1326/    88D0 : 9F                  	LAHF
    1327/    88D1 : 43                  	INC	BX			; Move up source string
    1328/    88D2 : 9E                  	SAHF
    1329/    88D3 : 87 DA               	XCHG	BX,DX
    1330/    88D5 : 88 07               	MOV	[BX],AL			; Save in destination
    1331/    88D7 : 87 DA               	XCHG	BX,DX
    1332/    88D9 : FE C1               	INC	CL			; Increment length
    1333/    88DB : 9F                  	LAHF
    1334/    88DC : 42                  	INC	DX			; Move up destination
    1335/    88DD : 9E                  	SAHF
    1336/    88DE : EB E6               	JMP	NXTCHR			; Repeat
    1337/    88E0 :                     ;
    1338/    88E0 :                     ENDBUF:
    1339/    88E0 : BB AA 08            	MOV	BX,BUFFER-1		; Point to start of buffer
    1340/    88E3 : 87 DA               	XCHG	BX,DX
    1341/    88E5 : 88 07               	MOV	[BX],AL			; Mark end of buffer (A = 00)
    1342/    88E7 : 87 DA               	XCHG	BX,DX
    1343/    88E9 :                     ;	LAHF
    1344/    88E9 : 42                  	INC	DX
    1345/    88EA :                     ;	SAHF
    1346/    88EA : 87 DA               	XCHG	BX,DX
    1347/    88EC : 88 07               	MOV	[BX],AL			; A = 00
    1348/    88EE : 87 DA               	XCHG	BX,DX
    1349/    88F0 :                     ;	LAHF
    1350/    88F0 : 42                  	INC	DX
    1351/    88F1 :                     ;	SAHF
    1352/    88F1 : 87 DA               	XCHG	BX,DX
    1353/    88F3 : 88 07               	MOV	[BX],AL			; A = 00
    1354/    88F5 : 87 DA               	XCHG	BX,DX
    1355/    88F7 : C3                  	RET
    1356/    88F8 :                     ;
    1357/    88F8 :                     DODEL:
    1358/    88F8 : A0 8E 08            	MOV	AL,[NULFLG]		; Get null flag status
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 24 - 2023/09/19 18時02分31秒


    1359/    88FB : 0A C0               	OR	AL,AL			; Is it zero?
    1360/    88FD : B0 00               	MOV	AL,0			; Zero A - Leave flags
    1361/    88FF : A2 8E 08            	MOV	[NULFLG],AL		; Zero null flag
    1362/    8902 : 75 09               	JNZ	ECHDEL			; Set - Echo it
    1363/    8904 : FE CD               	DEC	CH			; Decrement length
    1364/    8906 : 74 25               	JZ	GETLIN			; Get line again if empty
    1365/    8908 : E8 CF 00            	CALL	OUTC			; Output null character
    1366/    890B : EB 02               	JMP	ECHDEL1			; Skip "DEC B"
    1367/    890D :                     ECHDEL:
    1368/    890D : FE CD               	DEC	CH			; Count bytes in buffer
    1369/    890F :                     ECHDEL1:
    1370/    890F : 9F                  	LAHF
    1371/    8910 : 4B                  	DEC	BX			; Back space buffer
    1372/    8911 : 9E                  	SAHF
    1373/    8912 : 74 11               	JZ	OTKLN			; No buffer - Try again
    1374/    8914 : 8A 07               	MOV	AL,[BX]			; Get deleted byte
    1375/    8916 : E8 C1 00            	CALL	OUTC			; Echo it
    1376/    8919 : EB 1C               	JMP	MORINP			; Get more input
    1377/    891B :                     ;
    1378/    891B :                     DELCHR:
    1379/    891B : FE CD               	DEC	CH			; Count bytes in buffer
    1380/    891D : 9F                  	LAHF
    1381/    891E : 4B                  	DEC	BX			; Back space buffer
    1382/    891F : 9E                  	SAHF
    1383/    8920 : E8 B7 00            	CALL	OUTC			; Output character in A
    1384/    8923 : 75 12               	JNZ	MORINP			; Not end - Get more
    1385/    8925 :                     OTKLN:
    1386/    8925 : E8 B2 00            	CALL	OUTC			; Output character in A
    1387/    8928 :                     KILIN:
    1388/    8928 : E8 35 06            	CALL	PRCRLF			; Output CRLF
    1389/    892B : EB 00               	JMP	TTYLIN			; Get line again
    1390/    892D :                     ;
    1391/    892D :                     GETLIN:
    1392/    892D :                     TTYLIN:
    1393/    892D : BB AB 08            	MOV	BX,BUFFER		; Get a line by charact
    1394/    8930 : B5 01               	MOV	CH,1			; Set buffer as empty
    1395/    8932 : 32 C0               	XOR	AL,AL
    1396/    8934 : A2 8E 08            	MOV	[NULFLG],AL		; Clear null flag
    1397/    8937 :                     MORINP:
    1398/    8937 : E8 E2 00            	CALL	CLOTST			; Get character and test ^O
    1399/    893A : 8A C8               	MOV	CL,AL			; Save character in C
    1400/    893C : 3C 7F               	CMP	AL,DEL			; Delete character?
    1401/    893E : 74 B8               	JZ	DODEL			; Yes - Process it
    1402/    8940 : A0 8E 08            	MOV	AL,[NULFLG]		; Get null flag
    1403/    8943 : 0A C0               	OR	AL,AL			; Test null flag status
    1404/    8945 : 74 0A               	JZ	PROCES			; Reset - Process character
    1405/    8947 : B0 00               	MOV	AL,0			; Set a null
    1406/    8949 : E8 8E 00            	CALL	OUTC			; Output null
    1407/    894C : 32 C0               	XOR	AL,AL			; Clear A
    1408/    894E : A2 8E 08            	MOV	[NULFLG],AL		; Reset null flag
    1409/    8951 :                     PROCES:
    1410/    8951 : 8A C1               	MOV	AL,CL			; Get character
    1411/    8953 : 3C 07               	CMP	AL,CTRLG		; Bell?
    1412/    8955 : 74 3E               	JZ	PUTCTL			; Yes - Save it
    1413/    8957 : 3C 03               	CMP	AL,CTRLC		; Is it control "C"?
    1414/    8959 : 75 03               	JNZ	PROCES1
    1415/    895B : E8 02 06            	CALL	PRCRLF			; Yes - Output CRLF
    1416/    895E :                     PROCES1:
    1417/    895E : F9                  	STC				; Flag break
    1418/    895F : 75 01               	JNZ	PROCES2
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 25 - 2023/09/19 18時02分31秒


    1419/    8961 : C3                  	RET				; Return if control "C"
    1420/    8962 :                     PROCES2:
    1421/    8962 : 3C 0D               	CMP	AL,CR			; Is it enter?
    1422/    8964 : 75 03               	JNZ	PROCES3			; Yes - Terminate input
    1423/    8966 : E9 F1 05            	JMP	ENDINP
    1424/    8969 :                     PROCES3:
    1425/    8969 : 3C 15               	CMP	AL,CTRLU		; Is it control "U"?
    1426/    896B : 74 BB               	JZ	KILIN			; Yes - Get another line
    1427/    896D : 3C 40               	CMP	AL,'@'			; Is it "kill line"?
    1428/    896F : 74 B4               	JZ	OTKLN			; Yes - Kill line
    1429/    8971 : 3C 5F               	CMP	AL,'_'			; Is it delete?
    1430/    8973 : 74 A6               	JZ	DELCHR			; Yes - Delete character
    1431/    8975 : 3C 08               	CMP	AL,BKSP			; Is it backspace?
    1432/    8977 : 74 A2               	JZ	DELCHR			; Yes - Delete character
    1433/    8979 : 3C 12               	CMP	AL,CTRLR		; Is it control "R"?
    1434/    897B : 75 14               	JNZ	PUTBUF			; No - Put in buffer
    1435/    897D : 51                  	PUSH	CX			; Save buffer length
    1436/    897E : 52                  	PUSH	DX			; Save DE
    1437/    897F : 53                  	PUSH	BX			; Save buffer address
    1438/    8980 : C6 07 00            	MOV	BYTE PTR [BX],0		; Mark end of buffer
    1439/    8983 : E8 05 1E            	CALL	OUTNCR			; Output and do CRLF
    1440/    8986 : BB AB 08            	MOV	BX,BUFFER		; Point to buffer start
    1441/    8989 : E8 19 0F            	CALL	PRS			; Output buffer
    1442/    898C : 5B                  	POP	BX			; Restore buffer address
    1443/    898D : 5A                  	POP	DX			; Restore DE
    1444/    898E : 59                  	POP	CX			; Restore buffer length
    1445/    898F : EB A6               	JMP	MORINP			; Get another character
    1446/    8991 :                     ;
    1447/    8991 :                     PUTBUF:
    1448/    8991 : 3C 20               	CMP	AL,' '			; Is it a control code?
    1449/    8993 : 72 A2               	JC	MORINP			; Yes - Ignore
    1450/    8995 :                     PUTCTL:
    1451/    8995 : 8A C5               	MOV	AL,CH			; Get number of bytes in buffer
    1452/    8997 : 3C 49               	CMP	AL,72+1			; Test for line overflow
    1453/    8999 : B0 07               	MOV	AL,CTRLG		; Set a bell
    1454/    899B : 73 11               	JNC	OUTNBS			; Ring bell if buffer full
    1455/    899D : 8A C1               	MOV	AL,CL			; Get character
    1456/    899F : 88 0F               	MOV	[BX],CL			; Save in buffer
    1457/    89A1 : A2 16 09            	MOV	[LSTBIN],AL		; Save last input byte
    1458/    89A4 : 9F                  	LAHF
    1459/    89A5 : 43                  	INC	BX			; Move up buffer
    1460/    89A6 : 9E                  	SAHF
    1461/    89A7 : FE C5               	INC	CH			; Increment length
    1462/    89A9 :                     OUTIT:
    1463/    89A9 : E8 2E 00            	CALL	OUTC			; Output the character entered
    1464/    89AC : EB 89               	JMP	MORINP			; Get another character
    1465/    89AE :                     ;
    1466/    89AE :                     OUTNBS:
    1467/    89AE : E8 29 00            	CALL	OUTC			; Output bell and back over it
    1468/    89B1 : B0 08               	MOV	AL,BKSP			; Set back space
    1469/    89B3 : EB F4               	JMP	OUTIT			; Output it and get more
    1470/    89B5 :                     ;
    1471/    89B5 :                     ; Z or Overflow
    1472/    89B5 :                     CPDEHL:
    1473/    89B5 : 8A C7               	MOV	AL,BH			; Get H
    1474/    89B7 : 2A C6               	SUB	AL,DH			; Compare with D
    1475/    89B9 : 74 01               	JZ	CPDEHL1
    1476/    89BB : C3                  	RET				; Different - Exit
    1477/    89BC :                     CPDEHL1:
    1478/    89BC : 8A C3               	MOV	AL,BL			; Get L
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 26 - 2023/09/19 18時02分31秒


    1479/    89BE : 2A C2               	SUB	AL,DL			; Compare with E
    1480/    89C0 : C3                  	RET				; Return status
    1481/    89C1 :                     ;
    1482/    89C1 :                     CHKSYN:
    1483/    89C1 : 8A 07               	MOV	AL,[BX]			; Check syntax of character
    1484/    89C3 : 8B EC               	MOV	BP,SP
    1485/    89C5 : 87 5E 00            	XCHG	[BP],BX			; Address of test byte
    1486/    89C8 : 3A 07               	CMP	AL,[BX]			; Same as in code string?
    1487/    89CA : 9F                  	LAHF
    1488/    89CB : 43                  	INC	BX			; Return address
    1489/    89CC : 9E                  	SAHF
    1490/    89CD : 8B EC               	MOV	BP,SP
    1491/    89CF : 87 5E 00            	XCHG	[BP],BX			; Put it back
    1492/    89D2 : 75 03               	JNZ	CHKSYN1			; Yes - Get next character
    1493/    89D4 : E9 03 02            	JMP	GETCHR
    1494/    89D7 :                     CHKSYN1:
    1495/    89D7 : E9 31 FC            	JMP	SNERR			; Different - ?SN Error
    1496/    89DA :                     ;
    1497/    89DA :                     OUTC:
    1498/    89DA : 9F                  	LAHF
    1499/    89DB : 86 E0               	XCHG	AH,AL
    1500/    89DD : 50                  	PUSH	AX			; Save character
    1501/    89DE : 86 E0               	XCHG	AH,AL
    1502/    89E0 : A0 8F 08            	MOV	AL,[CTLOFG]		; Get control "O" flag
    1503/    89E3 : 0A C0               	OR	AL,AL			; Is it set?
    1504/    89E5 : 74 03               	JZ	OUTC1			; Yes - don't output
    1505/    89E7 : E9 0F 0F            	JMP	POPAF
    1506/    89EA :                     OUTC1:
    1507/    89EA : 58                  	POP	AX			; Restore character
    1508/    89EB : 86 E0               	XCHG	AH,AL
    1509/    89ED : 9E                  	SAHF
    1510/    89EE : 51                  	PUSH	CX			; Save buffer length
    1511/    89EF : 9F                  	LAHF
    1512/    89F0 : 86 E0               	XCHG	AH,AL
    1513/    89F2 : 50                  	PUSH	AX			; Save character
    1514/    89F3 : 86 E0               	XCHG	AH,AL
    1515/    89F5 : 3C 20               	CMP	AL,' '			; Is it a control code?
    1516/    89F7 : 72 1A               	JC	DINPOS			; Yes - Don't INC POS(X)
    1517/    89F9 : A0 8C 08            	MOV	AL,[LWIDTH]		; Get line width
    1518/    89FC : 8A E8               	MOV	CH,AL			; To B
    1519/    89FE : A0 F5 08            	MOV	AL,[CURPOS]		; Get cursor position
    1520/    8A01 : FE C5               	INC	CH			; Width 255?
    1521/    8A03 : 74 09               	JZ	INCLEN			; Yes - No width limit
    1522/    8A05 : FE CD               	DEC	CH			; Restore width
    1523/    8A07 : 3A C5               	CMP	AL,CH			; At end of line?
    1524/    8A09 : 75 03               	JNZ	INCLEN
    1525/    8A0B : E8 52 05            	CALL	PRCRLF			; Yes - output CRLF
    1526/    8A0E :                     INCLEN:
    1527/    8A0E : FE C0               	INC	AL			; Move on one character
    1528/    8A10 : A2 F5 08            	MOV	[CURPOS],AL		; Save new position
    1529/    8A13 :                     DINPOS:
    1530/    8A13 : 58                  	POP	AX			; Restore character
    1531/    8A14 : 86 E0               	XCHG	AH,AL
    1532/    8A16 : 9E                  	SAHF
    1533/    8A17 : 59                  	POP	CX			; Restore buffer length
    1534/    8A18 : E8 43 F6            	CALL	putch			; Send it
    1535/    8A1B : C3                  	RET
    1536/    8A1C :                     ;
    1537/    8A1C :                     CLOTST:
    1538/    8A1C : E8 10 F6            	CALL	getch			; Get input character
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 27 - 2023/09/19 18時02分31秒


    1539/    8A1F : 24 7F               	AND	AL,01111111B		; Strip bit 7
    1540/    8A21 : 3C 0F               	CMP	AL,CTRLO		; Is it control "O"?
    1541/    8A23 : 74 01               	JZ	CLOTST1
    1542/    8A25 : C3                  	RET				; No don't flip flag
    1543/    8A26 :                     CLOTST1:
    1544/    8A26 : A0 8F 08            	MOV	AL,[CTLOFG]		; Get flag
    1545/    8A29 : F6 D0               	NOT	AL			; Flip it
    1546/    8A2B : A2 8F 08            	MOV	[CTLOFG],AL		; Put it back
    1547/    8A2E : 32 C0               	XOR	AL,AL			; Null character
    1548/    8A30 : C3                  	RET
    1549/    8A31 :                     ;
    1550/    8A31 :                     LIST:
    1551/    8A31 : E8 BA 02            	CALL	ATOH			; ASCII number to DE
    1552/    8A34 : 74 01               	JZ	LIST1
    1553/    8A36 : C3                  	RET				; Return if anything extra
    1554/    8A37 :                     LIST1:
    1555/    8A37 : 59                  	POP	CX			; Rubbish - Not needed
    1556/    8A38 : E8 18 FD            	CALL	SRCHLN			; Search for line number in DE
    1557/    8A3B : 51                  	PUSH	CX			; Save address of line
    1558/    8A3C : E8 65 00            	CALL	SETLIN			; Set up lines counter
    1559/    8A3F :                     LISTLP:
    1560/    8A3F : 5B                  	POP	BX			; Restore address of line
    1561/    8A40 : 8A 0F               	MOV	CL,[BX]			; Get LSB of next line
    1562/    8A42 :                     ;	LAHF
    1563/    8A42 : 43                  	INC	BX
    1564/    8A43 :                     ;	SAHF
    1565/    8A43 : 8A 2F               	MOV	CH,[BX]			; Get MSB of next line
    1566/    8A45 :                     ;	LAHF
    1567/    8A45 : 43                  	INC	BX
    1568/    8A46 :                     ;	SAHF
    1569/    8A46 : 8A C5               	MOV	AL,CH			; BC = 0 (End of program)?
    1570/    8A48 : 0A C1               	OR	AL,CL
    1571/    8A4A : 75 03               	JNZ	LISTLP1			; Yes - Go to command mode
    1572/    8A4C : E9 17 FC            	JMP	PRNTOK
    1573/    8A4F :                     LISTLP1:
    1574/    8A4F : E8 5D 00            	CALL	COUNT			; Count lines
    1575/    8A52 : E8 BC 01            	CALL	TSTBRK			; Test for break key
    1576/    8A55 : 51                  	PUSH	CX			; Save address of next line
    1577/    8A56 : E8 07 05            	CALL	PRCRLF			; Output CRLF
    1578/    8A59 : 8A 17               	MOV	DL,[BX]			; Get LSB of line numbe
    1579/    8A5B : 9F                  	LAHF
    1580/    8A5C : 43                  	INC	BX
    1581/    8A5D : 9E                  	SAHF
    1582/    8A5E : 8A 37               	MOV	DH,[BX]			; Get MSB of line number
    1583/    8A60 : 9F                  	LAHF
    1584/    8A61 : 43                  	INC	BX
    1585/    8A62 : 9E                  	SAHF
    1586/    8A63 : 53                  	PUSH	BX			; Save address of line start
    1587/    8A64 : 87 DA               	XCHG	BX,DX			; Line number to HL
    1588/    8A66 : E8 B4 17            	CALL	PRNTHL			; Output line number in decimal
    1589/    8A69 : B0 20               	MOV	AL,' '			; Space after line number
    1590/    8A6B : 5B                  	POP	BX			; Restore start of line address
    1591/    8A6C :                     LSTLP2:
    1592/    8A6C : E8 6B FF            	CALL	OUTC			; Output character in A
    1593/    8A6F :                     LSTLP3:
    1594/    8A6F : 8A 07               	MOV	AL,[BX]			; Get next byte in line
    1595/    8A71 : 0A C0               	OR	AL,AL			; End of line?
    1596/    8A73 : 9F                  	LAHF
    1597/    8A74 : 43                  	INC	BX			; To next byte in line
    1598/    8A75 : 9E                  	SAHF
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 28 - 2023/09/19 18時02分31秒


    1599/    8A76 : 74 C7               	JZ	LISTLP			; Yes - get next line
    1600/    8A78 : 79 F2               	JNS	LSTLP2			; No token - output it
    1601/    8A7A : 2C 7F               	SUB	AL,ZEND-1		; Find and output word
    1602/    8A7C : 8A C8               	MOV	CL,AL			; Token offset+1 to C
    1603/    8A7E : BA 6E 83            	MOV	DX,WORDS		; Reserved word list
    1604/    8A81 :                     FNDTOK:
    1605/    8A81 : 87 DA               	XCHG	BX,DX
    1606/    8A83 : 8A 07               	MOV	AL,[BX]			; Get character in list
    1607/    8A85 : 87 DA               	XCHG	BX,DX
    1608/    8A87 :                     ;	LAHF
    1609/    8A87 : 42                  	INC	DX			; Move on to next
    1610/    8A88 :                     ;	SAHF
    1611/    8A88 : 0A C0               	OR	AL,AL			; Is it start of word?
    1612/    8A8A : 79 F5               	JNS	FNDTOK			; No - Keep looking for word
    1613/    8A8C : FE C9               	DEC	CL			; Count words
    1614/    8A8E : 75 F1               	JNZ	FNDTOK			; Not there - keep look
    1615/    8A90 :                     OUTWRD:
    1616/    8A90 : 24 7F               	AND	AL,01111111B		; Strip bit 7
    1617/    8A92 : E8 45 FF            	CALL	OUTC			; Output first character
    1618/    8A95 : 87 DA               	XCHG	BX,DX
    1619/    8A97 : 8A 07               	MOV	AL,[BX]			; Get next character
    1620/    8A99 : 87 DA               	XCHG	BX,DX
    1621/    8A9B : 9F                  	LAHF
    1622/    8A9C : 42                  	INC	DX			; Move on to next
    1623/    8A9D : 9E                  	SAHF
    1624/    8A9E : 0A C0               	OR	AL,AL			; Is it end of word?
    1625/    8AA0 : 79 EE               	JNS	OUTWRD			; No - output the rest
    1626/    8AA2 : EB CB               	JMP	LSTLP3			; Next byte in line
    1627/    8AA4 :                     ;
    1628/    8AA4 :                     SETLIN:
    1629/    8AA4 : 53                  	PUSH	BX			; Set up LINES counter
    1630/    8AA5 : 8B 1E 92 08         	MOV	BX,[LINESN]		; Get LINES number
    1631/    8AA9 : 89 1E 90 08         	MOV	[LINESC],BX		; Save in LINES counter
    1632/    8AAD : 5B                  	POP	BX
    1633/    8AAE : C3                  	RET
    1634/    8AAF :                     ;
    1635/    8AAF :                     COUNT:
    1636/    8AAF : 53                  	PUSH	BX			; Save code string address
    1637/    8AB0 : 52                  	PUSH	DX
    1638/    8AB1 : 8B 1E 90 08         	MOV	BX,[LINESC]		; Get LINES counter
    1639/    8AB5 : BA FF FF            	MOV	DX,-1
    1640/    8AB8 : 13 DA               	ADC	BX,DX			; Decrement
    1641/    8ABA :                     ;
    1642/    8ABA : 89 1E 90 08         	MOV	[LINESC],BX		; Put it back
    1643/    8ABE : 5A                  	POP	DX
    1644/    8ABF : 5B                  	POP	BX			; Restore code string address
    1645/    8AC0 : 78 01               	JS	COUNT1
    1646/    8AC2 : C3                  	RET				; Return if more lines to go
    1647/    8AC3 :                     COUNT1:
    1648/    8AC3 : 53                  	PUSH	BX			; Save code string address
    1649/    8AC4 : 8B 1E 92 08         	MOV	BX,[LINESN]		; Get LINES number
    1650/    8AC8 : 89 1E 90 08         	MOV	[LINESC],BX		; Reset LINES counter
    1651/    8ACC : E8 60 F5            	CALL	getch			; Get input character
    1652/    8ACF : 3C 03               	CMP	AL,CTRLC		; Is it control "C"?
    1653/    8AD1 : 74 03               	JZ	RSLNBK			; Yes - Reset LINES an break
    1654/    8AD3 : 5B                  	POP	BX			; Restore code string address
    1655/    8AD4 : EB D9               	JMP	COUNT			; Keep on counting
    1656/    8AD6 :                     ;
    1657/    8AD6 :                     RSLNBK:
    1658/    8AD6 : 8B 1E 92 08         	MOV	BX,[LINESN]		; Get LINES number
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 29 - 2023/09/19 18時02分31秒


    1659/    8ADA : 89 1E 90 08         	MOV	[LINESC],BX		; Reset LINES counter
    1660/    8ADE : E9 BF F7            	JMP	BRKRET			; Go and output "Break"
    1661/    8AE1 :                     ;
    1662/    8AE1 :                     FOR:
    1663/    8AE1 : B0 64               	MOV	AL,64H			; Flag "FOR" assignment
    1664/    8AE3 : A2 15 09            	MOV	[FORFLG],AL		; Save "FOR" flag
    1665/    8AE6 : E8 46 03            	CALL	LET			; Set up initial index
    1666/    8AE9 : 59                  	POP	CX			; Drop RETurn address
    1667/    8AEA : 53                  	PUSH	BX			; Save code string address
    1668/    8AEB : E8 1E 03            	CALL	DATA			; Get next statement address
    1669/    8AEE : 89 1E 11 09         	MOV	[LOOPST],BX		; Save it for start of loop
    1670/    8AF2 : BB 02 00            	MOV	BX,2			; Offset for "FOR" block
    1671/    8AF5 : 03 DC               	ADD	BX,SP			; Point to it
    1672/    8AF7 :                     FORSLP:
    1673/    8AF7 : E8 9E FA            	CALL	LOKFOR			; Look for existing "FOR" block
    1674/    8AFA : 5A                  	POP	DX			; Get code string address
    1675/    8AFB : 75 19               	JNZ	FORFND			; No nesting found
    1676/    8AFD : 03 D9               	ADD	BX,CX			; Move into "FOR" block
    1677/    8AFF : 52                  	PUSH	DX			; Save code string address
    1678/    8B00 :                     ;	LAHF
    1679/    8B00 : 4B                  	DEC	BX
    1680/    8B01 :                     ;	SAHF
    1681/    8B01 : 8A 37               	MOV	DH,[BX]			; Get MSB of loop statement
    1682/    8B03 :                     ;	LAHF
    1683/    8B03 : 4B                  	DEC	BX
    1684/    8B04 :                     ;	SAHF
    1685/    8B04 : 8A 17               	MOV	DL,[BX]			; Get LSB of loop statement
    1686/    8B06 :                     ;	LAHF
    1687/    8B06 : 43                  	INC	BX
    1688/    8B07 :                     ;	SAHF
    1689/    8B07 :                     ;	LAHF
    1690/    8B07 : 43                  	INC	BX
    1691/    8B08 :                     ;	SAHF
    1692/    8B08 : 53                  	PUSH	BX			; Save block address
    1693/    8B09 : 8B 1E 11 09         	MOV	BX,[LOOPST]		; Get address of loop statement
    1694/    8B0D : E8 A5 FE            	CALL	CPDEHL			; Compare the FOR loops
    1695/    8B10 : 5B                  	POP	BX			; Restore block address
    1696/    8B11 : 75 E4               	JNZ	FORSLP			; Different FORs - Find another
    1697/    8B13 : 5A                  	POP	DX			; Restore code string address
    1698/    8B14 : 8B E3               	MOV	SP,BX			; Remove all nested loops
    1699/    8B16 :                     ;
    1700/    8B16 :                     FORFND:
    1701/    8B16 : 87 DA               	XCHG	BX,DX			; Code string address to HL
    1702/    8B18 : B1 08               	MOV	CL,8
    1703/    8B1A : E8 C0 FA            	CALL	CHKSTK			; Check for 8 levels of stack
    1704/    8B1D : 53                  	PUSH	BX			; Save code string address
    1705/    8B1E : 8B 1E 11 09         	MOV	BX,[LOOPST]		; Get first statement of loop
    1706/    8B22 : 8B EC               	MOV	BP,SP
    1707/    8B24 : 87 5E 00            	XCHG	[BP],BX			; Save and restore code string
    1708/    8B27 : 53                  	PUSH	BX			; Re-save code string address
    1709/    8B28 : 8B 1E A6 08         	MOV	BX,[LINEAT]		; Get current line number
    1710/    8B2C : 8B EC               	MOV	BP,SP
    1711/    8B2E : 87 5E 00            	XCHG	[BP],BX			; Save and restore code string
    1712/    8B31 : E8 79 06            	CALL	TSTNUM			; Make sure it's a number
    1713/    8B34 : E8 8A FE            	CALL	CHKSYN			; Make sure "TO" is next
    1714/    8B37 : A6                  	DB	ZTO			; "TO" token
    1715/    8B38 : E8 6F 06            	CALL	GETNUM			; Get "TO" expression value
    1716/    8B3B : 53                  	PUSH	BX			; Save code string address
    1717/    8B3C : E8 E9 14            	CALL	BCDEFP			; Move "TO" value to BCDE
    1718/    8B3F : 5B                  	POP	BX			; Restore code string address
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 30 - 2023/09/19 18時02分31秒


    1719/    8B40 : 51                  	PUSH	CX			; Save "TO" value in block
    1720/    8B41 : 52                  	PUSH	DX
    1721/    8B42 : B9 00 81            	MOV	CX,8100H		; BCDE - 1 (default STE
    1722/    8B45 : 8A F1               	MOV	DH,CL			; C=0
    1723/    8B47 : 8A D6               	MOV	DL,DH			; D=0
    1724/    8B49 : 8A 07               	MOV	AL,[BX]			; Get next byte in code string
    1725/    8B4B : 3C AB               	CMP	AL,ZSTEP		; See if "STEP" is stated
    1726/    8B4D : B0 01               	MOV	AL,1			; Sign of step = 1
    1727/    8B4F : 75 0E               	JNZ	SAVSTP			; No STEP given - Default to 1
    1728/    8B51 : E8 86 00            	CALL	GETCHR			; Jump over "STEP" token
    1729/    8B54 : E8 53 06            	CALL	GETNUM			; Get step value
    1730/    8B57 : 53                  	PUSH	BX			; Save code string address
    1731/    8B58 : E8 CD 14            	CALL	BCDEFP			; Move STEP to BCDE
    1732/    8B5B : E8 5A 14            	CALL	TSTSGN			; Test sign of FPREG
    1733/    8B5E : 5B                  	POP	BX			; Restore code string address
    1734/    8B5F :                     SAVSTP:
    1735/    8B5F : 51                  	PUSH	CX			; Save the STEP value in block
    1736/    8B60 : 52                  	PUSH	DX
    1737/    8B61 : 9F                  	LAHF
    1738/    8B62 : 86 E0               	XCHG	AH,AL			; Save sign of STEP
    1739/    8B64 : 50                  	PUSH	AX
    1740/    8B65 : 86 E0               	XCHG	AH,AL
    1741/    8B67 : 44                  	INC	SP			; Don't save flags
    1742/    8B68 : 53                  	PUSH	BX			; Save code string address
    1743/    8B69 : 8B 1E 18 09         	MOV	BX,[BRKLIN]		; Get address of index variable
    1744/    8B6D : 8B EC               	MOV	BP,SP
    1745/    8B6F : 87 5E 00            	XCHG	[BP],BX			; Save and restore code string
    1746/    8B72 :                     PUTFID:
    1747/    8B72 : B5 81               	MOV	CH,ZFOR			; "FOR" block marker
    1748/    8B74 : 51                  	PUSH	CX			; Save it
    1749/    8B75 : 44                  	INC	SP			; Don't save C
    1750/    8B76 :                     ;
    1751/    8B76 :                     RUNCNT:
    1752/    8B76 : E8 98 00            	CALL	TSTBRK			; Execution driver - Test break
    1753/    8B79 : 89 1E 18 09         	MOV	[BRKLIN],BX		; Save code address for a key
    1754/    8B7D : 8A 07               	MOV	AL,[BX]			; Get next byte in code string
    1755/    8B7F : 3C 3A               	CMP	AL,':'			; Multi statement line?
    1756/    8B81 : 74 28               	JZ	EXCUTE			; Yes - Execute it
    1757/    8B83 : 0A C0               	OR	AL,AL			; End of line?
    1758/    8B85 : 74 03               	JZ	RUNCNT1			; No - Syntax error
    1759/    8B87 : E9 81 FA            	JMP	SNERR
    1760/    8B8A :                     RUNCNT1:
    1761/    8B8A : 9F                  	LAHF
    1762/    8B8B : 43                  	INC	BX			; Point to address of next line
    1763/    8B8C : 9E                  	SAHF
    1764/    8B8D : 8A 07               	MOV	AL,[BX]			; Get LSB of line point
    1765/    8B8F : 9F                  	LAHF
    1766/    8B90 : 43                  	INC	BX
    1767/    8B91 : 9E                  	SAHF
    1768/    8B92 : 0A 07               	OR	AL,[BX]			; Is it zero (End of prog)?
    1769/    8B94 : 75 03               	JNZ	RUNCNT2			; Yes - Terminate execution
    1770/    8B96 : E9 B4 00            	JMP	ENDPRG
    1771/    8B99 :                     RUNCNT2:
    1772/    8B99 : 9F                  	LAHF
    1773/    8B9A : 43                  	INC	BX			; Point to line number
    1774/    8B9B : 9E                  	SAHF
    1775/    8B9C : 8A 17               	MOV	DL,[BX]			; Get LSB of line numbe
    1776/    8B9E : 9F                  	LAHF
    1777/    8B9F : 43                  	INC	BX
    1778/    8BA0 : 9E                  	SAHF
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 31 - 2023/09/19 18時02分31秒


    1779/    8BA1 : 8A 37               	MOV	DH,[BX]			; Get MSB of line numbe
    1780/    8BA3 : 87 DA               	XCHG	BX,DX			; Line number to HL
    1781/    8BA5 : 89 1E A6 08         	MOV	[LINEAT],BX		; Save as current line number
    1782/    8BA9 : 87 DA               	XCHG	BX,DX			; Line number back to DE
    1783/    8BAB :                     EXCUTE:
    1784/    8BAB : E8 2C 00            	CALL	GETCHR			; Get key word
    1785/    8BAE : BA 76 8B            	MOV	DX,RUNCNT		; Where to RETurn to
    1786/    8BB1 : 52                  	PUSH	DX			; Save for RETurn
    1787/    8BB2 :                     IFJMP:
    1788/    8BB2 : 75 01               	JNZ	ONJMP
    1789/    8BB4 : C3                  	RET				; Go to RUNCNT if end of STMT
    1790/    8BB5 :                     ONJMP:
    1791/    8BB5 : 2C 80               	SUB	AL,ZEND			; Is it a token?
    1792/    8BB7 : 73 03               	JNC	ONJMP1
    1793/    8BB9 : E9 73 02            	JMP	LET			; No - try to assign it
    1794/    8BBC :                     ONJMP1:
    1795/    8BBC : 3C 25               	CMP	AL,ZNEW+1-ZEND		; END to NEW ?
    1796/    8BBE : 72 03               	JC	ONJMP2
    1797/    8BC0 : E9 48 FA            	JMP	SNERR			; Not a key word - ?SN Error
    1798/    8BC3 :                     ONJMP2:
    1799/    8BC3 : D0 C0               	ROL	AL,1			; Double it
    1800/    8BC5 : 8A C8               	MOV	CL,AL			; BC = Offset into table
    1801/    8BC7 : B5 00               	MOV	CH,0
    1802/    8BC9 : 87 DA               	XCHG	BX,DX			; Save code string address
    1803/    8BCB : BB 8D 84            	MOV	BX,WORDTB		; Keyword address table
    1804/    8BCE : 03 D9               	ADD	BX,CX			; Point to routine address
    1805/    8BD0 : 8A 0F               	MOV	CL,[BX]			; Get LSB of routine address
    1806/    8BD2 : 9F                  	LAHF
    1807/    8BD3 : 43                  	INC	BX
    1808/    8BD4 : 9E                  	SAHF
    1809/    8BD5 : 8A 2F               	MOV	CH,[BX]			; Get MSB of routine address
    1810/    8BD7 : 51                  	PUSH	CX			; Save routine address
    1811/    8BD8 : 87 DA               	XCHG	BX,DX			; Restore code string address
    1812/    8BDA :                     ;
    1813/    8BDA :                     GETCHR:
    1814/    8BDA :                     ;	LAHF
    1815/    8BDA : 43                  	INC	BX			; Point to next character
    1816/    8BDB :                     ;	SAHF
    1817/    8BDB : 8A 07               	MOV	AL,[BX]			; Get next code string byte
    1818/    8BDD : 3C 3A               	CMP	AL,':'			; Z if ':'
    1819/    8BDF : 72 01               	JC	GETCHR1
    1820/    8BE1 : C3                  	RET				; NC if > "9"
    1821/    8BE2 :                     GETCHR1:
    1822/    8BE2 : 3C 20               	CMP	AL,' '
    1823/    8BE4 : 74 F4               	JZ	GETCHR			; Skip over spaces
    1824/    8BE6 : 3C 30               	CMP	AL,'0'
    1825/    8BE8 : F5                  	CMC				; NC if < '0'
    1826/    8BE9 : FE C0               	INC	AL			; Test for zero - Leave carry
    1827/    8BEB : FE C8               	DEC	AL			; Z if Null
    1828/    8BED : C3                  	RET
    1829/    8BEE :                     ;
    1830/    8BEE :                     RESTOR:
    1831/    8BEE : 87 DA               	XCHG	BX,DX			; Save code string address
    1832/    8BF0 : 8B 1E A8 08         	MOV	BX,[BASTXT]		; Point to start of program
    1833/    8BF4 : 74 11               	JZ	RESTNL			; Just RESTORE - reset pointer
    1834/    8BF6 : 87 DA               	XCHG	BX,DX			; Restore code string address
    1835/    8BF8 : E8 F3 00            	CALL	ATOH			; Get line number to DE
    1836/    8BFB : 53                  	PUSH	BX			; Save code string address
    1837/    8BFC : E8 54 FB            	CALL	SRCHLN			; Search for line number in DE
    1838/    8BFF : 8B D9               	MOV	BX,CX			; HL = Address of line
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 32 - 2023/09/19 18時02分31秒


    1839/    8C01 : 5A                  	POP	DX			; Restore code string address
    1840/    8C02 : 72 03               	JC	RESTNL
    1841/    8C04 : E9 CA 01            	JMP	ULERR			; ?UL Error if not found
    1842/    8C07 :                     RESTNL:
    1843/    8C07 : 9F                  	LAHF
    1844/    8C08 : 4B                  	DEC	BX			; Byte before DATA statement
    1845/    8C09 : 9E                  	SAHF
    1846/    8C0A :                     UPDATA:
    1847/    8C0A : 89 1E 26 09         	MOV	[NXTDAT],BX		; Update DATA pointer
    1848/    8C0E : 87 DA               	XCHG	BX,DX			; Restore code string address
    1849/    8C10 : C3                  	RET
    1850/    8C11 :                     ;
    1851/    8C11 :                     
    1852/    8C11 :                     TSTBRK:
    1853/    8C11 : E8 EE F5            	CALL	CHKCHR			; Check input status
    1854/    8C14 : 75 01               	JNZ	TSTBRK1
    1855/    8C16 : C3                  	RET				; No key, go back
    1856/    8C17 :                     TSTBRK1:
    1857/    8C17 : E8 15 F4            	CALL	getch			; Get the key into A
    1858/    8C1A : 3C 1B               	CMP	AL,ESC			; Escape key?
    1859/    8C1C : 74 17               	JZ	BRK			; Yes, break
    1860/    8C1E : 3C 03               	CMP	AL,CTRLC		; <Ctrl-C>
    1861/    8C20 : 74 13               	JZ	BRK			; Yes, break
    1862/    8C22 : 3C 13               	CMP	AL,CTRLS		; Stop scrolling?
    1863/    8C24 : 74 01               	JZ	STALL
    1864/    8C26 : C3                  	RET				; Other key, ignore
    1865/    8C27 :                     ;
    1866/    8C27 :                     
    1867/    8C27 :                     STALL:
    1868/    8C27 : E8 05 F4            	CALL	getch			; Wait for key
    1869/    8C2A : 3C 11               	CMP	AL,CTRLQ		; Resume scrolling?
    1870/    8C2C : 75 01               	JNZ	STALL1
    1871/    8C2E : C3                  	RET				; Release the chokehold
    1872/    8C2F :                     STALL1:
    1873/    8C2F : 3C 03               	CMP	AL,CTRLC		; Second break?
    1874/    8C31 : 74 07               	JZ	STOP			; Break during hold exit
    1875/    8C33 : EB F2               	JMP	STALL			; Loop until <Ctrl-Q> o
    1876/    8C35 :                     ;
    1877/    8C35 :                     BRK:
    1878/    8C35 : B0 FF               	MOV	AL,0FFH      		; Set BRKFLG
    1879/    8C37 : A2 97 08            	MOV	[BRKFLG],AL		; Store it
    1880/    8C3A :                     ;
    1881/    8C3A :                     
    1882/    8C3A :                     STOP:
    1883/    8C3A : 74 01               	JZ	STOP1
    1884/    8C3C : C3                  	RET				; Exit if anything else
    1885/    8C3D :                     STOP1:
    1886/    8C3D : 0C C0               	OR	AL,11000000B		; Flag "STOP"
    1887/    8C3F : EB 03               	JMP	PEND1
    1888/    8C41 :                     PEND:
    1889/    8C41 : 74 01               	JZ	PEND1
    1890/    8C43 : C3                  	RET				; Exit if anything else
    1891/    8C44 :                     PEND1:
    1892/    8C44 : 89 1E 18 09         	MOV	[BRKLIN],BX		; Save point of break
    1893/    8C48 : EB 02               	JMP	INPBRK1			; Skip "OR AL,11111111B"
    1894/    8C4A :                     INPBRK:
    1895/    8C4A : 0C FF               	OR	AL,11111111B		; Flag "Break" wanted
    1896/    8C4C :                     INPBRK1:
    1897/    8C4C : 59                  	POP	CX			; Return not needed and more
    1898/    8C4D :                     ENDPRG:
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 33 - 2023/09/19 18時02分31秒


    1899/    8C4D : 8B 1E A6 08         	MOV	BX,[LINEAT]		; Get current line number
    1900/    8C51 : 9F                  	LAHF
    1901/    8C52 : 86 E0               	XCHG	AH,AL
    1902/    8C54 : 50                  	PUSH	AX			; Save STOP / END statu
    1903/    8C55 : 86 E0               	XCHG	AH,AL
    1904/    8C57 : 8A C3               	MOV	AL,BL			; Is it direct break?
    1905/    8C59 : 22 C7               	AND	AL,BH
    1906/    8C5B : FE C0               	INC	AL			; Line is -1 if direct break
    1907/    8C5D : 74 0C               	JZ	NOLIN			; Yes - No line number
    1908/    8C5F : 89 1E 1C 09         	MOV	[ERRLIN],BX		; Save line of break
    1909/    8C63 : 8B 1E 18 09         	MOV	BX,[BRKLIN]		; Get point of break
    1910/    8C67 : 89 1E 1E 09         	MOV	[CONTAD],BX		; Save point to CONTinue
    1911/    8C6B :                     NOLIN:
    1912/    8C6B : 32 C0               	XOR	AL,AL
    1913/    8C6D : A2 8F 08            	MOV	[CTLOFG],AL		; Enable output
    1914/    8C70 : E8 DF 02            	CALL	STTLIN			; Start a new line
    1915/    8C73 : 58                  	POP	AX			; Restore STOP / END status
    1916/    8C74 : 86 E0               	XCHG	AH,AL
    1917/    8C76 : 9E                  	SAHF
    1918/    8C77 : BB 8D 85            	MOV	BX,BRKMSG		; "Break" message
    1919/    8C7A : 74 03               	JZ	NOLIN1
    1920/    8C7C : E9 C7 F9            	JMP	ERRIN			; "in line" wanted?
    1921/    8C7F :                     NOLIN1:
    1922/    8C7F : E9 E4 F9            	JMP	PRNTOK			; Go to command mode
    1923/    8C82 :                     ;
    1924/    8C82 :                     CONT:
    1925/    8C82 : 8B 1E 1E 09         	MOV	BX,[CONTAD]		; Get CONTinue address
    1926/    8C86 : 8A C7               	MOV	AL,BH			; Is it zero?
    1927/    8C88 : 0A C3               	OR	AL,BL
    1928/    8C8A : B2 20               	MOV	DL,CN			; ?CN Error
    1929/    8C8C : 75 03               	JNZ	CONT1
    1930/    8C8E : E9 92 F9            	JMP	ERROR			; Yes - output "?CN Error"
    1931/    8C91 :                     CONT1:
    1932/    8C91 : 87 DA               	XCHG	BX,DX			; Save code string address
    1933/    8C93 : 8B 1E 1C 09         	MOV	BX,[ERRLIN]		; Get line of last break
    1934/    8C97 : 89 1E A6 08         	MOV	[LINEAT],BX		; Set up current line number
    1935/    8C9B : 87 DA               	XCHG	BX,DX			; Restore code string address
    1936/    8C9D : C3                  	RET				; CONTinue where left off
    1937/    8C9E :                     ;
    1938/    8C9E :                     NULL:
    1939/    8C9E : E8 8D 0F            	CALL	GETINT			; Get integer 0-255
    1940/    8CA1 : 74 01               	JZ	NULL1
    1941/    8CA3 : C3                  	RET				; Return if bad value
    1942/    8CA4 :                     NULL1:
    1943/    8CA4 : A2 8B 08            	MOV	[NULLS],AL		; Set nulls number
    1944/    8CA7 : C3                  	RET
    1945/    8CA8 :                     ;
    1946/    8CA8 :                     
    1947/    8CA8 :                     ACCSUM:
    1948/    8CA8 : 53                  	PUSH	BX			; Save address in array
    1949/    8CA9 : 8B 1E 94 08         	MOV	BX,[CHKSUM]		; Get check sum
    1950/    8CAD : B5 00               	MOV	CH,0			; BC - Value of byte
    1951/    8CAF : 8A C8               	MOV	CL,AL
    1952/    8CB1 : 03 D9               	ADD	BX,CX			; Add byte to check sum
    1953/    8CB3 : 89 1E 94 08         	MOV	[CHKSUM],BX		; Re-save check sum
    1954/    8CB7 : 5B                  	POP	BX			; Restore address in array
    1955/    8CB8 : C3                  	RET
    1956/    8CB9 :                     ;
    1957/    8CB9 :                     CHKLTR:
    1958/    8CB9 : 8A 07               	MOV	AL,[BX]			; Get byte
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 34 - 2023/09/19 18時02分31秒


    1959/    8CBB : 3C 41               	CMP	AL,'A'			; < 'A' ?
    1960/    8CBD : 73 01               	JNC	CHKLTR1
    1961/    8CBF : C3                  	RET         			  ; Carry set if not letter
    1962/    8CC0 :                     CHKLTR1:
    1963/    8CC0 : 3C 5B               	CMP	AL,'Z'+1		; > 'Z' ?
    1964/    8CC2 : F5                  	CMC
    1965/    8CC3 : C3                  	RET				; Carry set if not letter
    1966/    8CC4 :                     ;
    1967/    8CC4 :                     FPSINT:
    1968/    8CC4 : E8 13 FF            	CALL	GETCHR			; Get next character
    1969/    8CC7 :                     POSINT:
    1970/    8CC7 : E8 E0 04            	CALL	GETNUM			; Get integer 0 to 32767
    1971/    8CCA :                     DEPINT:
    1972/    8CCA : E8 EB 12            	CALL	TSTSGN			; Test sign of FPREG
    1973/    8CCD : 78 1A               	JS	FCERR			; Negative - ?FC Error
    1974/    8CCF :                     DEINT:
    1975/    8CCF : A0 31 09            	MOV	AL,[FPEXP]		; Get integer value to DE
    1976/    8CD2 : 3C 90               	CMP	AL,80H+16		; Exponent in range (16 bits)?
    1977/    8CD4 : 73 03               	JNC	DEINT1
    1978/    8CD6 : E9 EC 13            	JMP	FPINT			; Yes - convert it
    1979/    8CD9 :                     DEINT1:
    1980/    8CD9 : B9 80 90            	MOV	CX,9080H		; BCDE = -32768
    1981/    8CDC : BA 00 00            	MOV	DX,0000
    1982/    8CDF : 53                  	PUSH	BX			; Save code string address
    1983/    8CE0 : E8 90 13            	CALL	CMPNUM			; Compare FPREG with BCDE
    1984/    8CE3 : 5B                  	POP	BX			; Restore code string address
    1985/    8CE4 : 8A F1               	MOV	DH,CL			; MSB to D
    1986/    8CE6 : 75 01               	JNZ	FCERR
    1987/    8CE8 : C3                  	RET				; Return if in range
    1988/    8CE9 :                     FCERR:
    1989/    8CE9 : B2 08               	MOV	DL,FC			; ?FC Error
    1990/    8CEB : E9 35 F9            	JMP	ERROR			; Output error-
    1991/    8CEE :                     ;
    1992/    8CEE :                     ATOH:
    1993/    8CEE : 9F                  	LAHF
    1994/    8CEF : 4B                  	DEC	BX			; ASCII number to DE binary
    1995/    8CF0 : 9E                  	SAHF
    1996/    8CF1 :                     GETLN:
    1997/    8CF1 : BA 00 00            	MOV	DX,0			; Get number to DE
    1998/    8CF4 :                     GTLNLP:
    1999/    8CF4 : E8 E3 FE            	CALL	GETCHR			; Get next character
    2000/    8CF7 : 72 01               	JC	GTLNLP1
    2001/    8CF9 : C3                  	RET				; Exit if not a digit
    2002/    8CFA :                     GTLNLP1:
    2003/    8CFA : 53                  	PUSH	BX			; Save code string address
    2004/    8CFB : 9F                  	LAHF
    2005/    8CFC : 86 E0               	XCHG	AH,AL
    2006/    8CFE : 50                  	PUSH	AX			; Save digit
    2007/    8CFF : 86 E0               	XCHG	AH,AL
    2008/    8D01 : BB 98 19            	MOV	BX,65529/10		; Largest number 65529
    2009/    8D04 : E8 AE FC            	CALL	CPDEHL			; Number in range?
    2010/    8D07 : 73 03               	JNC	GTLNLP2			; No - ?SN Error
    2011/    8D09 : E9 FF F8            	JMP	SNERR
    2012/    8D0C :                     GTLNLP2:
    2013/    8D0C : 8B DA               	MOV	BX,DX			; HL = Number
    2014/    8D0E : 03 DA               	ADD	BX,DX			; Times 2
    2015/    8D10 : 03 DB               	ADD	BX,BX			; Times 4
    2016/    8D12 : 03 DA               	ADD	BX,DX			; Times 5
    2017/    8D14 : 03 DB               	ADD	BX,BX			; Times 10
    2018/    8D16 : 58                  	POP	AX			; Restore digit
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 35 - 2023/09/19 18時02分31秒


    2019/    8D17 : 86 E0               	XCHG	AH,AL
    2020/    8D19 : 9E                  	SAHF
    2021/    8D1A : 2C 30               	SUB	AL,'0'			; Make it 0 to 9
    2022/    8D1C : 8A D0               	MOV	DL,AL			; DE = Value of digit
    2023/    8D1E : B6 00               	MOV	DH,0
    2024/    8D20 : 03 DA               	ADD	BX,DX			; Add to number
    2025/    8D22 : 87 DA               	XCHG	BX,DX			; Number to DE
    2026/    8D24 : 5B                  	POP	BX			; Restore code string address
    2027/    8D25 : EB CD               	JMP	GTLNLP			; Go to next character
    2028/    8D27 :                     ;
    2029/    8D27 :                     CLEAR:
    2030/    8D27 : 75 03               	JNZ	CLEAR1
    2031/    8D29 : E9 77 FA            	JMP	INTVAR			; Just "CLEAR" Keep parameters
    2032/    8D2C :                     CLEAR1:
    2033/    8D2C : E8 98 FF            	CALL	POSINT			; Get integer 0 to 32767 to DE
    2034/    8D2F :                     ;	LAHF
    2035/    8D2F : 4B                  	DEC	BX			; Cancel increment
    2036/    8D30 :                     ;	SAHF
    2037/    8D30 : E8 A7 FE            	CALL	GETCHR			; Get next character
    2038/    8D33 : 53                  	PUSH	BX			; Save code string address
    2039/    8D34 : 8B 1E F9 08         	MOV	BX,[LSTRAM]		; Get end of RAM
    2040/    8D38 : 74 19               	JZ	STORED			; No value given - Use stored
    2041/    8D3A : 5B                  	POP	BX			; Restore code string address
    2042/    8D3B : E8 83 FC            	CALL	CHKSYN			; Check for comma
    2043/    8D3E : 2C                  	DB	','
    2044/    8D3F : 52                  	PUSH	DX			; Save number
    2045/    8D40 : E8 84 FF            	CALL	POSINT			; Get integer 0 to 32767
    2046/    8D43 :                     ;	LAHF
    2047/    8D43 : 4B                  	DEC	BX			; Cancel increment
    2048/    8D44 :                     ;	SAHF
    2049/    8D44 : E8 93 FE            	CALL	GETCHR			; Get next character
    2050/    8D47 : 74 03               	JZ	CLEAR2
    2051/    8D49 : E9 BF F8            	JMP	SNERR			; ?SN Error if more on line
    2052/    8D4C :                     CLEAR2:
    2053/    8D4C : 8B EC               	MOV	BP,SP
    2054/    8D4E : 87 5E 00            	XCHG	[BP],BX			; Save code string address
    2055/    8D51 : 87 DA               	XCHG	BX,DX			; Number to DE
    2056/    8D53 :                     STORED:
    2057/    8D53 : 8A C3               	MOV	AL,BL			; Get LSB of new RAM top
    2058/    8D55 : 2A C2               	SUB	AL,DL			; Subtract LSB of string space
    2059/    8D57 : 8A D0               	MOV	DL,AL			; Save LSB
    2060/    8D59 : 8A C7               	MOV	AL,BH			; Get MSB of new RAM top
    2061/    8D5B : 1A C6               	SBB	AL,DH			; Subtract MSB of string space
    2062/    8D5D : 8A F0               	MOV	DH,AL			; Save MSB
    2063/    8D5F : 73 03               	JNC	STORED1
    2064/    8D61 : E9 9B F8            	JMP	OMERR			; ?OM Error if not enough mem
    2065/    8D64 :                     STORED1:
    2066/    8D64 : 53                  	PUSH	BX			; Save RAM top
    2067/    8D65 : 8B 1E 20 09         	MOV	BX,[PROGND]		; Get program end
    2068/    8D69 : B9 28 00            	MOV	CX,40			; 40 Bytes minimum working RAM
    2069/    8D6C : 03 D9               	ADD	BX,CX			; Get lowest address
    2070/    8D6E : E8 44 FC            	CALL	CPDEHL			; Enough memory?
    2071/    8D71 : 72 03               	JC	STORED2
    2072/    8D73 : E9 89 F8            	JMP	OMERR			; No - ?OM Error
    2073/    8D76 :                     STORED2:
    2074/    8D76 : 87 DA               	XCHG	BX,DX			; RAM top to HL
    2075/    8D78 : 89 1E A4 08         	MOV	[STRSPC],BX		; Set new string space
    2076/    8D7C : 5B                  	POP	BX			; End of memory to use
    2077/    8D7D : 89 1E F9 08         	MOV	[LSTRAM],BX		; Set new top of RAM
    2078/    8D81 : 5B                  	POP	BX			; Restore code string address
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 36 - 2023/09/19 18時02分31秒


    2079/    8D82 : E9 1E FA            	JMP	INTVAR			; Initialise variables
    2080/    8D85 :                     ;
    2081/    8D85 :                     RUN:
    2082/    8D85 : 75 03               	JNZ	RUN1
    2083/    8D87 : E9 12 FA            	JMP	RUNFST			; RUN from start if just RUN
    2084/    8D8A :                     RUN1:
    2085/    8D8A : E8 16 FA            	CALL	INTVAR			; Initialise variables
    2086/    8D8D : B9 76 8B            	MOV	CX,RUNCNT		; Execution driver loop
    2087/    8D90 : EB 1A               	JMP	RUNLIN			; RUN from line number
    2088/    8D92 :                     ;
    2089/    8D92 :                     GOSUB:
    2090/    8D92 : B1 03               	MOV	CL,3			; 3 Levels of stack needed
    2091/    8D94 : E8 46 F8            	CALL	CHKSTK			; Check for 3 levels of stack
    2092/    8D97 : 59                  	POP	CX			; Get return address
    2093/    8D98 : 53                  	PUSH	BX			; Save code string for RETURN
    2094/    8D99 : 53                  	PUSH	BX			; And for GOSUB routine
    2095/    8D9A : 8B 1E A6 08         	MOV	BX,[LINEAT]		; Get current line
    2096/    8D9E : 8B EC               	MOV	BP,SP
    2097/    8DA0 : 87 5E 00            	XCHG	[BP],BX			; Into stack - Code string out
    2098/    8DA3 : B0 8C               	MOV	AL,ZGOSUB		; "GOSUB" token
    2099/    8DA5 : 9F                  	LAHF
    2100/    8DA6 : 86 E0               	XCHG	AH,AL
    2101/    8DA8 : 50                  	PUSH	AX			; Save token
    2102/    8DA9 : 86 E0               	XCHG	AH,AL
    2103/    8DAB : 44                  	INC	SP			; Don't save flags
    2104/    8DAC :                     ;
    2105/    8DAC :                     RUNLIN:
    2106/    8DAC : 51                  	PUSH	CX			; Save return address
    2107/    8DAD :                     GOTO:
    2108/    8DAD : E8 3E FF            	CALL	ATOH			; ASCII number to DE binary
    2109/    8DB0 : E8 5D 00            	CALL	REM			; Get end of line
    2110/    8DB3 : 53                  	PUSH	BX			; Save end of line
    2111/    8DB4 : 8B 1E A6 08         	MOV	BX,[LINEAT]		; Get current line
    2112/    8DB8 : E8 FA FB            	CALL	CPDEHL			; Line after current?
    2113/    8DBB : 5B                  	POP	BX			; Restore end of line
    2114/    8DBC : 9F                  	LAHF
    2115/    8DBD : 43                  	INC	BX			; Start of next line
    2116/    8DBE : 9E                  	SAHF
    2117/    8DBF : 73 03               	JNC	GOTO1
    2118/    8DC1 : E8 93 F9            	CALL	SRCHLP			; Line is after current line
    2119/    8DC4 :                     GOTO1:
    2120/    8DC4 : 72 03               	JC	GOTO2
    2121/    8DC6 : E8 8A F9            	CALL	SRCHLN			; Line is before current line
    2122/    8DC9 :                     GOTO2:
    2123/    8DC9 : 8B D9               	MOV	BX,CX			; Set up code string address
    2124/    8DCB : 9F                  	LAHF
    2125/    8DCC : 4B                  	DEC	BX			; Incremented after
    2126/    8DCD : 9E                  	SAHF
    2127/    8DCE : 73 01               	JNC	ULERR
    2128/    8DD0 : C3                  	RET				; Line found
    2129/    8DD1 :                     ULERR:
    2130/    8DD1 : B2 0E               	MOV	DL,UL			; ?UL Error
    2131/    8DD3 : E9 4D F8            	JMP	ERROR			; Output error message
    2132/    8DD6 :                     ;
    2133/    8DD6 :                     RETURN:
    2134/    8DD6 : 74 01               	JZ	RETURN1
    2135/    8DD8 : C3                  	RET				; Return if not just RETURN
    2136/    8DD9 :                     RETURN1:
    2137/    8DD9 : B6 FF               	MOV	DH,-1			; Flag "GOSUB" search
    2138/    8DDB : E8 B5 F7            	CALL	BAKSTK			; Look "GOSUB" block
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 37 - 2023/09/19 18時02分31秒


    2139/    8DDE : 8B E3               	MOV	SP,BX			; Kill all FORs in subroutine
    2140/    8DE0 : 3C 8C               	CMP	AL,ZGOSUB		; Test for "GOSUB" token
    2141/    8DE2 : B2 04               	MOV	DL,RG			; ?RG Error
    2142/    8DE4 : 74 03               	JZ	RETURN2
    2143/    8DE6 : E9 3A F8            	JMP	ERROR			; Error if no "GOSUB" found
    2144/    8DE9 :                     RETURN2:
    2145/    8DE9 : 5B                  	POP	BX			; Get RETURN line number
    2146/    8DEA : 89 1E A6 08         	MOV	[LINEAT],BX		; Save as current
    2147/    8DEE : 9F                  	LAHF
    2148/    8DEF : 43                  	INC	BX			; Was it from direct statement?
    2149/    8DF0 : 9E                  	SAHF
    2150/    8DF1 : 8A C7               	MOV	AL,BH
    2151/    8DF3 : 0A C3               	OR	AL,BL			; Return to line
    2152/    8DF5 : 75 0A               	JNZ	RETLIN			; No - Return to line
    2153/    8DF7 : A0 16 09            	MOV	AL,[LSTBIN]		; Any INPUT in subroutine?
    2154/    8DFA : 0A C0               	OR	AL,AL			; If so buffer is corrupted
    2155/    8DFC : 74 03               	JZ	RETLIN
    2156/    8DFE : E9 64 F8            	JMP	POPNOK			; Yes - Go to command mode
    2157/    8E01 :                     RETLIN:
    2158/    8E01 : BB 76 8B            	MOV	BX,RUNCNT		; Execution driver loop
    2159/    8E04 : 8B EC               	MOV	BP,SP
    2160/    8E06 : 87 5E 00            	XCHG	[BP],BX			; Into stack - Code string out
    2161/    8E09 : EB 01               	JMP	DATA			; Skip "POP BX"
    2162/    8E0B :                     NXTDTA:
    2163/    8E0B : 5B                  	POP	BX			; Restore code string address
    2164/    8E0C :                     ;
    2165/    8E0C :                     DATA:
    2166/    8E0C : B1 3A               	MOV	CL,':'			; ":" End of statemen
    2167/    8E0E : EB 02               	JMP	REM1
    2168/    8E10 :                     REM:
    2169/    8E10 : B1 00               	MOV	CL,0			; 00 End of statemen
    2170/    8E12 :                     REM1:
    2171/    8E12 : B5 00               	MOV	CH,0
    2172/    8E14 :                     NXTSTL:
    2173/    8E14 : 8A C1               	MOV	AL,CL			; Statement and byte
    2174/    8E16 : 8A CD               	MOV	CL,CH
    2175/    8E18 : 8A E8               	MOV	CH,AL			; Statement end byte
    2176/    8E1A :                     NXTSTT:
    2177/    8E1A : 8A 07               	MOV	AL,[BX]			; Get byte
    2178/    8E1C : 0A C0               	OR	AL,AL			; End of line?
    2179/    8E1E : 75 01               	JNZ	NXTSTT1
    2180/    8E20 : C3                  	RET				; Yes - Exit
    2181/    8E21 :                     NXTSTT1:
    2182/    8E21 : 3A C5               	CMP	AL,CH			; End of statement?
    2183/    8E23 : 75 01               	JNZ	NXTSTT2
    2184/    8E25 : C3                  	RET				; Yes - Exit
    2185/    8E26 :                     NXTSTT2:
    2186/    8E26 : 9F                  	LAHF
    2187/    8E27 : 43                  	INC	BX
    2188/    8E28 : 9E                  	SAHF				; Next byte
    2189/    8E29 : 3C 22               	CMP	AL,'"'			; Literal string?
    2190/    8E2B : 74 E7               	JZ	NXTSTL			; Yes - Look for another '"'
    2191/    8E2D : EB EB               	JMP	NXTSTT			; Keep looking
    2192/    8E2F :                     ;
    2193/    8E2F :                     LET:
    2194/    8E2F : E8 4C 06            	CALL	GETVAR			; Get variable name
    2195/    8E32 : E8 8C FB            	CALL	CHKSYN			; Make sure "=" follows
    2196/    8E35 : B4                  	DB	ZEQUAL			; "=" token
    2197/    8E36 : 52                  	PUSH	DX			; Save address of variable
    2198/    8E37 : A0 F7 08            	MOV	AL,[TYPE]		; Get data type
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 38 - 2023/09/19 18時02分31秒


    2199/    8E3A : 9F                  	LAHF
    2200/    8E3B : 86 E0               	XCHG	AH,AL
    2201/    8E3D : 50                  	PUSH	AX			; Save type
    2202/    8E3E : 86 E0               	XCHG	AH,AL
    2203/    8E40 : E8 80 03            	CALL	EVAL			; Evaluate expression
    2204/    8E43 : 58                  	POP	AX			; Restore type
    2205/    8E44 : 86 E0               	XCHG	AH,AL
    2206/    8E46 : 9E                  	SAHF
    2207/    8E47 : 8B EC               	MOV	BP,SP
    2208/    8E49 : 87 5E 00            	XCHG	[BP],BX			; Save code - Get var addr
    2209/    8E4C : 89 1E 18 09         	MOV	[BRKLIN],BX		; Save address of variable
    2210/    8E50 : D0 D8               	RCR	AL,1			; Adjust type
    2211/    8E52 : E8 5D 03            	CALL	CHKTYP			; Check types are the same
    2212/    8E55 : 74 3C               	JZ	LETNUM			; Numeric - Move value
    2213/    8E57 :                     LETSTR:
    2214/    8E57 : 53                  	PUSH	BX			; Save address of string var
    2215/    8E58 : 8B 1E 2E 09         	MOV	BX,[FPREG]		; Pointer to string entry
    2216/    8E5C : 53                  	PUSH	BX			; Save it on stack
    2217/    8E5D :                     ;	LAHF
    2218/    8E5D : 43                  	INC	BX			; Skip over length
    2219/    8E5E :                     ;	SAHF
    2220/    8E5E :                     ;	LAHF
    2221/    8E5E : 43                  	INC	BX
    2222/    8E5F :                     ;	SAHF
    2223/    8E5F : 8A 17               	MOV	DL,[BX]			; LSB of string address
    2224/    8E61 :                     ;	LAHF
    2225/    8E61 : 43                  	INC	BX
    2226/    8E62 :                     ;	SAHF
    2227/    8E62 : 8A 37               	MOV	DH,[BX]			; MSB of string address
    2228/    8E64 : 8B 1E A8 08         	MOV	BX,[BASTXT]		; Point to start of program
    2229/    8E68 : E8 4A FB            	CALL	CPDEHL			; Is string before program?
    2230/    8E6B : 73 14               	JNC	CRESTR			; Yes - Create string entry
    2231/    8E6D : 8B 1E A4 08         	MOV	BX,[STRSPC]		; Point to string space
    2232/    8E71 : E8 41 FB            	CALL	CPDEHL			; Is string literal in program?
    2233/    8E74 : 5A                  	POP	DX			; Restore address of string
    2234/    8E75 : 73 13               	JNC	MVSTPT			; Yes - Set up pointer
    2235/    8E77 : BB 09 09            	MOV	BX,TMPSTR		; Temporary string pool
    2236/    8E7A : E8 38 FB            	CALL	CPDEHL			; Is string in temporary pool?
    2237/    8E7D : 73 0B               	JNC	MVSTPT			; No - Set up pointer
    2238/    8E7F : EB 01               	JMP	CRESTR1			; Skip "POP DX"
    2239/    8E81 :                     CRESTR:
    2240/    8E81 : 5A                  	POP	DX			; Restore address of string
    2241/    8E82 :                     CRESTR1:
    2242/    8E82 : E8 30 0C            	CALL	BAKTMP			; Back to last tmp-str entry
    2243/    8E85 : 87 DA               	XCHG	BX,DX			; Address of string entry
    2244/    8E87 : E8 89 09            	CALL	SAVSTR			; Save string in string area
    2245/    8E8A :                     MVSTPT:
    2246/    8E8A : E8 28 0C            	CALL	BAKTMP			; Back to last tmp-str entry
    2247/    8E8D : 5B                  	POP	BX			; Get string pointer
    2248/    8E8E : E8 AE 11            	CALL	DETHL4			; Move string pointer to var
    2249/    8E91 : 5B                  	POP	BX			; Restore code string adress
    2250/    8E92 : C3                  	RET
    2251/    8E93 :                     ;
    2252/    8E93 :                     LETNUM:
    2253/    8E93 : 53                  	PUSH	BX			; Save address of variable
    2254/    8E94 : E8 A5 11            	CALL	FPTHL			; Move value to variable
    2255/    8E97 : 5A                  	POP	DX			; Restore address of variable
    2256/    8E98 : 5B                  	POP	BX			; Restore code string address
    2257/    8E99 : C3                  	RET
    2258/    8E9A :                     ;
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 39 - 2023/09/19 18時02分31秒


    2259/    8E9A :                     ON:
    2260/    8E9A : E8 91 0D            	CALL	GETINT			; Get integer 0-255
    2261/    8E9D : 8A 07               	MOV	AL,[BX]			; Get "GOTO" or "GOSUB" token
    2262/    8E9F : 8A E8               	MOV	CH,AL			; Save in B
    2263/    8EA1 : 3C 8C               	CMP	AL,ZGOSUB		; "GOSUB" token?
    2264/    8EA3 : 74 07               	JZ	ONGO			; Yes - Find line numbe
    2265/    8EA5 : E8 19 FB            	CALL	CHKSYN			; Make sure it's "GOTO"
    2266/    8EA8 : 88                  	DB	ZGOTO			; "GOTO" token
    2267/    8EA9 : 9F                  	LAHF
    2268/    8EAA : 4B                  	DEC	BX			; Cancel increment
    2269/    8EAB : 9E                  	SAHF
    2270/    8EAC :                     ONGO:
    2271/    8EAC : 8A CA               	MOV	CL,DL			; Integer of branch value
    2272/    8EAE :                     ONGOLP:
    2273/    8EAE : FE C9               	DEC	CL			; Count branches
    2274/    8EB0 : 8A C5               	MOV	AL,CH			; Get "GOTO" or "GOSUB" token
    2275/    8EB2 : 75 03               	JNZ	ONGOLP1
    2276/    8EB4 : E9 FE FC            	JMP	ONJMP			; Go to that line if right one
    2277/    8EB7 :                     ONGOLP1:
    2278/    8EB7 : E8 37 FE            	CALL	GETLN			; Get line number to DE
    2279/    8EBA : 3C 2C               	CMP	AL,','			; Another line number?
    2280/    8EBC : 74 F0               	JZ	ONGOLP
    2281/    8EBE : C3                  	RET				; No - Drop through
    2282/    8EBF : EB ED               	JMP	ONGOLP			; Yes - loop
    2283/    8EC1 :                     ;
    2284/    8EC1 :                     IF:
    2285/    8EC1 : E8 FF 02            	CALL	EVAL			; Evaluate expression
    2286/    8EC4 : 8A 07               	MOV	AL,[BX]			; Get token
    2287/    8EC6 : 3C 88               	CMP	AL,ZGOTO		; "GOTO" token?
    2288/    8EC8 : 74 07               	JZ	IFGO			; Yes - Get line
    2289/    8ECA : E8 F4 FA            	CALL	CHKSYN			; Make sure it's "THEN"
    2290/    8ECD : A9                  	DB	ZTHEN			; "THEN" token
    2291/    8ECE : 9F                  	LAHF
    2292/    8ECF : 4B                  	DEC	BX			; Cancel increment
    2293/    8ED0 : 9E                  	SAHF
    2294/    8ED1 :                     IFGO:
    2295/    8ED1 : E8 D9 02            	CALL	TSTNUM			; Make sure it's numeric
    2296/    8ED4 : E8 E1 10            	CALL	TSTSGN			; Test state of expression
    2297/    8ED7 : 75 03               	JNZ	IFGO1
    2298/    8ED9 : E9 34 FF            	JMP	REM			; False - Drop through
    2299/    8EDC :                     IFGO1:
    2300/    8EDC : E8 FB FC            	CALL	GETCHR			; Get next character
    2301/    8EDF : 73 03               	JNC	IFGO2
    2302/    8EE1 : E9 C9 FE            	JMP	GOTO			; Number - GOTO that line
    2303/    8EE4 :                     IFGO2:
    2304/    8EE4 : E9 CB FC            	JMP	IFJMP			; Otherwise do statemen
    2305/    8EE7 :                     ;
    2306/    8EE7 :                     MRPRNT:
    2307/    8EE7 :                     ;	LAHF
    2308/    8EE7 : 4B                  	DEC	BX			; DEC 'cos GETCHR INCs
    2309/    8EE8 :                     ;	SAHF
    2310/    8EE8 : E8 EF FC            	CALL	GETCHR			; Get next character
    2311/    8EEB :                     PRINT:
    2312/    8EEB : 74 73               	JZ	PRCRLF			; CRLF if just PRINT
    2313/    8EED :                     PRNTLP:
    2314/    8EED : 75 01               	JNZ	PRNTLP1
    2315/    8EEF : C3                  	RET				; End of list - Exit
    2316/    8EF0 :                     PRNTLP1:
    2317/    8EF0 : 3C A5               	CMP	AL,ZTAB			; "TAB(" token?
    2318/    8EF2 : 75 03               	JNZ	PRNTLP2
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 40 - 2023/09/19 18時02分31秒


    2319/    8EF4 : E9 AA 00            	JMP	DOTAB			; Yes - Do TAB routine
    2320/    8EF7 :                     PRNTLP2:
    2321/    8EF7 : 3C A8               	CMP	AL,ZSPC			; "SPC(" token?
    2322/    8EF9 : 75 03               	JNZ	PRNTLP3
    2323/    8EFB : E9 A3 00            	JMP	DOTAB			; Yes - Do SPC routine
    2324/    8EFE :                     PRNTLP3:
    2325/    8EFE : 53                  	PUSH	BX			; Save code string address
    2326/    8EFF : 3C 2C               	CMP	AL,','			; Comma?
    2327/    8F01 : 75 03               	JNZ	PRNTLP4
    2328/    8F03 : E9 82 00            	JMP	DOCOM			; Yes - Move to next zone
    2329/    8F06 :                     PRNTLP4:
    2330/    8F06 : 3C 3B               	CMP	AL,';'			; Semi-colon?
    2331/    8F08 : 75 03               	JNZ	PRNTLP5
    2332/    8F0A : E9 C3 00            	JMP	NEXITM			; Do semi-colon routine
    2333/    8F0D :                     PRNTLP5:
    2334/    8F0D : 59                  	POP	CX			; Code string address to BC
    2335/    8F0E : E8 B2 02            	CALL	EVAL			; Evaluate expression
    2336/    8F11 : 53                  	PUSH	BX			; Save code string address
    2337/    8F12 : A0 F7 08            	MOV	AL,[TYPE]		; Get variable type
    2338/    8F15 : 0A C0               	OR	AL,AL			; Is it a string variable?
    2339/    8F17 : 75 31               	JNZ	PRNTST			; Yes - Output string contents
    2340/    8F19 : E8 0E 13            	CALL	NUMASC			; Convert number to text
    2341/    8F1C : E8 2B 09            	CALL	CRTST			; Create temporary strig
    2342/    8F1F : C6 07 20            	MOV	BYTE PTR [BX],' '	; Followed by a space
    2343/    8F22 : 8B 1E 2E 09         	MOV	BX,[FPREG]		; Get length of output
    2344/    8F26 : FE 07               	INC	BYTE PTR [BX]		; Plus 1 for the space
    2345/    8F28 : 8B 1E 2E 09         	MOV	BX,[FPREG]		; < Not needed >
    2346/    8F2C : A0 8C 08            	MOV	AL,[LWIDTH]		; Get width of line
    2347/    8F2F : 8A E8               	MOV	CH,AL			; To B
    2348/    8F31 : FE C5               	INC	CH			; Width 255 (No limit)?
    2349/    8F33 : 74 10               	JZ	PRNTNB			; Yes - Output number string
    2350/    8F35 : FE C5               	INC	CH			; Adjust it
    2351/    8F37 : A0 F5 08            	MOV	AL,[CURPOS]		; Get cursor position
    2352/    8F3A : 02 07               	ADD	AL,[BX]			; Add length of string
    2353/    8F3C : FE C8               	DEC	AL			; Adjust it
    2354/    8F3E : 3A C5               	CMP	AL,CH			; Will output fit on this line?
    2355/    8F40 : 72 03               	JC	PRNTNB
    2356/    8F42 : E8 1B 00            	CALL	PRCRLF			; No - CRLF first
    2357/    8F45 :                     PRNTNB:
    2358/    8F45 : E8 60 09            	CALL	PRS1			; Output string at (HL)
    2359/    8F48 : 32 C0               	XOR	AL,AL			; Skip CALL by setting address
    2360/    8F4A :                     PRNTST:
    2361/    8F4A : 74 03               	JZ	PRNTST1
    2362/    8F4C : E8 59 09            	CALL	PRS1			; Output string at (HL)
    2363/    8F4F :                     PRNTST1:
    2364/    8F4F : 5B                  	POP	BX			; Restore code string address
    2365/    8F50 : EB 95               	JMP	MRPRNT			; See if more to PRINT
    2366/    8F52 :                     ;
    2367/    8F52 :                     STTLIN:
    2368/    8F52 : A0 F5 08            	MOV	AL,[CURPOS]		; Make sure on new line
    2369/    8F55 : 0A C0               	OR	AL,AL			; Already at start?
    2370/    8F57 : 75 07               	JNZ	PRCRLF			; Start a new line
    2371/    8F59 : C3                  	RET				; Yes - Do nothing
    2372/    8F5A :                     ;	JMP	PRCRLF			; Start a new line
    2373/    8F5A :                     ;
    2374/    8F5A :                     ENDINP:
    2375/    8F5A : C6 07 00            	MOV	BYTE PTR [BX],0		; Mark end of buffer
    2376/    8F5D : BB AA 08            	MOV	BX,BUFFER-1		; Point to buffer
    2377/    8F60 :                     PRCRLF:
    2378/    8F60 : B0 0D               	MOV	AL,CR			; Load a CR
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 41 - 2023/09/19 18時02分31秒


    2379/    8F62 : E8 75 FA            	CALL	OUTC			; Output character
    2380/    8F65 : B0 0A               	MOV	AL,LF			; Load a LF
    2381/    8F67 : E8 70 FA            	CALL	OUTC			; Output character
    2382/    8F6A :                     DONULL:
    2383/    8F6A : 32 C0               	XOR	AL,AL			; Set to position 0
    2384/    8F6C : A2 F5 08            	MOV	[CURPOS],AL		; Store it
    2385/    8F6F : A0 8B 08            	MOV	AL,[NULLS]		; Get number of nulls
    2386/    8F72 :                     NULLP:
    2387/    8F72 : FE C8               	DEC	AL			; Count them
    2388/    8F74 : 75 01               	JNZ	NULLP1
    2389/    8F76 : C3                  	RET				; Return if done
    2390/    8F77 :                     NULLP1:
    2391/    8F77 : 9F                  	LAHF
    2392/    8F78 : 86 E0               	XCHG	AH,AL
    2393/    8F7A : 50                  	PUSH	AX			; Save count
    2394/    8F7B : 86 E0               	XCHG	AH,AL
    2395/    8F7D : 32 C0               	XOR	AL,AL			; Load a null
    2396/    8F7F : E8 58 FA            	CALL	OUTC			; Output it
    2397/    8F82 : 58                  	POP	AX			; Restore count
    2398/    8F83 : 86 E0               	XCHG	AH,AL
    2399/    8F85 : 9E                  	SAHF
    2400/    8F86 : EB EA               	JMP	NULLP			; Keep counting
    2401/    8F88 :                     ;
    2402/    8F88 :                     DOCOM:
    2403/    8F88 : A0 8D 08            	MOV	AL,[COMMAN]		; Get comma width
    2404/    8F8B : 8A E8               	MOV	CH,AL			; Save in B
    2405/    8F8D : A0 F5 08            	MOV	AL,[CURPOS]		; Get current position
    2406/    8F90 : 3A C5               	CMP	AL,CH			; Within the limit?
    2407/    8F92 : 72 03               	JC	DOCOM1
    2408/    8F94 : E8 C9 FF            	CALL	PRCRLF			; No - output CRLF
    2409/    8F97 :                     DOCOM1:
    2410/    8F97 : 73 37               	JNC	NEXITM			; Get next item
    2411/    8F99 :                     ZONELP:
    2412/    8F99 : 2C 0E               	SUB	AL,14			; Next zone of 14 characters
    2413/    8F9B : 73 FC               	JNC	ZONELP			; Repeat if more zones
    2414/    8F9D : F6 D0               	NOT	AL			; Number of spaces to output
    2415/    8F9F : EB 22               	JMP	ASPCS			; Output them
    2416/    8FA1 :                     ;
    2417/    8FA1 :                     DOTAB:
    2418/    8FA1 : 9F                  	LAHF
    2419/    8FA2 : 86 E0               	XCHG	AH,AL
    2420/    8FA4 : 50                  	PUSH	AX			; Save token
    2421/    8FA5 : 86 E0               	XCHG	AH,AL
    2422/    8FA7 : E8 81 0C            	CALL	FNDNUM			; Evaluate expression
    2423/    8FAA : E8 14 FA            	CALL	CHKSYN			; Make sure ")" follows
    2424/    8FAD : 29                  	DB	")"
    2425/    8FAE : 9F                  	LAHF
    2426/    8FAF : 4B                  	DEC	BX			; Back space on to ")"
    2427/    8FB0 : 9E                  	SAHF
    2428/    8FB1 : 58                  	POP	AX			; Restore token
    2429/    8FB2 : 86 E0               	XCHG	AH,AL
    2430/    8FB4 : 9E                  	SAHF
    2431/    8FB5 : 2C A8               	SUB	AL,ZSPC			; Was it "SPC(" ?
    2432/    8FB7 : 53                  	PUSH	BX			; Save code string address
    2433/    8FB8 : 74 03               	JZ	DOSPC			; Yes - Do 'E' spaces
    2434/    8FBA : A0 F5 08            	MOV	AL,[CURPOS]		; Get current position
    2435/    8FBD :                     DOSPC:
    2436/    8FBD : F6 D0               	NOT	AL			; Number of spaces to print to
    2437/    8FBF : 02 C2               	ADD	AL,DL			; Total number to print
    2438/    8FC1 : 73 0D               	JNC	NEXITM			; TAB < Current POS(X)
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 42 - 2023/09/19 18時02分31秒


    2439/    8FC3 :                     ASPCS:
    2440/    8FC3 : FE C0               	INC	AL			; Output A spaces
    2441/    8FC5 : 8A E8               	MOV	CH,AL			; Save number to print
    2442/    8FC7 : B0 20               	MOV	AL,' '			; Space
    2443/    8FC9 :                     SPCLP:
    2444/    8FC9 : E8 0E FA            	CALL	OUTC			; Output character in A
    2445/    8FCC : FE CD               	DEC	CH			; Count them
    2446/    8FCE : 75 F9               	JNZ	SPCLP			; Repeat if more
    2447/    8FD0 :                     NEXITM:
    2448/    8FD0 : 5B                  	POP	BX			; Restore code string address
    2449/    8FD1 : E8 06 FC            	CALL	GETCHR			; Get next character
    2450/    8FD4 : E9 16 FF            	JMP	PRNTLP			; More to print
    2451/    8FD7 :                     ;
    2452/    8FD7 :                     REDO:
    2453/    8FD7 : 3F 52 65 64 6F 20   	DB	"?Redo from start",CR,LF,0
             8FDD : 66 72 6F 6D 20 73 
             8FE3 : 74 61 72 74 0D 0A 
             8FE9 : 00                
    2454/    8FEA :                     
    2455/    8FEA :                     ;
    2456/    8FEA :                     BADINP:
    2457/    8FEA : A0 17 09            	MOV	AL,[READFG]		; READ or INPUT?
    2458/    8FED : 0A C0               	OR	AL,AL
    2459/    8FEF : 74 03               	JZ	BADINP1			; READ - ?SN Error
    2460/    8FF1 : E9 0F F6            	JMP	DATSNR
    2461/    8FF4 :                     BADINP1:
    2462/    8FF4 : 59                  	POP	CX			; Throw away code string addr
    2463/    8FF5 : BB D7 8F            	MOV	BX,REDO			; "Redo from start" message
    2464/    8FF8 : E8 AA 08            	CALL	PRS			; Output string
    2465/    8FFB : E9 E3 F7            	JMP	DOAGN			; Do last INPUT again
    2466/    8FFE :                     ;
    2467/    8FFE :                     INPUT:
    2468/    8FFE : E8 DA 07            	CALL	IDTEST			; Test for illegal direct
    2469/    9001 : 8A 07               	MOV	AL,[BX]			; Get character after "INPUT"
    2470/    9003 : 3C 22               	CMP	AL,'"'			; Is there a prompt string?
    2471/    9005 : B0 00               	MOV	AL,0			; Clear A and leave flags
    2472/    9007 : A2 8F 08            	MOV	[CTLOFG],AL		; Enable output
    2473/    900A : 75 0D               	JNZ	NOPMPT			; No prompt - get input
    2474/    900C : E8 3E 08            	CALL	QTSTR			; Get string terminated by '"'
    2475/    900F : E8 AF F9            	CALL	CHKSYN			; Check for ';' after prompt
    2476/    9012 : 3B                  	DB	';'
    2477/    9013 : 53                  	PUSH	BX			; Save code string address
    2478/    9014 : E8 91 08            	CALL	PRS1			; Output prompt string
    2479/    9017 : EB 01               	JMP	NOPMPT1			; Skip "PUSH BX"
    2480/    9019 :                     NOPMPT:
    2481/    9019 : 53                  	PUSH	BX			; Save code string addr
    2482/    901A :                     NOPMPT1:
    2483/    901A : E8 C9 F7            	CALL	PROMPT			; Get input with "? " prompt
    2484/    901D : 59                  	POP	CX			; Restore code string address
    2485/    901E : 73 03               	JNC	NOPMPT2
    2486/    9020 : E9 27 FC            	JMP	INPBRK			; Break pressed - Exit
    2487/    9023 :                     NOPMPT2:
    2488/    9023 : 9F                  	LAHF
    2489/    9024 : 43                  	INC	BX			; Next byte
    2490/    9025 : 9E                  	SAHF
    2491/    9026 : 8A 07               	MOV	AL,[BX]			; Get it
    2492/    9028 : 0A C0               	OR	AL,AL			; End of line?
    2493/    902A : 9F                  	LAHF
    2494/    902B : 4B                  	DEC	BX			; Back again
    2495/    902C : 9E                  	SAHF
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 43 - 2023/09/19 18時02分31秒


    2496/    902D : 51                  	PUSH	CX			; Re-save code string address
    2497/    902E : 75 03               	JNZ	NOPMPT3			; Yes - Find next DATA stmt
    2498/    9030 : E9 D8 FD            	JMP	NXTDTA
    2499/    9033 :                     NOPMPT3:
    2500/    9033 : C6 07 2C            	MOV	BYTE PTR [BX],','	; Store comma as separator
    2501/    9036 : EB 09               	JMP	NXTITM			; Get next item
    2502/    9038 :                     ;
    2503/    9038 :                     READ:
    2504/    9038 : 53                  	PUSH	BX			; Save code string address
    2505/    9039 : 8B 1E 26 09         	MOV	BX,[NXTDAT]		; Next DATA statement
    2506/    903D : 0C AF               	OR	AL,0AFH			; Flag "READ"
    2507/    903F : EB 02               	JMP	NXTITM1
    2508/    9041 :                     NXTITM:
    2509/    9041 : 32 C0               	XOR	AL,AL			; Flag "INPUT"
    2510/    9043 :                     NXTITM1:
    2511/    9043 : A2 17 09            	MOV	[READFG],AL		; Save "READ"/"INPUT" flag
    2512/    9046 : 8B EC               	MOV	BP,SP
    2513/    9048 : 87 5E 00            	XCHG	[BP],BX			; Get code str' , Save pointer
    2514/    904B : EB 04               	JMP	GTVLUS			; Get values
    2515/    904D :                     ;
    2516/    904D :                     NEDMOR:
    2517/    904D : E8 71 F9            	CALL	CHKSYN			; Check for comma between items
    2518/    9050 : 2C                  	DB	','
    2519/    9051 :                     GTVLUS:
    2520/    9051 : E8 2A 04            	CALL	GETVAR			; Get variable name
    2521/    9054 : 8B EC               	MOV	BP,SP
    2522/    9056 : 87 5E 00            	XCHG	[BP],BX			; Save code str" , Get pointer
    2523/    9059 : 52                  	PUSH	DX			; Save variable address
    2524/    905A : 8A 07               	MOV	AL,[BX]			; Get next "INPUT"/"DATA" byte
    2525/    905C : 3C 2C               	CMP	AL,','			; Comma?
    2526/    905E : 74 2A               	JZ	ANTVLU			; Yes - Get another value
    2527/    9060 : A0 17 09            	MOV	AL,[READFG]		; Is it READ?
    2528/    9063 : 0A C0               	OR	AL,AL
    2529/    9065 : 74 03               	JZ	GTVLUS1			; Yes - Find next DATA stmt
    2530/    9067 : E9 A8 00            	JMP	FDTLP
    2531/    906A :                     GTVLUS1:
    2532/    906A : B0 3F               	MOV	AL,'?'			; More INPUT needed
    2533/    906C : E8 6B F9            	CALL	OUTC			; Output character
    2534/    906F : E8 74 F7            	CALL	PROMPT			; Get INPUT with prompt
    2535/    9072 : 5A                  	POP	DX			; Variable address
    2536/    9073 : 59                  	POP	CX			; Code string address
    2537/    9074 : 73 03               	JNC	GTVLUS2
    2538/    9076 : E9 D1 FB            	JMP	INPBRK			; Break pressed
    2539/    9079 :                     GTVLUS2:
    2540/    9079 : 9F                  	LAHF
    2541/    907A : 43                  	INC	BX			; Point to next DATA byte
    2542/    907B : 9E                  	SAHF
    2543/    907C : 8A 07               	MOV	AL,[BX]			; Get byte
    2544/    907E : 0A C0               	OR	AL,AL			; Is it zero (No input) ?
    2545/    9080 : 9F                  	LAHF
    2546/    9081 : 4B                  	DEC	BX			; Back space INPUT pointer
    2547/    9082 : 9E                  	SAHF
    2548/    9083 : 51                  	PUSH	CX			; Save code string address
    2549/    9084 : 75 03               	JNZ	GTVLUS3			; Find end of buffer
    2550/    9086 : E9 82 FD            	JMP	NXTDTA
    2551/    9089 :                     GTVLUS3:
    2552/    9089 : 52                  	PUSH	DX			; Save variable address
    2553/    908A :                     ANTVLU:
    2554/    908A : A0 F7 08            	MOV	AL,[TYPE]		; Check data type
    2555/    908D : 0A C0               	OR	AL,AL			; Is it numeric?
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 44 - 2023/09/19 18時02分31秒


    2556/    908F : 74 2C               	JZ	INPBIN			; Yes - Convert to binary
    2557/    9091 : E8 46 FB            	CALL	GETCHR			; Get next character
    2558/    9094 : 8A F0               	MOV	DH,AL			; Save input character
    2559/    9096 : 8A E8               	MOV	CH,AL			; Again
    2560/    9098 : 3C 22               	CMP	AL,'"'			; Start of literal sting?
    2561/    909A : 74 10               	JZ	STRENT			; Yes - Create string entry
    2562/    909C : A0 17 09            	MOV	AL,[READFG]		; "READ" or "INPUT" ?
    2563/    909F : 0A C0               	OR	AL,AL
    2564/    90A1 : 8A F0               	MOV	DH,AL			; Save 00 if "INPUT"
    2565/    90A3 : 74 02               	JZ	ITMSEP			; "INPUT" - End with 00
    2566/    90A5 : B6 3A               	MOV	DH,':'			; "DATA" - End with 00 or ":"
    2567/    90A7 :                     ITMSEP:
    2568/    90A7 : B5 2C               	MOV	CH,','			; Item separator
    2569/    90A9 : 9F                  	LAHF
    2570/    90AA : 4B                  	DEC	BX			; Back space for DTSTR
    2571/    90AB : 9E                  	SAHF
    2572/    90AC :                     STRENT:
    2573/    90AC : E8 A2 07            	CALL	DTSTR			; Get string terminated by D
    2574/    90AF : 87 DA               	XCHG	BX,DX			; String address to DE
    2575/    90B1 : BB CC 90            	MOV	BX,LTSTND		; Where to go after LETSTR
    2576/    90B4 : 8B EC               	MOV	BP,SP
    2577/    90B6 : 87 5E 00            	XCHG	[BP],BX			; Save HL , get input ppinter
    2578/    90B9 : 52                  	PUSH	DX			; Save address of string
    2579/    90BA : E9 9A FD            	JMP	LETSTR			; Assign string to variable
    2580/    90BD :                     ;
    2581/    90BD :                     INPBIN:
    2582/    90BD : E8 1A FB            	CALL	GETCHR			; Get next character
    2583/    90C0 : E8 96 10            	CALL	ASCTFP			; Convert ASCII to FP number
    2584/    90C3 : 8B EC               	MOV	BP,SP
    2585/    90C5 : 87 5E 00            	XCHG	[BP],BX			; Save input ptr, Get var addr
    2586/    90C8 : E8 71 0F            	CALL	FPTHL			; Move FPREG to variable
    2587/    90CB : 5B                  	POP	BX			; Restore input pointer
    2588/    90CC :                     LTSTND:
    2589/    90CC :                     ;	LAHF
    2590/    90CC : 4B                  	DEC	BX			; DEC 'cos GETCHR INCs
    2591/    90CD :                     ;	SAHF
    2592/    90CD : E8 0A FB            	CALL	GETCHR			; Get next character
    2593/    90D0 : 74 07               	JZ	MORDT			; End of line - More needed?
    2594/    90D2 : 3C 2C               	CMP	AL,','			; Another value?
    2595/    90D4 : 74 03               	JZ	MORDT			; No - Bad input
    2596/    90D6 : E9 11 FF            	JMP	BADINP
    2597/    90D9 :                     MORDT:
    2598/    90D9 : 8B EC               	MOV	BP,SP
    2599/    90DB : 87 5E 00            	XCHG	[BP],BX			; Get code string address
    2600/    90DE :                     ;	LAHF
    2601/    90DE : 4B                  	DEC	BX			; DEC 'cos GETCHR INCs
    2602/    90DF :                     ;	SAHF
    2603/    90DF : E8 F8 FA            	CALL	GETCHR			; Get next character
    2604/    90E2 : 74 03               	JZ	MORDT1			; More needed - Get it
    2605/    90E4 : E9 66 FF            	JMP	NEDMOR
    2606/    90E7 :                     MORDT1:
    2607/    90E7 : 5A                  	POP	DX			; Restore DATA pointer
    2608/    90E8 : A0 17 09            	MOV	AL,[READFG]		; "READ" or "INPUT" ?
    2609/    90EB : 0A C0               	OR	AL,AL
    2610/    90ED : 87 DA               	XCHG	BX,DX			; DATA pointer to HL
    2611/    90EF : 74 03               	JZ	MORDT2
    2612/    90F1 : E9 16 FB            	JMP	UPDATA			; Update DATA pointer if "READ"
    2613/    90F4 :                     MORDT2:
    2614/    90F4 : 52                  	PUSH	DX			; Save code string address
    2615/    90F5 : 0A 07               	OR	AL,[BX]			; More input given?
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 45 - 2023/09/19 18時02分31秒


    2616/    90F7 : BB 01 91            	MOV	BX,EXTIG		; "?Extra ignored" message
    2617/    90FA : 74 03               	JZ	MORDT3
    2618/    90FC : E8 A6 07            	CALL	PRS			; Output string if extra given
    2619/    90FF :                     MORDT3:
    2620/    90FF : 5B                  	POP	BX			; Restore code string address
    2621/    9100 : C3                  	RET
    2622/    9101 :                     ;
    2623/    9101 :                     EXTIG:
    2624/    9101 : 3F 45 78 74 72 61   	DB	"?Extra ignored",CR,LF,0
             9107 : 20 69 67 6E 6F 72 
             910D : 65 64 0D 0A 00    
    2625/    9112 :                     
    2626/    9112 :                     
    2627/    9112 :                     ;
    2628/    9112 :                     FDTLP:
    2629/    9112 : E8 F7 FC            	CALL	DATA			; Get next statement
    2630/    9115 : 0A C0               	OR	AL,AL			; End of line?
    2631/    9117 : 75 23               	JNZ	FANDT			; No - See if DATA statement
    2632/    9119 : 9F                  	LAHF
    2633/    911A : 43                  	INC	BX
    2634/    911B : 9E                  	SAHF
    2635/    911C : 8A 07               	MOV	AL,[BX]			; End of program?
    2636/    911E : 9F                  	LAHF
    2637/    911F : 43                  	INC	BX
    2638/    9120 : 9E                  	SAHF
    2639/    9121 : 0A 07               	OR	AL,[BX]			; 00 00 Ends program
    2640/    9123 : B2 06               	MOV	DL,OD			; ?OD Error
    2641/    9125 : 75 03               	JNZ	FDTLP1
    2642/    9127 : E9 F9 F4            	JMP	ERROR			; Yes - Out of DATA
    2643/    912A :                     FDTLP1:
    2644/    912A : 9F                  	LAHF
    2645/    912B : 43                  	INC	BX
    2646/    912C : 9E                  	SAHF
    2647/    912D : 8A 17               	MOV	DL,[BX]			; LSB of line number
    2648/    912F : 9F                  	LAHF
    2649/    9130 : 43                  	INC	BX
    2650/    9131 : 9E                  	SAHF
    2651/    9132 : 8A 37               	MOV	DH,[BX]			; MSB of line number
    2652/    9134 : 87 DA               	XCHG	BX,DX
    2653/    9136 : 89 1E 13 09         	MOV	[DATLIN],BX		; Set line of current DATA item
    2654/    913A : 87 DA               	XCHG	BX,DX
    2655/    913C :                     FANDT:
    2656/    913C : E8 9B FA            	CALL	GETCHR			; Get next character
    2657/    913F : 3C 83               	CMP	AL,ZDATA		; "DATA" token
    2658/    9141 : 75 CF               	JNZ	FDTLP			; No "DATA" - Keep looking
    2659/    9143 : E9 44 FF            	JMP	ANTVLU			; Found - Convert input
    2660/    9146 :                     ;
    2661/    9146 :                     NEXT:
    2662/    9146 : BA 00 00            	MOV	DX,0			; In case no index given
    2663/    9149 :                     NEXT1:
    2664/    9149 : 74 03               	JZ	NEXT2
    2665/    914B : E8 30 03            	CALL	GETVAR			; Get index address
    2666/    914E :                     NEXT2:
    2667/    914E : 89 1E 18 09         	MOV	[BRKLIN],BX		; Save code string address
    2668/    9152 : E8 3E F4            	CALL	BAKSTK			; Look for "FOR" block
    2669/    9155 : 74 03               	JZ	NEXT3
    2670/    9157 : E9 B7 F4            	JMP	NFERR			; No "FOR" - ?NF Error
    2671/    915A :                     NEXT3:
    2672/    915A : 8B E3               	MOV	SP,BX			; Clear nested loops
    2673/    915C : 52                  	PUSH	DX			; Save index address
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 46 - 2023/09/19 18時02分31秒


    2674/    915D : 8A 07               	MOV	AL,[BX]			; Get sign of STEP
    2675/    915F : 9F                  	LAHF
    2676/    9160 : 43                  	INC	BX
    2677/    9161 : 9E                  	SAHF
    2678/    9162 : 9F                  	LAHF
    2679/    9163 : 86 E0               	XCHG	AH,AL
    2680/    9165 : 50                  	PUSH	AX			; Save sign of STEP
    2681/    9166 : 86 E0               	XCHG	AH,AL
    2682/    9168 : 52                  	PUSH	DX			; Save index address
    2683/    9169 : E8 AA 0E            	CALL	PHLTFP			; Move index value to FPREG
    2684/    916C : 8B EC               	MOV	BP,SP
    2685/    916E : 87 5E 00            	XCHG	[BP],BX			; Save address of TO value
    2686/    9171 : 53                  	PUSH	BX			; Save address of index
    2687/    9172 : E8 F4 0A            	CALL	ADDPHL			; Add STEP to index valiable
    2688/    9175 : 5B                  	POP	BX			; Restore address of index
    2689/    9176 : E8 C3 0E            	CALL	FPTHL			; Move value to index variable
    2690/    9179 : 5B                  	POP	BX			; Restore address of TO value
    2691/    917A : E8 AE 0E            	CALL	LOADFP			; Move TO value to BCDE
    2692/    917D : 53                  	PUSH	BX			; Save address of line of FOR
    2693/    917E : E8 F2 0E            	CALL	CMPNUM			; Compare index with TO value
    2694/    9181 : 5B                  	POP	BX			; Restore address of line num
    2695/    9182 : 59                  	POP	CX			; Address of sign of STEP
    2696/    9183 : 2A C5               	SUB	AL,CH			; Compare with expected sign
    2697/    9185 : E8 A3 0E            	CALL	LOADFP			; BC = Loop stmt,DE = Line num
    2698/    9188 : 74 0B               	JZ	KILFOR			; Loop finished - Terminal it
    2699/    918A : 87 DA               	XCHG	BX,DX			; Loop statement line number
    2700/    918C : 89 1E A6 08         	MOV	[LINEAT],BX		; Set loop line number
    2701/    9190 : 8B D9               	MOV	BX,CX			; Set code string to loop
    2702/    9192 : E9 DD F9            	JMP	PUTFID			; Put back "FOR" and continue
    2703/    9195 :                     ;
    2704/    9195 :                     KILFOR:
    2705/    9195 : 8B E3               	MOV	SP,BX			; Remove "FOR" block
    2706/    9197 : 8B 1E 18 09         	MOV	BX,[BRKLIN]		; Code string after "NE XT"
    2707/    919B : 8A 07               	MOV	AL,[BX]			; Get next byte in code string
    2708/    919D : 3C 2C               	CMP	AL,','			; More NEXTs ?
    2709/    919F : 74 03               	JZ	KILFOR1			; No - Do next statemen
    2710/    91A1 : E9 D2 F9            	JMP	RUNCNT
    2711/    91A4 :                     KILFOR1:
    2712/    91A4 : E8 33 FA            	CALL	GETCHR			; Position to index nam
    2713/    91A7 : E8 9F FF            	CALL	NEXT1			; Re-enter NEXT routine
    2714/    91AA :                     ; < will not RETurn to here , Exit to RUNCNT or Loop >
    2715/    91AA :                     ;
    2716/    91AA :                     GETNUM:
    2717/    91AA : E8 16 00            	CALL	EVAL			; Get a numeric expression
    2718/    91AD :                     TSTNUM:
    2719/    91AD : 0A C0               	OR	AL,AL			; Clear carry (numeric)
    2720/    91AF : EB 01               	JMP	CHKTYP
    2721/    91B1 :                     TSTSTR:
    2722/    91B1 : F9                  	STC				; Set carry (string)
    2723/    91B2 :                     CHKTYP:
    2724/    91B2 : A0 F7 08            	MOV	AL,[TYPE]		; Check types match
    2725/    91B5 : 12 C0               	ADC	AL,AL			; Expected + actual
    2726/    91B7 : 0A C0               	OR	AL,AL			; Clear carry , set parity
    2727/    91B9 : 7B 01               	JPO	CHKTYP1			; RET PE
    2728/    91BB : C3                  	RET				; Even parity - Types match
    2729/    91BC :                     CHKTYP1:
    2730/    91BC : E9 62 F4            	JMP	TMERR			; Different types - Error
    2731/    91BF :                     ;
    2732/    91BF :                     OPNPAR:
    2733/    91BF : E8 FF F7            	CALL	CHKSYN			; Make sure "(" follows
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 47 - 2023/09/19 18時02分31秒


    2734/    91C2 : 28                  	DB	"("
    2735/    91C3 :                     EVAL:
    2736/    91C3 : 9F                  	LAHF
    2737/    91C4 : 4B                  	DEC	BX
    2738/    91C5 : 9E                  	SAHF				; Evaluate expression & save
    2739/    91C6 : B6 00               	MOV	DH,0			; Precedence value
    2740/    91C8 :                     EVAL1:
    2741/    91C8 : 52                  	PUSH	DX			; Save precedence
    2742/    91C9 : B1 01               	MOV	CL,1
    2743/    91CB : E8 0F F4            	CALL	CHKSTK			; Check for 1 level of stack
    2744/    91CE : E8 9B 00            	CALL	OPRND			; Get next expression value
    2745/    91D1 :                     EVAL2:
    2746/    91D1 : 89 1E 1A 09         	MOV	[NXTOPR],BX		; Save address of next operator
    2747/    91D5 :                     EVAL3:
    2748/    91D5 : 8B 1E 1A 09         	MOV	BX,[NXTOPR]		; Restore address of next opt
    2749/    91D9 : 59                  	POP	CX			; Precedence value and operator
    2750/    91DA : 8A C5               	MOV	AL,CH			; Get precedence value
    2751/    91DC : 3C 78               	CMP	AL,78H			; "AND" or "OR" ?
    2752/    91DE : 72 03               	JC	EVAL4
    2753/    91E0 : E8 CA FF            	CALL	TSTNUM			; No - Make sure it's a number
    2754/    91E3 :                     EVAL4:
    2755/    91E3 : 8A 07               	MOV	AL,[BX]			; Get next operator / function
    2756/    91E5 : B6 00               	MOV	DH,0			; Clear Last relation
    2757/    91E7 :                     RLTLP:
    2758/    91E7 : 2C B3               	SUB	AL,ZGTR			; ">" Token
    2759/    91E9 : 72 1C               	JC	FOPRND			; + - * / ^ AND OR - Test it
    2760/    91EB : 3C 03               	CMP	AL,ZLTH+1-ZGTR		; < = >
    2761/    91ED : 73 18               	JNC	FOPRND			; Function - Call it
    2762/    91EF : 3C 01               	CMP	AL,ZEQUAL-ZGTR		; "="
    2763/    91F1 : D0 D0               	RCL	AL,1			; <- Test for legal
    2764/    91F3 : 32 C6               	XOR	AL,DH			; <- combinations of < = >
    2765/    91F5 : 3A C6               	CMP	AL,DH			; <- by combining last token
    2766/    91F7 : 8A F0               	MOV	DH,AL			; <- with current one
    2767/    91F9 : 73 03               	JNC	RLTLP1
    2768/    91FB : E9 0D F4            	JMP	SNERR			; Error if "<<' '==" or ">>"
    2769/    91FE :                     RLTLP1:
    2770/    91FE : 89 1E 0F 09         	MOV	[CUROPR],BX		; Save address of current token
    2771/    9202 : E8 D5 F9            	CALL	GETCHR			; Get next character
    2772/    9205 : EB E0               	JMP	RLTLP			; Treat the two as one
    2773/    9207 :                     ;
    2774/    9207 :                     FOPRND:
    2775/    9207 : 8A C6               	MOV	AL,DH			; < = > found ?
    2776/    9209 : 0A C0               	OR	AL,AL
    2777/    920B : 74 03               	JZ	FOPRND1
    2778/    920D : E9 9F 01            	JMP	TSTRED			; Yes - Test for reduction
    2779/    9210 :                     FOPRND1:
    2780/    9210 : 8A 07               	MOV	AL,[BX]			; Get operator token
    2781/    9212 : 89 1E 0F 09         	MOV	[CUROPR],BX		; Save operator address
    2782/    9216 : 2C AC               	SUB	AL,ZPLUS		; Operator or function?
    2783/    9218 : 73 01               	JNC	FOPRND2
    2784/    921A : C3                  	RET				; Neither - Exit
    2785/    921B :                     FOPRND2:
    2786/    921B : 3C 07               	CMP	AL,ZOR+1-ZPLUS		; Is it + - * / ^ AND OR ?
    2787/    921D : 72 01               	JC	FOPRND3
    2788/    921F : C3                  	RET				; No - Exit
    2789/    9220 :                     FOPRND3:
    2790/    9220 : 8A D0               	MOV	DL,AL			; Coded operator
    2791/    9222 : A0 F7 08            	MOV	AL,[TYPE]		; Get data type
    2792/    9225 : FE C8               	DEC	AL			; FF = numeric , 00 = string
    2793/    9227 : 0A C2               	OR	AL,DL			; Combine with coded operator
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 48 - 2023/09/19 18時02分31秒


    2794/    9229 : 8A C2               	MOV	AL,DL			; Get coded operator
    2795/    922B : 75 03               	JNZ	FOPRND4			; String concatenation
    2796/    922D : E9 E2 07            	JMP	CONCAT
    2797/    9230 :                     FOPRND4:
    2798/    9230 : D0 C0               	ROL	AL,1			; Times 2
    2799/    9232 : 02 C2               	ADD	AL,DL			; Times 3
    2800/    9234 : 8A D0               	MOV	DL,AL			; To DE (D is 0)
    2801/    9236 : BB D7 84            	MOV	BX,PRITAB		; Precedence table
    2802/    9239 : 03 DA               	ADD	BX,DX			; To the operator concerned
    2803/    923B : 8A C5               	MOV	AL,CH			; Last operator precedence
    2804/    923D : 8A 37               	MOV	DH,[BX]			; Get evaluation precedence
    2805/    923F : 3A C6               	CMP	AL,DH			; Compare with eval precedence
    2806/    9241 : 72 01               	JC	FOPRND5
    2807/    9243 : C3                  	RET				; Exit if higher precedence
    2808/    9244 :                     FOPRND5:
    2809/    9244 : 9F                  	LAHF
    2810/    9245 : 43                  	INC	BX			; Point to routine addr
    2811/    9246 : 9E                  	SAHF
    2812/    9247 : E8 63 FF            	CALL	TSTNUM			; Make sure it's a number
    2813/    924A :                     ;
    2814/    924A :                     STKTHS:
    2815/    924A : 51                  	PUSH	CX			; Save last precedence token
    2816/    924B : B9 D5 91            	MOV	CX,EVAL3		; Where to go on prec' break
    2817/    924E : 51                  	PUSH	CX			; Save on stack for return
    2818/    924F : 8A EA               	MOV	CH,DL			; Save operator
    2819/    9251 : 8A CE               	MOV	CL,DH			; Save precedence
    2820/    9253 : E8 A7 0D            	CALL	STAKFP			; Move value to stack
    2821/    9256 : 8A D5               	MOV	DL,CH			; Restore operator
    2822/    9258 : 8A F1               	MOV	DH,CL			; Restore precedence
    2823/    925A : 8A 0F               	MOV	CL,[BX]			; Get LSB of routine address
    2824/    925C : 9F                  	LAHF
    2825/    925D : 43                  	INC	BX
    2826/    925E : 9E                  	SAHF
    2827/    925F : 8A 2F               	MOV	CH,[BX]			; Get MSB of routine address
    2828/    9261 : 9F                  	LAHF
    2829/    9262 : 43                  	INC	BX
    2830/    9263 : 9E                  	SAHF
    2831/    9264 : 51                  	PUSH	CX			; Save routine address
    2832/    9265 : 8B 1E 0F 09         	MOV	BX,[CUROPR]		; Address of current operator
    2833/    9269 : E9 5C FF            	JMP	EVAL1			; Loop until prec' break
    2834/    926C :                     ;
    2835/    926C :                     OPRND:
    2836/    926C : 32 C0               	XOR	AL,AL			; Get operand routine
    2837/    926E : A2 F7 08            	MOV	[TYPE],AL		; Set numeric expected
    2838/    9271 : E8 66 F9            	CALL	GETCHR			; Get next character
    2839/    9274 : B2 24               	MOV	DL,MO			; ?MO Error
    2840/    9276 : 75 03               	JNZ	OPRND1
    2841/    9278 : E9 A8 F3            	JMP	ERROR			; No operand - Error
    2842/    927B :                     OPRND1:
    2843/    927B : 73 03               	JNC	OPRND2
    2844/    927D : E9 D9 0E            	JMP	ASCTFP			; Number - Get value
    2845/    9280 :                     OPRND2:
    2846/    9280 : E8 36 FA            	CALL	CHKLTR			; See if a letter
    2847/    9283 : 73 5E               	JNC	CONVAR			; Letter - Find variable
    2848/    9285 : 3C 26               	CMP	AL,'&'			; &H = HEX, &B = BINARY
    2849/    9287 : 75 18               	JNZ	NOTAMP
    2850/    9289 : E8 4E F9            	CALL	GETCHR			; Get next character
    2851/    928C : 3C 48               	CMP	AL,'H'			; Hex number indicated?
    2852/    928E : 75 03               	JNZ	OPRND3
    2853/    9290 : E9 1C 14            	JMP	HEXTFP			; Convert Hex to FPREG
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 49 - 2023/09/19 18時02分31秒


    2854/    9293 :                     OPRND3:
    2855/    9293 : 3C 42               	CMP	AL,'B'			; Binary number indicat
    2856/    9295 : 75 03               	JNZ	OPRND4
    2857/    9297 : E9 99 14            	JMP	BINTFP			; Convert Bin to FPREG
    2858/    929A :                     OPRND4:
    2859/    929A : B2 02               	MOV	DL,SN			; If neither then a ?SN
    2860/    929C : 75 03               	JNZ	NOTAMP
    2861/    929E : E9 82 F3            	JMP	ERROR
    2862/    92A1 :                     NOTAMP:
    2863/    92A1 : 3C AC               	CMP	AL,ZPLUS		; '+' Token ?
    2864/    92A3 : 74 C7               	JZ	OPRND			; Yes - Look for operand
    2865/    92A5 : 3C 2E               	CMP	AL,'.'			; '.' ?
    2866/    92A7 : 75 03               	JNZ	NOTAMP1			; Yes - Create FP number
    2867/    92A9 : E9 AD 0E            	JMP	ASCTFP
    2868/    92AC :                     NOTAMP1:
    2869/    92AC : 3C AD               	CMP	AL,ZMINUS		; '-' Token ?
    2870/    92AE : 74 21               	JZ	MINUS			; Yes - Do minus
    2871/    92B0 : 3C 22               	CMP	AL,'"'			; Literal string ?
    2872/    92B2 : 75 03               	JNZ	NOTAMP2
    2873/    92B4 : E9 96 05            	JMP	QTSTR			; Get string terminated
    2874/    92B7 :                     NOTAMP2:
    2875/    92B7 : 3C AA               	CMP	AL,ZNOT			; "NOT" Token ?
    2876/    92B9 : 75 03               	JNZ	NOTAMP3
    2877/    92BB : E9 91 01            	JMP	EVNOT			; Yes - Eval NOT expres
    2878/    92BE :                     NOTAMP3:
    2879/    92BE : 3C A7               	CMP	AL,ZFN			; "FN" Token ?
    2880/    92C0 : 75 03               	JNZ	NOTAMP4
    2881/    92C2 : E9 AE 04            	JMP	DOFN			; Yes - Do FN routine
    2882/    92C5 :                     NOTAMP4:
    2883/    92C5 : 2C B6               	SUB	AL,ZSGN			; Is it a function?
    2884/    92C7 : 73 30               	JNC	FNOFST			; Yes - Evaluate functi
    2885/    92C9 :                     EVLPAR:
    2886/    92C9 : E8 F3 FE            	CALL	OPNPAR			; Evaluate expression i
    2887/    92CC : E8 F2 F6            	CALL	CHKSYN			; Make sure ")" follows
    2888/    92CF : 29                  	DB	")"
    2889/    92D0 : C3                  	RET
    2890/    92D1 :                     ;
    2891/    92D1 :                     MINUS:
    2892/    92D1 : B6 7D               	MOV	DH,7DH			; '-' precedence
    2893/    92D3 : E8 F2 FE            	CALL	EVAL1			; Evaluate until prec' break
    2894/    92D6 : 8B 1E 1A 09         	MOV	BX,[NXTOPR]		; Get next operator address
    2895/    92DA : 53                  	PUSH	BX			; Save next operator address
    2896/    92DB : E8 15 0D            	CALL	INVSGN			; Negate value
    2897/    92DE :                     RETNUM:
    2898/    92DE : E8 CC FE            	CALL	TSTNUM			; Make sure it's a number
    2899/    92E1 : 5B                  	POP	BX			; Restore next operator address
    2900/    92E2 : C3                  	RET
    2901/    92E3 :                     ;
    2902/    92E3 :                     CONVAR:
    2903/    92E3 : E8 98 01            	CALL	GETVAR			; Get variable address to DE
    2904/    92E6 :                     FRMEVL:
    2905/    92E6 : 53                  	PUSH	BX			; Save code string address
    2906/    92E7 : 87 DA               	XCHG	BX,DX			; Variable address to HL
    2907/    92E9 : 89 1E 2E 09         	MOV	[FPREG],BX		; Save address of variable
    2908/    92ED : A0 F7 08            	MOV	AL,[TYPE]		; Get type
    2909/    92F0 : 0A C0               	OR	AL,AL			; Numeric?
    2910/    92F2 : 75 03               	JNZ	FRMEVL1
    2911/    92F4 : E8 1F 0D            	CALL	PHLTFP			; Yes - Move contents to FPREG
    2912/    92F7 :                     FRMEVL1:
    2913/    92F7 : 5B                  	POP	BX			; Restore code string address
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 50 - 2023/09/19 18時02分31秒


    2914/    92F8 : C3                  	RET
    2915/    92F9 :                     ;
    2916/    92F9 :                     FNOFST:
    2917/    92F9 : B5 00               	MOV	CH,0			; Get address of function
    2918/    92FB : D0 C0               	ROL	AL,1			; Double function offset
    2919/    92FD : 8A C8               	MOV	CL,AL			; BC = Offset in function table
    2920/    92FF : 51                  	PUSH	CX			; Save adjusted token value
    2921/    9300 : E8 D7 F8            	CALL	GETCHR			; Get next character
    2922/    9303 : 8A C1               	MOV	AL,CL			; Get adjusted token value
    2923/    9305 : 3C 31               	CMP	AL,2*(ZLEFT-ZSGN)-1	; Adj' LEFT$,RIGHT$ or MID$ ?
    2924/    9307 : 72 24               	JC	FNVAL			; No - Do function
    2925/    9309 : E8 B3 FE            	CALL	OPNPAR			; Evaluate expression  (X,...
    2926/    930C : E8 B2 F6            	CALL	CHKSYN			; Make sure ',' follows
    2927/    930F : 2C                  	DB	','
    2928/    9310 : E8 9E FE            	CALL	TSTSTR			; Make sure it's a string
    2929/    9313 : 87 DA               	XCHG	BX,DX			; Save code string address
    2930/    9315 : 8B 1E 2E 09         	MOV	BX,[FPREG]		; Get address of string
    2931/    9319 : 8B EC               	MOV	BP,SP
    2932/    931B : 87 5E 00            	XCHG	[BP],BX			; Save address of string
    2933/    931E : 53                  	PUSH	BX			; Save adjusted token value
    2934/    931F : 87 DA               	XCHG	BX,DX			; Restore code string address
    2935/    9321 : E8 0A 09            	CALL	GETINT			; Get integer 0-255
    2936/    9324 : 87 DA               	XCHG	BX,DX			; Save code string address
    2937/    9326 : 8B EC               	MOV	BP,SP
    2938/    9328 : 87 5E 00            	XCHG	[BP],BX			; Save integer,HL = adj' token
    2939/    932B : EB 0C               	JMP	GOFUNC			; Jump to string function
    2940/    932D :                     ;
    2941/    932D :                     FNVAL:
    2942/    932D : E8 99 FF            	CALL	EVLPAR			; Evaluate expression
    2943/    9330 : 8B EC               	MOV	BP,SP
    2944/    9332 : 87 5E 00            	XCHG	[BP],BX			; HL = Adjusted token value
    2945/    9335 : BA DE 92            	MOV	DX,RETNUM		; Return number from function
    2946/    9338 : 52                  	PUSH	DX			; Save on stack
    2947/    9339 :                     GOFUNC:
    2948/    9339 : B9 36 83            	MOV	CX,FNCTAB		; Function routine address
    2949/    933C : 03 D9               	ADD	BX,CX			; Point to right address
    2950/    933E : 8A 0F               	MOV	CL,[BX]			; Get LSB of address
    2951/    9340 : 9F                  	LAHF
    2952/    9341 : 43                  	INC	BX
    2953/    9342 : 9E                  	SAHF
    2954/    9343 : 8A 3F               	MOV	BH,[BX]			; Get MSB of address
    2955/    9345 : 8A D9               	MOV	BL,CL			; Address to HL
    2956/    9347 : 53                  	PUSH	BX
    2957/    9348 : C3                  	RET
    2958/    9349 :                     ;	JMP	[BX]			; Jump to function
    2959/    9349 :                     ;
    2960/    9349 :                     SGNEXP:
    2961/    9349 : FE CE               	DEC	DH			; Dec to flag negative exponent
    2962/    934B : 3C AD               	CMP	AL,ZMINUS		; '-' token ?
    2963/    934D : 75 01               	JNZ	SGNEXP1
    2964/    934F : C3                  	RET				; Yes - Return
    2965/    9350 :                     SGNEXP1:
    2966/    9350 : 3C 2D               	CMP	AL,'-'			; '-' ASCII ?
    2967/    9352 : 75 01               	JNZ	SGNEXP2
    2968/    9354 : C3                  	RET				; Yes - Return
    2969/    9355 :                     SGNEXP2:
    2970/    9355 : FE C6               	INC	DH			; nc to flag positive exponent
    2971/    9357 : 3C 2B               	CMP	AL,'+'			; '+' ASCII ?
    2972/    9359 : 75 01               	JNZ	SGNEXP3
    2973/    935B : C3                  	RET				; Yes - Return
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 51 - 2023/09/19 18時02分31秒


    2974/    935C :                     SGNEXP3:
    2975/    935C : 3C AC               	CMP	AL,ZPLUS		; '+' token ?
    2976/    935E : 75 01               	JNZ	SGNEXP4
    2977/    9360 : C3                  	RET				; Yes - Return
    2978/    9361 :                     SGNEXP4:
    2979/    9361 :                     ;	LAHF
    2980/    9361 : 4B                  	DEC	BX			; DEC 'cos GETCHR INCs
    2981/    9362 :                     ;	SAHF
    2982/    9362 : C3                  	RET				; Return "NZ"
    2983/    9363 :                     ;
    2984/    9363 :                     POR:
    2985/    9363 : 0C AF               	OR	AL,0AFH			; Flag "OR"
    2986/    9365 : EB 02               	JMP	PAND1
    2987/    9367 :                     PAND:
    2988/    9367 : 32 C0               	XOR	AL,AL			; Flag "AND"
    2989/    9369 :                     PAND1:
    2990/    9369 : 9F                  	LAHF
    2991/    936A : 86 E0               	XCHG	AH,AL
    2992/    936C : 50                  	PUSH	AX			; Save "AND" / "OR" flag
    2993/    936D : 86 E0               	XCHG	AH,AL
    2994/    936F : E8 3B FE            	CALL	TSTNUM			; Make sure it's a number
    2995/    9372 : E8 5A F9            	CALL	DEINT			; Get integer -32768 to 32767
    2996/    9375 : 58                  	POP	AX			; Restore "AND" / "OR" flag
    2997/    9376 : 86 E0               	XCHG	AH,AL
    2998/    9378 : 9E                  	SAHF
    2999/    9379 : 87 DA               	XCHG	BX,DX			; <- Get last
    3000/    937B : 59                  	POP	CX			; <- value
    3001/    937C : 8B EC               	MOV	BP,SP
    3002/    937E : 87 5E 00            	XCHG	[BP],BX			; <- from
    3003/    9381 : 87 DA               	XCHG	BX,DX			; <- stack
    3004/    9383 : E8 93 0C            	CALL	FPBCDE			; Move last value to FPREG
    3005/    9386 : 9F                  	LAHF
    3006/    9387 : 86 E0               	XCHG	AH,AL
    3007/    9389 : 50                  	PUSH	AX			; Save "AND" / "OR" flag
    3008/    938A : 86 E0               	XCHG	AH,AL
    3009/    938C : E8 40 F9            	CALL	DEINT			; Get integer -32768 to 32767
    3010/    938F : 58                  	POP	AX			; Restore "AND" / "OR" flag
    3011/    9390 : 86 E0               	XCHG	AH,AL
    3012/    9392 : 9E                  	SAHF
    3013/    9393 : 59                  	POP	CX			; Get value
    3014/    9394 : 8A C1               	MOV	AL,CL			; Get LSB
    3015/    9396 : BB 1E 97            	MOV	BX,ACPASS		; Address of save AC as current
    3016/    9399 : 75 0A               	JNZ	POR1			; Jump if OR
    3017/    939B : 22 C2               	AND	AL,DL			; "AND" LSBs
    3018/    939D : 8A C8               	MOV	CL,AL			; Save LSB
    3019/    939F : 8A C5               	MOV	AL,CH			; Get MBS
    3020/    93A1 : 22 C6               	AND	AL,DH			; "AND" MSBs
    3021/    93A3 : 53                  	PUSH	BX
    3022/    93A4 : C3                  	RET
    3023/    93A5 :                     ;	JMP	[BX]			; Save AC as current (ACPASS)
    3024/    93A5 :                     ;
    3025/    93A5 :                     POR1:
    3026/    93A5 : 0A C2               	OR	AL,DL			; "OR" LSBs
    3027/    93A7 : 8A C8               	MOV	CL,AL			; Save LSB
    3028/    93A9 : 8A C5               	MOV	AL,CH			; Get MSB
    3029/    93AB : 0A C6               	OR	AL,DH			; "OR" MSBs
    3030/    93AD : 53                  	PUSH	BX
    3031/    93AE : C3                  	RET
    3032/    93AF :                     ;	JMP	[BX]			; Save AC as current (ACPASS)
    3033/    93AF :                     ;
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 52 - 2023/09/19 18時02分31秒


    3034/    93AF :                     TSTRED:
    3035/    93AF : BB C9 93            	MOV	BX,CMPLOG		; Logical compare routi
    3036/    93B2 : A0 F7 08            	MOV	AL,[TYPE]		; Get data type
    3037/    93B5 : D0 D8               	RCR	AL,1			; Carry set = string
    3038/    93B7 : 8A C6               	MOV	AL,DH			; Get last precedence value
    3039/    93B9 : D0 D0               	RCL	AL,1			; Times 2 plus carry
    3040/    93BB : 8A D0               	MOV	DL,AL			; To E
    3041/    93BD : B6 64               	MOV	DH,64H			; Relational precedence
    3042/    93BF : 8A C5               	MOV	AL,CH			; Get current precedence
    3043/    93C1 : 3A C6               	CMP	AL,DH			; Compare with last
    3044/    93C3 : 72 01               	JC	TSTRED1
    3045/    93C5 : C3                  	RET				; Eval if last was rel' or log'
    3046/    93C6 :                     TSTRED1:
    3047/    93C6 : E9 81 FE            	JMP	STKTHS			; Stack this one and get next
    3048/    93C9 :                     ;
    3049/    93C9 :                     CMPLOG:
    3050/    93C9 : CB 93               	DW	CMPLG1			; Compare two values / strings
    3051/    93CB :                     CMPLG1:
    3052/    93CB : 8A C1               	MOV	AL,CL			; Get data type
    3053/    93CD : 0A C0               	OR	AL,AL
    3054/    93CF : D0 D8               	RCR	AL,1
    3055/    93D1 : 59                  	POP	CX			; Get last expression to BCDE
    3056/    93D2 : 5A                  	POP	DX
    3057/    93D3 : 9F                  	LAHF
    3058/    93D4 : 86 E0               	XCHG	AH,AL
    3059/    93D6 : 50                  	PUSH	AX			; Save status
    3060/    93D7 : 86 E0               	XCHG	AH,AL
    3061/    93D9 : E8 D6 FD            	CALL	CHKTYP			; Check that types match
    3062/    93DC : BB 41 94            	MOV	BX,CMPRES		; Result to comparison
    3063/    93DF : 53                  	PUSH	BX			; Save for RETurn
    3064/    93E0 : 75 03               	JNZ	CMPLG2
    3065/    93E2 : E9 8E 0C            	JMP	CMPNUM			; Compare values if numeric
    3066/    93E5 :                     CMPLG2:
    3067/    93E5 : 32 C0               	XOR	AL,AL			; Compare two strings
    3068/    93E7 : A2 F7 08            	MOV	[TYPE],AL		; Set type to numeric
    3069/    93EA : 52                  	PUSH	DX			; Save string name
    3070/    93EB : E8 9E 06            	CALL	GSTRCU			; Get current string
    3071/    93EE : 8A 07               	MOV	AL,[BX]			; Get length of string
    3072/    93F0 : 9F                  	LAHF
    3073/    93F1 : 43                  	INC	BX
    3074/    93F2 : 9E                  	SAHF
    3075/    93F3 : 9F                  	LAHF
    3076/    93F4 : 43                  	INC	BX
    3077/    93F5 : 9E                  	SAHF
    3078/    93F6 : 8A 0F               	MOV	CL,[BX]			; Get LSB of address
    3079/    93F8 : 9F                  	LAHF
    3080/    93F9 : 43                  	INC	BX
    3081/    93FA : 9E                  	SAHF
    3082/    93FB : 8A 2F               	MOV	CH,[BX]			; Get MSB of address
    3083/    93FD : 5A                  	POP	DX			; Restore string name
    3084/    93FE : 51                  	PUSH	CX			; Save address of string
    3085/    93FF : 9F                  	LAHF
    3086/    9400 : 86 E0               	XCHG	AH,AL
    3087/    9402 : 50                  	PUSH	AX			; Save length of string
    3088/    9403 : 86 E0               	XCHG	AH,AL
    3089/    9405 : E8 8A 06            	CALL	GSTRDE			; Get second string
    3090/    9408 : E8 20 0C            	CALL	LOADFP			; Get address of second string
    3091/    940B : 58                  	POP	AX			; Restore length of string 1
    3092/    940C : 86 E0               	XCHG	AH,AL
    3093/    940E : 9E                  	SAHF
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 53 - 2023/09/19 18時02分31秒


    3094/    940F : 8A F0               	MOV	DH,AL			; Length to D
    3095/    9411 : 5B                  	POP	BX			; Restore address of string 1
    3096/    9412 :                     CMPSTR:
    3097/    9412 : 8A C2               	MOV	AL,DL			; Bytes of string 2 to do
    3098/    9414 : 0A C6               	OR	AL,DH			; Bytes of string 1 to do
    3099/    9416 : 75 01               	JNZ	CMPSTR1
    3100/    9418 : C3                  	RET				; Exit if all bytes compared
    3101/    9419 :                     CMPSTR1:
    3102/    9419 : 8A C6               	MOV	AL,DH			; Get bytes of string 1 to do
    3103/    941B : 2C 01               	SUB	AL,1
    3104/    941D : 73 01               	JNC	CMPSTR2
    3105/    941F : C3                  	RET				; Exit if end of string 1
    3106/    9420 :                     CMPSTR2:
    3107/    9420 : 32 C0               	XOR	AL,AL
    3108/    9422 : 3A C2               	CMP	AL,DL			; Bytes of string 2 to do
    3109/    9424 : FE C0               	INC	AL
    3110/    9426 : 72 01               	JC	CMPSTR3
    3111/    9428 : C3                  	RET				; Exit if end of string 2
    3112/    9429 :                     CMPSTR3:
    3113/    9429 : FE CE               	DEC	DH			; Count bytes in string 1
    3114/    942B : FE CA               	DEC	DL			; Count bytes in string 2
    3115/    942D : 87 D9               	XCHG	BX,CX
    3116/    942F : 8A 07               	MOV	AL,[BX]			; Byte in string 2
    3117/    9431 : 87 D9               	XCHG	BX,CX
    3118/    9433 : 3A 07               	CMP	AL,[BX]			; Compare to byte in string 1
    3119/    9435 : 9F                  	LAHF
    3120/    9436 : 43                  	INC	BX			; Move up string 1
    3121/    9437 : 9E                  	SAHF
    3122/    9438 : 9F                  	LAHF
    3123/    9439 : 41                  	INC	CX			; Move up string 2
    3124/    943A : 9E                  	SAHF
    3125/    943B : 74 D5               	JZ	CMPSTR			; Same - Try next bytes
    3126/    943D : F5                  	CMC				; Flag difference (">" or "<")
    3127/    943E : E9 8A 0B            	JMP	FLGDIF			; "<" gives -1 , ">" given +1
    3128/    9441 :                     ;
    3129/    9441 :                     CMPRES:
    3130/    9441 : FE C0               	INC	AL			; Increment current value
    3131/    9443 : 12 C0               	ADC	AL,AL			; Double plus carry
    3132/    9445 : 59                  	POP	CX			; Get other value
    3133/    9446 : 22 C5               	AND	AL,CH			; Combine them
    3134/    9448 : 04 FF               	ADD	AL,-1			; Carry set if different
    3135/    944A : 1A C0               	SBB	AL,AL			; 00 - Equal , FF - Different
    3136/    944C : E9 87 0B            	JMP	FLGREL			; Set current value & continue
    3137/    944F :                     ;
    3138/    944F :                     EVNOT:
    3139/    944F : B6 5A               	MOV	DH,5AH			; Precedence value for "NOT"
    3140/    9451 : E8 74 FD            	CALL	EVAL1			; Eval until precedence break
    3141/    9454 : E8 56 FD            	CALL	TSTNUM			; Make sure it's a number
    3142/    9457 : E8 75 F8            	CALL	DEINT			; Get integer -32768 - 32767
    3143/    945A : 8A C2               	MOV	AL,DL			; Get LSB
    3144/    945C : F6 D0               	NOT	AL			; Invert LSB
    3145/    945E : 8A C8               	MOV	CL,AL			; Save "NOT" of LSB
    3146/    9460 : 8A C6               	MOV	AL,DH			; Get MSB
    3147/    9462 : F6 D0               	NOT	AL			; Invert MSB
    3148/    9464 : E8 B7 02            	CALL	ACPASS			; Save AC as current
    3149/    9467 : 59                  	POP	CX			; Clean up stack
    3150/    9468 : E9 6A FD            	JMP	EVAL3			; Continue evaluation
    3151/    946B :                     ;
    3152/    946B :                     DIMRET:
    3153/    946B :                     ;	LAHF
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 54 - 2023/09/19 18時02分31秒


    3154/    946B : 4B                  	DEC	BX			; DEC 'cos GETCHR INCs
    3155/    946C :                     ;	SAHF
    3156/    946C : E8 6B F7            	CALL	GETCHR			; Get next character
    3157/    946F : 75 01               	JNZ	DIMRET1
    3158/    9471 : C3                  	RET				; End of DIM statement
    3159/    9472 :                     DIMRET1:
    3160/    9472 : E8 4C F5            	CALL	CHKSYN			; Make sure ',' follows
    3161/    9475 : 2C                  	DB	','
    3162/    9476 :                     DIM:
    3163/    9476 : B9 6B 94            	MOV	CX,DIMRET		; Return to "DIMRET"
    3164/    9479 : 51                  	PUSH	CX			; Save on stack
    3165/    947A : 0C AF               	OR	AL,0AFH			; Flag "Create" variable
    3166/    947C : EB 02               	JMP	GETVAR1
    3167/    947E :                     GETVAR:
    3168/    947E : 32 C0               	XOR	AL,AL			; Find variable address to DE
    3169/    9480 :                     GETVAR1:
    3170/    9480 : A2 F6 08            	MOV	[LCRFLG],AL		; Set locate / create flag
    3171/    9483 : 8A 2F               	MOV	CH,[BX]			; Get First byte of name
    3172/    9485 :                     GTFNAM:
    3173/    9485 : E8 31 F8            	CALL	CHKLTR			; See if a letter
    3174/    9488 : 73 03               	JNC	GTFNAM1
    3175/    948A : E9 7E F1            	JMP	SNERR			; ?SN Error if not a letter
    3176/    948D :                     GTFNAM1:
    3177/    948D : 32 C0               	XOR	AL,AL
    3178/    948F : 8A C8               	MOV	CL,AL			; Clear second byte of name
    3179/    9491 : A2 F7 08            	MOV	[TYPE],AL		; Set type to numeric
    3180/    9494 : E8 43 F7            	CALL	GETCHR			; Get next character
    3181/    9497 : 72 05               	JC	SVNAM2			; Numeric - Save in name
    3182/    9499 : E8 1D F8            	CALL	CHKLTR			; See if a letter
    3183/    949C : 72 0C               	JC	CHARTY			; Not a letter - Check type
    3184/    949E :                     SVNAM2:
    3185/    949E : 8A C8               	MOV	CL,AL			; Save second byte of name
    3186/    94A0 :                     ENDNAM:
    3187/    94A0 : E8 37 F7            	CALL	GETCHR			; Get next character
    3188/    94A3 : 72 FB               	JC	ENDNAM			; Numeric - Get another
    3189/    94A5 : E8 11 F8            	CALL	CHKLTR			; See if a letter
    3190/    94A8 : 73 F6               	JNC	ENDNAM			; Letter - Get another
    3191/    94AA :                     CHARTY:
    3192/    94AA : 2C 24               	SUB	AL,'$'			; String variable?
    3193/    94AC : 75 0E               	JNZ	NOTSTR			; No - Numeric variable
    3194/    94AE : FE C0               	INC	AL			; A = 1 (string type)
    3195/    94B0 : A2 F7 08            	MOV	[TYPE],AL		; Set type to string
    3196/    94B3 : D0 C8               	ROR	AL,1			; A = 80H , Flag for string
    3197/    94B5 : 02 C1               	ADD	AL,CL			; 2nd byte of name has bit 7 on
    3198/    94B7 : 8A C8               	MOV	CL,AL			; Resave second byte on name
    3199/    94B9 : E8 1E F7            	CALL	GETCHR			; Get next character
    3200/    94BC :                     NOTSTR:
    3201/    94BC : A0 15 09            	MOV	AL,[FORFLG]		; Array name needed ?
    3202/    94BF : FE C8               	DEC	AL
    3203/    94C1 : 75 03               	JNZ	NOTSTR1			; Yes - Get array name
    3204/    94C3 : E9 E6 00            	JMP	ARLDSV
    3205/    94C6 :                     NOTSTR1:
    3206/    94C6 : 79 09               	JNS	NSCFOR			; No array with "FOR" or "FN"
    3207/    94C8 : 8A 07               	MOV	AL,[BX]			; Get byte again
    3208/    94CA : 2C 28               	SUB	AL,'('			; Subscripted variable?
    3209/    94CC : 75 03               	JNZ	NSCFOR			; Yes - Sort out subscript
    3210/    94CE : E9 9F 00            	JMP	SBSCPT
    3211/    94D1 :                     ;
    3212/    94D1 :                     NSCFOR:
    3213/    94D1 : 32 C0               	XOR	AL,AL			; Simple variable
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 55 - 2023/09/19 18時02分31秒


    3214/    94D3 : A2 15 09            	MOV	[FORFLG],AL		; Clear "FOR" flag
    3215/    94D6 : 53                  	PUSH	BX			; Save code string address
    3216/    94D7 : 8A F5               	MOV	DH,CH			; DE = Variable name to find
    3217/    94D9 : 8A D1               	MOV	DL,CL
    3218/    94DB : 8B 1E 28 09         	MOV	BX,[FNRGNM]		; FN argument name
    3219/    94DF : E8 D3 F4            	CALL	CPDEHL			; Is it the FN argument?
    3220/    94E2 : BA 2A 09            	MOV	DX,FNARG		; Point to argument value
    3221/    94E5 : 75 03               	JNZ	NSCFOR1
    3222/    94E7 : E9 C8 09            	JMP	POPHRT			; Yes - Return FN argument value
    3223/    94EA :                     NSCFOR1:
    3224/    94EA : 8B 1E 22 09         	MOV	BX,[VAREND]		; End of variables
    3225/    94EE : 87 DA               	XCHG	BX,DX			; Address of end of search
    3226/    94F0 : 8B 1E 20 09         	MOV	BX,[PROGND]		; Start of variables address
    3227/    94F4 :                     FNDVAR:
    3228/    94F4 : E8 BE F4            	CALL	CPDEHL			; End of variable list table?
    3229/    94F7 : 74 20               	JZ	CFEVAL			; Yes - Called from EVAL?
    3230/    94F9 : 8A C1               	MOV	AL,CL			; Get second byte of name
    3231/    94FB : 2A 07               	SUB	AL,[BX]			; Compare with name in list
    3232/    94FD : 9F                  	LAHF
    3233/    94FE : 43                  	INC	BX			; Move on to first byte
    3234/    94FF : 9E                  	SAHF
    3235/    9500 : 75 04               	JNZ	FNTHR			; Different - Find another
    3236/    9502 : 8A C5               	MOV	AL,CH			; Get first byte of name
    3237/    9504 : 2A 07               	SUB	AL,[BX]			; Compare with name in list
    3238/    9506 :                     FNTHR:
    3239/    9506 : 9F                  	LAHF
    3240/    9507 : 43                  	INC	BX			; Move on to LSB of value
    3241/    9508 : 9E                  	SAHF
    3242/    9509 : 74 55               	JZ	RETADR			; Found - Return address
    3243/    950B : 9F                  	LAHF
    3244/    950C : 43                  	INC	BX			; <- Skip
    3245/    950D : 9E                  	SAHF
    3246/    950E : 9F                  	LAHF
    3247/    950F : 43                  	INC	BX			; <- over
    3248/    9510 : 9E                  	SAHF
    3249/    9511 : 9F                  	LAHF
    3250/    9512 : 43                  	INC	BX			; <- F.P.
    3251/    9513 : 9E                  	SAHF
    3252/    9514 : 9F                  	LAHF
    3253/    9515 : 43                  	INC	BX			; <- value
    3254/    9516 : 9E                  	SAHF
    3255/    9517 : EB DB               	JMP	FNDVAR			; Keep looking
    3256/    9519 :                     ;
    3257/    9519 :                     CFEVAL:
    3258/    9519 : 5B                  	POP	BX			; Restore code string address
    3259/    951A : 8B EC               	MOV	BP,SP
    3260/    951C : 87 5E 00            	XCHG	[BP],BX			; Get return address
    3261/    951F : 52                  	PUSH	DX			; Save address of variable
    3262/    9520 : BA E6 92            	MOV	DX,FRMEVL		; Return address in EVAL
    3263/    9523 : E8 8F F4            	CALL	CPDEHL			; Called from EVAL ?
    3264/    9526 : 5A                  	POP	DX			; Restore address of variable
    3265/    9527 : 74 3B               	JZ	RETNUL			; Yes - Return null variable
    3266/    9529 : 8B EC               	MOV	BP,SP
    3267/    952B : 87 5E 00            	XCHG	[BP],BX			; Put back return
    3268/    952E : 53                  	PUSH	BX			; Save code string address
    3269/    952F : 51                  	PUSH	CX			; Save variable name
    3270/    9530 : B9 06 00            	MOV	CX,6			; 2 byte name plus 4 by data
    3271/    9533 : 8B 1E 24 09         	MOV	BX,[ARREND]		; End of arrays
    3272/    9537 : 53                  	PUSH	BX			; Save end of arrays
    3273/    9538 : 03 D9               	ADD	BX,CX			; Move up 6 bytes
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 56 - 2023/09/19 18時02分31秒


    3274/    953A : 59                  	POP	CX			; Source address in BC
    3275/    953B : 53                  	PUSH	BX			; Save new end address
    3276/    953C : E8 82 F0            	CALL	MOVUP			; Move arrays up
    3277/    953F : 5B                  	POP	BX			; Restore new end address
    3278/    9540 : 89 1E 24 09         	MOV	[ARREND],BX		; Set new end address
    3279/    9544 : 8B D9               	MOV	BX,CX			; End of variables to HL
    3280/    9546 : 89 1E 22 09         	MOV	[VAREND],BX		; Set new end address
    3281/    954A :                     ;
    3282/    954A :                     ZEROLP:
    3283/    954A : 9F                  	LAHF
    3284/    954B : 4B                  	DEC	BX			; Back through to zero variable
    3285/    954C : 9E                  	SAHF
    3286/    954D : C6 07 00            	MOV	BYTE PTR [BX],0		; Zero byte in variable
    3287/    9550 : E8 62 F4            	CALL	CPDEHL			; Done them all?
    3288/    9553 : 75 F5               	JNZ	ZEROLP			; No - Keep on going
    3289/    9555 : 5A                  	POP	DX			; Get variable name
    3290/    9556 : 88 17               	MOV	[BX],DL			; Store second character
    3291/    9558 : 9F                  	LAHF
    3292/    9559 : 43                  	INC	BX
    3293/    955A : 9E                  	SAHF
    3294/    955B : 88 37               	MOV	[BX],DH			; Store first character
    3295/    955D : 9F                  	LAHF
    3296/    955E : 43                  	INC	BX
    3297/    955F : 9E                  	SAHF
    3298/    9560 :                     RETADR:
    3299/    9560 : 87 DA               	XCHG	BX,DX			; Address of variable in DE
    3300/    9562 : 5B                  	POP	BX			; Restore code string address
    3301/    9563 : C3                  	RET
    3302/    9564 :                     ;
    3303/    9564 :                     RETNUL:
    3304/    9564 : A2 31 09            	MOV	[FPEXP],AL		; Set result to zero
    3305/    9567 : BB 86 85            	MOV	BX,ZERBYT		; Also set a null string
    3306/    956A : 89 1E 2E 09         	MOV	[FPREG],BX		; Save for EVAL
    3307/    956E : 5B                  	POP	BX			; Restore code string address
    3308/    956F : C3                  	RET
    3309/    9570 :                     ;
    3310/    9570 :                     SBSCPT:
    3311/    9570 : 53                  	PUSH	BX			; Save code string address
    3312/    9571 : 8B 1E F6 08         	MOV	BX,[LCRFLG]		; Locate/Create and Type
    3313/    9575 : 8B EC               	MOV	BP,SP
    3314/    9577 : 87 5E 00            	XCHG	[BP],BX			; Save and get code string
    3315/    957A : 8A F0               	MOV	DH,AL			; Zero number of dimensions
    3316/    957C :                     SCPTLP:
    3317/    957C : 52                  	PUSH	DX			; Save number of dimensions
    3318/    957D : 51                  	PUSH	CX			; Save array name
    3319/    957E : E8 43 F7            	CALL	FPSINT			; Get subscript (0-32767)
    3320/    9581 : 59                  	POP	CX			; Restore array name
    3321/    9582 : 58                  	POP	AX			; Get number of dimensions
    3322/    9583 : 86 E0               	XCHG	AH,AL
    3323/    9585 : 9E                  	SAHF
    3324/    9586 : 87 DA               	XCHG	BX,DX
    3325/    9588 : 8B EC               	MOV	BP,SP
    3326/    958A : 87 5E 00            	XCHG	[BP],BX			; Save subscript value
    3327/    958D : 53                  	PUSH	BX			; Save LCRFLG and TYPE
    3328/    958E : 87 DA               	XCHG	BX,DX
    3329/    9590 : FE C0               	INC	AL			; Count dimensions
    3330/    9592 : 8A F0               	MOV	DH,AL			; Save in D
    3331/    9594 : 8A 07               	MOV	AL,[BX]			; Get next byte in code string
    3332/    9596 : 3C 2C               	CMP	AL,','			; Comma (more to come)?
    3333/    9598 : 74 E2               	JZ	SCPTLP			; Yes - More subscripts
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 57 - 2023/09/19 18時02分31秒


    3334/    959A : E8 24 F4            	CALL	CHKSYN			; Make sure ")" follows
    3335/    959D : 29                  	DB	")"
    3336/    959E : 89 1E 1A 09         	MOV	[NXTOPR],BX		; Save code string address
    3337/    95A2 : 5B                  	POP	BX			; Get LCRFLG and TYPE
    3338/    95A3 : 89 1E F6 08         	MOV	[LCRFLG],BX		; Restore Locate/create & type
    3339/    95A7 : B2 00               	MOV	DL,0			; Flag not CSAVE* or CLOAD*
    3340/    95A9 : 52                  	PUSH	DX			; Save number of dimensions (D)
    3341/    95AA : EB 07               	JMP	ARLDSV1			; Skip "PUSH HL" and "PUSH AF"
    3342/    95AC :                     ;
    3343/    95AC :                     ARLDSV:
    3344/    95AC : 53                  	PUSH	BX			; Save code string address
    3345/    95AD : 9F                  	LAHF
    3346/    95AE : 86 E0               	XCHG	AH,AL
    3347/    95B0 : 50                  	PUSH	AX			; A = 00 , Flags set = Z,N
    3348/    95B1 : 86 E0               	XCHG	AH,AL
    3349/    95B3 :                     ARLDSV1:
    3350/    95B3 : 8B 1E 22 09         	MOV	BX,[VAREND]		; Start of arrays
    3351/    95B7 : EB 02               	JMP	FNDARY1			; Skip "ADD HL,DE"
    3352/    95B9 :                     FNDARY:
    3353/    95B9 : 03 DA               	ADD	BX,DX			; Move to next array start
    3354/    95BB :                     FNDARY1:
    3355/    95BB : 87 DA               	XCHG	BX,DX
    3356/    95BD : 8B 1E 24 09         	MOV	BX,[ARREND]		; End of arrays
    3357/    95C1 : 87 DA               	XCHG	BX,DX			; Current array pointer
    3358/    95C3 : E8 EF F3            	CALL	CPDEHL			; End of arrays found?
    3359/    95C6 : 74 3D               	JZ	CREARY			; Yes - Create array
    3360/    95C8 : 8A 07               	MOV	AL,[BX]			; Get second byte of name
    3361/    95CA : 3A C1               	CMP	AL,CL			; Compare with name given
    3362/    95CC : 9F                  	LAHF
    3363/    95CD : 43                  	INC	BX			; Move on
    3364/    95CE : 9E                  	SAHF
    3365/    95CF : 75 04               	JNZ	NXTARY			; Different - Find next array
    3366/    95D1 : 8A 07               	MOV	AL,[BX]			; Get first byte of name
    3367/    95D3 : 3A C5               	CMP	AL,CH			; Compare with name given
    3368/    95D5 :                     NXTARY:
    3369/    95D5 : 9F                  	LAHF
    3370/    95D6 : 43                  	INC	BX			; Move on
    3371/    95D7 : 9E                  	SAHF
    3372/    95D8 : 8A 17               	MOV	DL,[BX]			; Get LSB of next array address
    3373/    95DA : 9F                  	LAHF
    3374/    95DB : 43                  	INC	BX
    3375/    95DC : 9E                  	SAHF
    3376/    95DD : 8A 37               	MOV	DH,[BX]			; Get MSB of next array address
    3377/    95DF : 9F                  	LAHF
    3378/    95E0 : 43                  	INC	BX
    3379/    95E1 : 9E                  	SAHF
    3380/    95E2 : 75 D5               	JNZ	FNDARY			; Not found - Keep looking
    3381/    95E4 : A0 F6 08            	MOV	AL,[LCRFLG]		; Found Locate or Creat it?
    3382/    95E7 : 0A C0               	OR	AL,AL
    3383/    95E9 : 74 03               	JZ	NXTARY1			; Create - ?DD Error
    3384/    95EB : E9 27 F0            	JMP	DDERR
    3385/    95EE :                     NXTARY1:
    3386/    95EE : 58                  	POP	AX			; Locate - Get number of dimensions
    3387/    95EF : 86 E0               	XCHG	AH,AL
    3388/    95F1 : 9E                  	SAHF
    3389/    95F2 : 8B CB               	MOV	CX,BX			; BC Points to array dimensions
    3390/    95F4 : 75 03               	JNZ	NXTARY2			; Jump if array load/save
    3391/    95F6 : E9 B9 08            	JMP	POPHRT
    3392/    95F9 :                     NXTARY2:
    3393/    95F9 : 2A 07               	SUB	AL,[BX]			; Same number of dimensions?
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 58 - 2023/09/19 18時02分31秒


    3394/    95FB : 75 03               	JNZ	BSERR			; Yes - Find element
    3395/    95FD : E9 AA 00            	JMP	FINDEL
    3396/    9600 :                     BSERR:
    3397/    9600 : B2 10               	MOV	DL,BS			; ?BS Error
    3398/    9602 : E9 1E F0            	JMP	ERROR			; Output error
    3399/    9605 :                     ;
    3400/    9605 :                     CREARY:
    3401/    9605 : BA 04 00            	MOV	DX,4			; 4 Bytes per entry
    3402/    9608 : 58                  	POP	AX			; Array to save or 0 dimensions?
    3403/    9609 : 86 E0               	XCHG	AH,AL
    3404/    960B : 9E                  	SAHF
    3405/    960C : 75 03               	JNZ	CREARY1
    3406/    960E : E9 D8 F6            	JMP	FCERR			; Yes - ?FC Error
    3407/    9611 :                     CREARY1:
    3408/    9611 : 88 0F               	MOV	[BX],CL			; Save second byte of n
    3409/    9613 : 9F                  	LAHF
    3410/    9614 : 43                  	INC	BX
    3411/    9615 : 9E                  	SAHF
    3412/    9616 : 88 2F               	MOV	[BX],CH			; Save first byte of name
    3413/    9618 : 9F                  	LAHF
    3414/    9619 : 43                  	INC	BX
    3415/    961A : 9E                  	SAHF
    3416/    961B : 8A C8               	MOV	CL,AL			; Number of dimensions to C
    3417/    961D : E8 BD EF            	CALL	CHKSTK			; Check if enough memory
    3418/    9620 : 9F                  	LAHF
    3419/    9621 : 43                  	INC	BX			; Point to number of dimensions
    3420/    9622 : 9E                  	SAHF
    3421/    9623 : 9F                  	LAHF
    3422/    9624 : 43                  	INC	BX
    3423/    9625 : 9E                  	SAHF
    3424/    9626 : 89 1E 0F 09         	MOV	[CUROPR],BX		; Save address of pointer
    3425/    962A : 88 0F               	MOV	[BX],CL			; Set number of dimensions
    3426/    962C : 9F                  	LAHF
    3427/    962D : 43                  	INC	BX
    3428/    962E : 9E                  	SAHF
    3429/    962F : A0 F6 08            	MOV	AL,[LCRFLG]		; Locate of Create?
    3430/    9632 : D0 D0               	RCL	AL,1			; Carry set = Create
    3431/    9634 : 8A C1               	MOV	AL,CL			; Get number of dimensions
    3432/    9636 :                     CRARLP:
    3433/    9636 : B9 0B 00            	MOV	CX,10+1			; Default dimension size 10
    3434/    9639 : 73 04               	JNC	DEFSIZ			; Locate - Set default size
    3435/    963B : 59                  	POP	CX			; Get specified dimension size
    3436/    963C : 9F                  	LAHF
    3437/    963D : 41                  	INC	CX			; Include zero element
    3438/    963E : 9E                  	SAHF
    3439/    963F :                     DEFSIZ:
    3440/    963F : 88 0F               	MOV	[BX],CL			; Save LSB of dimension size
    3441/    9641 : 9F                  	LAHF
    3442/    9642 : 43                  	INC	BX
    3443/    9643 : 9E                  	SAHF
    3444/    9644 : 88 2F               	MOV	[BX],CH			; Save MSB of dimension size
    3445/    9646 : 9F                  	LAHF
    3446/    9647 : 43                  	INC	BX
    3447/    9648 : 9E                  	SAHF
    3448/    9649 : 9F                  	LAHF
    3449/    964A : 86 E0               	XCHG	AH,AL
    3450/    964C : 50                  	PUSH	AX			; Save num' of dimensions an status
    3451/    964D : 86 E0               	XCHG	AH,AL
    3452/    964F : 53                  	PUSH	BX			; Save address of dimensions size
    3453/    9650 : E8 DF 0A            	CALL	MLDEBC			; Multiply DE by BC to find
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 59 - 2023/09/19 18時02分31秒


    3454/    9653 : 87 DA               	XCHG	BX,DX			; amount of mem needed (to DE)
    3455/    9655 : 5B                  	POP	BX			; Restore address of dimension
    3456/    9656 : 58                  	POP	AX			; Restore number of dimensions
    3457/    9657 : 86 E0               	XCHG	AH,AL
    3458/    9659 : 9E                  	SAHF
    3459/    965A : FE C8               	DEC	AL			; Count them
    3460/    965C : 75 D8               	JNZ	CRARLP			; Do next dimension if more
    3461/    965E : 9F                  	LAHF
    3462/    965F : 86 E0               	XCHG	AH,AL
    3463/    9661 : 50                  	PUSH	AX			; Save locate/create flag
    3464/    9662 : 86 E0               	XCHG	AH,AL
    3465/    9664 : 8B CA               	MOV	CX,DX			; memory needed
    3466/    9666 : 87 DA               	XCHG	BX,DX
    3467/    9668 : 03 DA               	ADD	BX,DX			; Add bytes to array start
    3468/    966A : 73 03               	JNC	DEFSIZ1
    3469/    966C : E9 90 EF            	JMP	OMERR			; Too big - Error
    3470/    966F :                     DEFSIZ1:
    3471/    966F : E8 78 EF            	CALL	ENFMEM			; See if enough memory
    3472/    9672 : 89 1E 24 09         	MOV	[ARREND],BX		; Save new end of array
    3473/    9676 :                     ;
    3474/    9676 :                     ZERARY:
    3475/    9676 : 9F                  	LAHF
    3476/    9677 : 4B                  	DEC	BX			; Back through array data
    3477/    9678 : 9E                  	SAHF
    3478/    9679 : C6 07 00            	MOV	BYTE PTR [BX],0		; Set array element to zero
    3479/    967C : E8 36 F3            	CALL	CPDEHL			; All elements zeroed?
    3480/    967F : 75 F5               	JNZ	ZERARY			; No - Keep on going
    3481/    9681 : 9F                  	LAHF
    3482/    9682 : 41                  	INC	CX			; Number of bytes + 1
    3483/    9683 : 9E                  	SAHF
    3484/    9684 : 8A F0               	MOV	DH,AL			; A=0
    3485/    9686 : 8B 1E 0F 09         	MOV	BX,[CUROPR]		; Get address of array
    3486/    968A : 8A 17               	MOV	DL,[BX]			; Number of dimensions
    3487/    968C : 87 DA               	XCHG	BX,DX			; To HL
    3488/    968E : 03 DB               	ADD	BX,BX			; Two bytes per dimension size
    3489/    9690 : 03 D9               	ADD	BX,CX			; Add number of bytes
    3490/    9692 : 87 DA               	XCHG	BX,DX			; Bytes needed to DE
    3491/    9694 : 9F                  	LAHF
    3492/    9695 : 4B                  	DEC	BX
    3493/    9696 : 9E                  	SAHF
    3494/    9697 : 9F                  	LAHF
    3495/    9698 : 4B                  	DEC	BX
    3496/    9699 : 9E                  	SAHF
    3497/    969A : 88 17               	MOV	[BX],DL			; Save LSB of bytes needed
    3498/    969C : 9F                  	LAHF
    3499/    969D : 43                  	INC	BX
    3500/    969E : 9E                  	SAHF
    3501/    969F : 88 37               	MOV	[BX],DH			; Save MSB of bytes needed
    3502/    96A1 : 9F                  	LAHF
    3503/    96A2 : 43                  	INC	BX
    3504/    96A3 : 9E                  	SAHF
    3505/    96A4 : 58                  	POP	AX			; Locate / Create?
    3506/    96A5 : 86 E0               	XCHG	AH,AL
    3507/    96A7 : 9E                  	SAHF
    3508/    96A8 : 72 43               	JC	ENDDIM			; A is 0 , End if create
    3509/    96AA :                     FINDEL:
    3510/    96AA : 8A E8               	MOV	CH,AL			; Find array element
    3511/    96AC : 8A C8               	MOV	CL,AL
    3512/    96AE : 8A 07               	MOV	AL,[BX]			; Number of dimensions
    3513/    96B0 : 9F                  	LAHF
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 60 - 2023/09/19 18時02分31秒


    3514/    96B1 : 43                  	INC	BX
    3515/    96B2 : 9E                  	SAHF
    3516/    96B3 : EB 01               	JMP	FNDELP1			; Skip "POP BX"
    3517/    96B5 :                     FNDELP:
    3518/    96B5 : 5B                  	POP	BX			; Address of next dim' size
    3519/    96B6 :                     FNDELP1:
    3520/    96B6 : 8A 17               	MOV	DL,[BX]			; Get LSB of dim'n size
    3521/    96B8 : 9F                  	LAHF
    3522/    96B9 : 43                  	INC	BX
    3523/    96BA : 9E                  	SAHF
    3524/    96BB : 8A 37               	MOV	DH,[BX]			; Get MSB of dim'n size
    3525/    96BD : 9F                  	LAHF
    3526/    96BE : 43                  	INC	BX
    3527/    96BF : 9E                  	SAHF
    3528/    96C0 : 8B EC               	MOV	BP,SP
    3529/    96C2 : 87 5E 00            	XCHG	[BP],BX			; Save address - Get index
    3530/    96C5 : 9F                  	LAHF
    3531/    96C6 : 86 E0               	XCHG	AH,AL
    3532/    96C8 : 50                  	PUSH	AX			; Save number of dimensions
    3533/    96C9 : 86 E0               	XCHG	AH,AL
    3534/    96CB : E8 E7 F2            	CALL	CPDEHL			; Dimension too large?
    3535/    96CE : 72 03               	JC	FNDELP2
    3536/    96D0 : E9 2D FF            	JMP	BSERR			; Yes - ?BS Error
    3537/    96D3 :                     FNDELP2:
    3538/    96D3 : 53                  	PUSH	BX			; Save index
    3539/    96D4 : E8 5B 0A            	CALL	MLDEBC			; Multiply previous by size
    3540/    96D7 : 5A                  	POP	DX			; Index supplied to DE
    3541/    96D8 : 03 DA               	ADD	BX,DX			; Add index to pointer
    3542/    96DA : 58                  	POP	AX			; Number of dimensions
    3543/    96DB : 86 E0               	XCHG	AH,AL
    3544/    96DD : 9E                  	SAHF
    3545/    96DE : FE C8               	DEC	AL			; Count them
    3546/    96E0 : 8B CB               	MOV	CX,BX			; pointer
    3547/    96E2 : 75 D1               	JNZ	FNDELP			; More - Keep going
    3548/    96E4 : 03 DB               	ADD	BX,BX			; 4 Bytes per element
    3549/    96E6 : 03 DB               	ADD	BX,BX
    3550/    96E8 : 59                  	POP	CX			; Start of array
    3551/    96E9 : 03 D9               	ADD	BX,CX			; Point to element
    3552/    96EB : 87 DA               	XCHG	BX,DX			; Address of element to DE
    3553/    96ED :                     ENDDIM:
    3554/    96ED : 8B 1E 1A 09         	MOV	BX,[NXTOPR]		; Got code string address
    3555/    96F1 : C3                  	RET
    3556/    96F2 :                     ;
    3557/    96F2 :                     FRE:
    3558/    96F2 : 8B 1E 24 09         	MOV	BX,[ARREND]		; Start of free memory
    3559/    96F6 : 87 DA               	XCHG	BX,DX			; To DE
    3560/    96F8 : BB 00 00            	MOV	BX,0			; End of free memory
    3561/    96FB : 03 DC               	ADD	BX,SP			; Current stack value
    3562/    96FD : A0 F7 08            	MOV	AL,[TYPE]		; Dummy argument type
    3563/    9700 : 0A C0               	OR	AL,AL
    3564/    9702 : 74 10               	JZ	FRENUM			; Numeric - Free variable space
    3565/    9704 : E8 85 03            	CALL	GSTRCU			; Current string to pool
    3566/    9707 : E8 0B 02            	CALL	GARBGE			; Garbage collection
    3567/    970A : 8B 1E A4 08         	MOV	BX,[STRSPC]		; Bottom of string space in use
    3568/    970E : 87 DA               	XCHG	BX,DX			; To DE
    3569/    9710 : 8B 1E 0D 09         	MOV	BX,[STRBOT]		; Bottom of string space
    3570/    9714 :                     FRENUM:
    3571/    9714 : 8A C3               	MOV	AL,BL			; Get LSB of end
    3572/    9716 : 2A C2               	SUB	AL,DL			; Subtract LSB of beginning
    3573/    9718 : 8A C8               	MOV	CL,AL			; Save difference if C
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 61 - 2023/09/19 18時02分31秒


    3574/    971A : 8A C7               	MOV	AL,BH			; Get MSB of end
    3575/    971C : 1A C6               	SBB	AL,DH			; Subtract MSB of beginning
    3576/    971E :                     ACPASS:
    3577/    971E : 8A E9               	MOV	CH,CL			; Return integer AC
    3578/    9720 :                     ABPASS:
    3579/    9720 : 8A F5               	MOV	DH,CH			; Return integer AB
    3580/    9722 : B2 00               	MOV	DL,0
    3581/    9724 : BB F7 08            	MOV	BX,TYPE			; Point to type
    3582/    9727 : 88 17               	MOV	[BX],DL			; Set type to numeric
    3583/    9729 : B5 90               	MOV	CH,80H+16		; 16 bit integer
    3584/    972B : E9 AD 08            	JMP	RETINT			; Return the integr
    3585/    972E :                     ;
    3586/    972E :                     POS:
    3587/    972E : A0 F5 08            	MOV	AL,[CURPOS]		; Get cursor position
    3588/    9731 :                     PASSA:
    3589/    9731 : 8A E8               	MOV	CH,AL			; Put A into AB
    3590/    9733 : 32 C0               	XOR	AL,AL			; Zero A
    3591/    9735 : EB E9               	JMP	ABPASS			; Return integer AB
    3592/    9737 :                     ;
    3593/    9737 :                     DEF:
    3594/    9737 : E8 B6 00            	CALL	CHEKFN			; Get "FN" and name
    3595/    973A : E8 9E 00            	CALL	IDTEST			; Test for illegal direct
    3596/    973D : B9 0C 8E            	MOV	CX,DATA			; To get next statement
    3597/    9740 : 51                  	PUSH	CX			; Save address for RETurn
    3598/    9741 : 52                  	PUSH	DX			; Save address of function ptr
    3599/    9742 : E8 7C F2            	CALL	CHKSYN			; Make sure "(" follows
    3600/    9745 : 28                  	DB	"("
    3601/    9746 : E8 35 FD            	CALL	GETVAR			; Get argument variable name
    3602/    9749 : 53                  	PUSH	BX			; Save code string address
    3603/    974A : 87 DA               	XCHG	BX,DX			; Argument address to HL
    3604/    974C : 9F                  	LAHF
    3605/    974D : 4B                  	DEC	BX
    3606/    974E : 9E                  	SAHF
    3607/    974F : 8A 37               	MOV	DH,[BX]			; Get first byte of arg name
    3608/    9751 : 9F                  	LAHF
    3609/    9752 : 4B                  	DEC	BX
    3610/    9753 : 9E                  	SAHF
    3611/    9754 : 8A 17               	MOV	DL,[BX]			; Get second byte of ar
    3612/    9756 : 5B                  	POP	BX			; Restore code string address
    3613/    9757 : E8 53 FA            	CALL	TSTNUM			; Make sure numeric argument
    3614/    975A : E8 64 F2            	CALL	CHKSYN			; Make sure ")" follows
    3615/    975D : 29                  	DB	")"
    3616/    975E : E8 60 F2            	CALL	CHKSYN			; Make sure "=" follows
    3617/    9761 : B4                  	DB	ZEQUAL			; "=" token
    3618/    9762 : 8B CB               	MOV	CX,BX			; Code string address to BC
    3619/    9764 : 8B EC               	MOV	BP,SP
    3620/    9766 : 87 5E 00            	XCHG	[BP],BX			; Save code str , Get FN ptr
    3621/    9769 : 88 0F               	MOV	[BX],CL			; Save LSB of FN code string
    3622/    976B : 9F                  	LAHF
    3623/    976C : 43                  	INC	BX
    3624/    976D : 9E                  	SAHF
    3625/    976E : 88 2F               	MOV	[BX],CH			; Save MSB of FN code string
    3626/    9770 : E9 CB 00            	JMP	SVSTAD			; Save address and do function
    3627/    9773 :                     ;
    3628/    9773 :                     DOFN:
    3629/    9773 : E8 7A 00            	CALL	CHEKFN			; Make sure FN follows
    3630/    9776 : 52                  	PUSH	DX			; Save function pointer address
    3631/    9777 : E8 4F FB            	CALL	EVLPAR			; Evaluate expression in "()"
    3632/    977A : E8 30 FA            	CALL	TSTNUM			; Make sure numeric result
    3633/    977D : 8B EC               	MOV	BP,SP
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 62 - 2023/09/19 18時02分31秒


    3634/    977F : 87 5E 00            	XCHG	[BP],BX			; Save code str , Get FN ptr
    3635/    9782 : 8A 17               	MOV	DL,[BX]			; Get LSB of FN code string
    3636/    9784 : 9F                  	LAHF
    3637/    9785 : 43                  	INC	BX
    3638/    9786 : 9E                  	SAHF
    3639/    9787 : 8A 37               	MOV	DH,[BX]			; Get MSB of FN code string
    3640/    9789 : 9F                  	LAHF
    3641/    978A : 43                  	INC	BX
    3642/    978B : 9E                  	SAHF
    3643/    978C : 8A C6               	MOV	AL,DH			; And function DEFined?
    3644/    978E : 0A C2               	OR	AL,DL
    3645/    9790 : 75 03               	JNZ	DOFN1
    3646/    9792 : E9 84 EE            	JMP	UFERR			; No - ?UF Error
    3647/    9795 :                     DOFN1:
    3648/    9795 : 8A 07               	MOV	AL,[BX]			; Get LSB of argument address
    3649/    9797 : 9F                  	LAHF
    3650/    9798 : 43                  	INC	BX
    3651/    9799 : 9E                  	SAHF
    3652/    979A : 8A 3F               	MOV	BH,[BX]			; Get MSB of argument address
    3653/    979C : 8A D8               	MOV	BL,AL			; HL = Arg variable address
    3654/    979E : 53                  	PUSH	BX			; Save it
    3655/    979F : 8B 1E 28 09         	MOV	BX,[FNRGNM]		; Get old argument name
    3656/    97A3 : 8B EC               	MOV	BP,SP
    3657/    97A5 : 87 5E 00            	XCHG	[BP],BX			; Save old , Get new
    3658/    97A8 : 89 1E 28 09         	MOV	[FNRGNM],BX		; Set new argument name
    3659/    97AC : 8B 1E 2C 09         	MOV	BX,[FNARG+2]		; Get LSB,NLSB of old arg value
    3660/    97B0 : 53                  	PUSH	BX			; Save it
    3661/    97B1 : 8B 1E 2A 09         	MOV	BX,[FNARG]		; Get MSB,EXP of old arg value
    3662/    97B5 : 53                  	PUSH	BX			; Save it
    3663/    97B6 : BB 2A 09            	MOV	BX,FNARG		; HL = Value of argument
    3664/    97B9 : 52                  	PUSH	DX			; Save FN code string address
    3665/    97BA : E8 7F 08            	CALL	FPTHL			; Move FPREG to argument
    3666/    97BD : 5B                  	POP	BX			; Get FN code string address
    3667/    97BE : E8 E9 F9            	CALL	GETNUM			; Get value from function
    3668/    97C1 :                     ;	LAHF
    3669/    97C1 : 4B                  	DEC	BX			; DEC 'cos GETCHR INCs
    3670/    97C2 :                     ;	SAHF
    3671/    97C2 : E8 15 F4            	CALL	GETCHR			; Get next character
    3672/    97C5 : 74 03               	JZ	DOFN2
    3673/    97C7 : E9 41 EE            	JMP	SNERR			; Bad character in FN - Error
    3674/    97CA :                     DOFN2:
    3675/    97CA : 5B                  	POP	BX			; Get MSB,EXP of old arg
    3676/    97CB : 89 1E 2A 09         	MOV	[FNARG],BX		; Restore it
    3677/    97CF : 5B                  	POP	BX			; Get LSB,NLSB of old arg
    3678/    97D0 : 89 1E 2C 09         	MOV	[FNARG+2],BX		; Restore it
    3679/    97D4 : 5B                  	POP	BX			; Get name of old arg
    3680/    97D5 : 89 1E 28 09         	MOV	[FNRGNM],BX		; Restore it
    3681/    97D9 : 5B                  	POP	BX			; Restore code string address
    3682/    97DA : C3                  	RET
    3683/    97DB :                     ;
    3684/    97DB :                     IDTEST:
    3685/    97DB : 53                  	PUSH	BX			; Save code string address
    3686/    97DC : 8B 1E A6 08         	MOV	BX,[LINEAT]		; Get current line number
    3687/    97E0 : 9F                  	LAHF
    3688/    97E1 : 43                  	INC	BX			; -1 means direct statement
    3689/    97E2 : 9E                  	SAHF
    3690/    97E3 : 8A C7               	MOV	AL,BH
    3691/    97E5 : 0A C3               	OR	AL,BL
    3692/    97E7 : 5B                  	POP	BX			; Restore code string address
    3693/    97E8 : 74 01               	JZ	IDTEST1
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 63 - 2023/09/19 18時02分31秒


    3694/    97EA : C3                  	RET				; Return if in program
    3695/    97EB :                     IDTEST1:
    3696/    97EB : B2 16               	MOV	DL,ID			; ?ID Error
    3697/    97ED : E9 33 EE            	JMP	ERROR
    3698/    97F0 :                     ;
    3699/    97F0 :                     CHEKFN:
    3700/    97F0 : E8 CE F1            	CALL	CHKSYN			; Make sure FN follows
    3701/    97F3 : A7                  	DB	ZFN			; "FN" token
    3702/    97F4 : B0 80               	MOV	AL,80H
    3703/    97F6 : A2 15 09            	MOV	[FORFLG],AL		; Flag FN name to find
    3704/    97F9 : 0A 07               	OR	AL,[BX]			; FN name has bit 7 set
    3705/    97FB : 8A E8               	MOV	CH,AL			; in first byte of name
    3706/    97FD : E8 85 FC            	CALL	GTFNAM			; Get FN name
    3707/    9800 : E9 AA F9            	JMP	TSTNUM			; Make sure numeric function
    3708/    9803 :                     ;
    3709/    9803 :                     STR:
    3710/    9803 : E8 A7 F9            	CALL	TSTNUM			; Make sure it's a number
    3711/    9806 : E8 21 0A            	CALL	NUMASC			; Turn number into text
    3712/    9809 :                     STR1:
    3713/    9809 : E8 3E 00            	CALL	CRTST			; Create string entry for it
    3714/    980C : E8 7D 02            	CALL	GSTRCU			; Current string to pool
    3715/    980F : B9 07 9B            	MOV	CX,TOPOOL		; Save in string pool
    3716/    9812 : 51                  	PUSH	CX			; Save address on stack
    3717/    9813 :                     ;
    3718/    9813 :                     SAVSTR:
    3719/    9813 : 8A 07               	MOV	AL,[BX]			; Get string length
    3720/    9815 : 9F                  	LAHF
    3721/    9816 : 43                  	INC	BX
    3722/    9817 : 9E                  	SAHF
    3723/    9818 : 9F                  	LAHF
    3724/    9819 : 43                  	INC	BX
    3725/    981A : 9E                  	SAHF
    3726/    981B : 53                  	PUSH	BX			; Save pointer to string
    3727/    981C : E8 AB 00            	CALL	TESTR			; See if enough string space
    3728/    981F : 5B                  	POP	BX			; Restore pointer to string
    3729/    9820 : 8A 0F               	MOV	CL,[BX]			; Get LSB of address
    3730/    9822 : 9F                  	LAHF
    3731/    9823 : 43                  	INC	BX
    3732/    9824 : 9E                  	SAHF
    3733/    9825 : 8A 2F               	MOV	CH,[BX]			; Get MSB of address
    3734/    9827 : E8 0B 00            	CALL	CRTMST			; Create string entry
    3735/    982A : 53                  	PUSH	BX			; Save pointer to MSB of addr
    3736/    982B : 8A D8               	MOV	BL,AL			; Length of string
    3737/    982D : E8 42 02            	CALL	TOSTRA			; Move to string area
    3738/    9830 : 5A                  	POP	DX			; Restore pointer to MSB
    3739/    9831 : C3                  	RET
    3740/    9832 :                     ;
    3741/    9832 :                     MKTMST:
    3742/    9832 : E8 95 00            	CALL	TESTR			; See if enough string space
    3743/    9835 :                     CRTMST:
    3744/    9835 : BB 09 09            	MOV	BX,TMPSTR		; Temporary string
    3745/    9838 : 53                  	PUSH	BX			; Save it
    3746/    9839 : 88 07               	MOV	[BX],AL			; Save length of string
    3747/    983B : 9F                  	LAHF
    3748/    983C : 43                  	INC	BX
    3749/    983D : 9E                  	SAHF
    3750/    983E :                     SVSTAD:
    3751/    983E : 9F                  	LAHF
    3752/    983F : 43                  	INC	BX
    3753/    9840 : 9E                  	SAHF
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 64 - 2023/09/19 18時02分31秒


    3754/    9841 : 88 17               	MOV	[BX],DL			; Save LSB of address
    3755/    9843 : 9F                  	LAHF
    3756/    9844 : 43                  	INC	BX
    3757/    9845 : 9E                  	SAHF
    3758/    9846 : 88 37               	MOV	[BX],DH			; Save MSB of address
    3759/    9848 : 5B                  	POP	BX			; Restore pointer
    3760/    9849 : C3                  	RET
    3761/    984A :                     ;
    3762/    984A :                     CRTST:
    3763/    984A : 9F                  	LAHF
    3764/    984B : 4B                  	DEC	BX			; DEC - INCed after
    3765/    984C : 9E                  	SAHF
    3766/    984D :                     QTSTR:
    3767/    984D : B5 22               	MOV	CH,'"'			; Terminating quote
    3768/    984F : 8A F5               	MOV	DH,CH			; Quote to D
    3769/    9851 :                     DTSTR:
    3770/    9851 : 53                  	PUSH	BX			; Save start
    3771/    9852 : B1 FF               	MOV	CL,-1			; Set counter to -1
    3772/    9854 :                     QTSTLP:
    3773/    9854 : 9F                  	LAHF
    3774/    9855 : 43                  	INC	BX			; Move on
    3775/    9856 : 9E                  	SAHF
    3776/    9857 : 8A 07               	MOV	AL,[BX]			; Get byte
    3777/    9859 : FE C1               	INC	CL			; Count bytes
    3778/    985B : 0A C0               	OR	AL,AL			; End of line?
    3779/    985D : 74 08               	JZ	CRTSTE			; Yes - Create string entry
    3780/    985F : 3A C6               	CMP	AL,DH			; Terminator D found?
    3781/    9861 : 74 04               	JZ	CRTSTE			; Yes - Create string entry
    3782/    9863 : 3A C5               	CMP	AL,CH			; Terminator B found?
    3783/    9865 : 75 ED               	JNZ	QTSTLP			; No - Keep looking
    3784/    9867 :                     CRTSTE:
    3785/    9867 : 3C 22               	CMP	AL,'"'			; End with '"'?
    3786/    9869 : 75 03               	JNZ	CRTSTE1
    3787/    986B : E8 6C F3            	CALL	GETCHR			; Yes - Get next charac
    3788/    986E :                     CRTSTE1:
    3789/    986E : 8B EC               	MOV	BP,SP
    3790/    9870 : 87 5E 00            	XCHG	[BP],BX			; Starting quote
    3791/    9873 : 9F                  	LAHF
    3792/    9874 : 43                  	INC	BX			; First byte of string
    3793/    9875 : 9E                  	SAHF
    3794/    9876 : 87 DA               	XCHG	BX,DX			; To DE
    3795/    9878 : 8A C1               	MOV	AL,CL			; Get length
    3796/    987A : E8 B8 FF            	CALL	CRTMST			; Create string entry
    3797/    987D :                     TSTOPL:
    3798/    987D : BA 09 09            	MOV	DX,TMPSTR		; Temporary string
    3799/    9880 : 8B 1E FB 08         	MOV	BX,[TMSTPT]		; Temporary string pool pointer
    3800/    9884 : 89 1E 2E 09         	MOV	[FPREG],BX		; Save address of string ptr
    3801/    9888 : B0 01               	MOV	AL,1
    3802/    988A : A2 F7 08            	MOV	[TYPE],AL		; Set type to string
    3803/    988D : E8 AF 07            	CALL	DETHL4			; Move string to pool
    3804/    9890 : E8 22 F1            	CALL	CPDEHL			; Out of string pool?
    3805/    9893 : 89 1E FB 08         	MOV	[TMSTPT],BX		; Save new pointer
    3806/    9897 : 5B                  	POP	BX			; Restore code string address
    3807/    9898 : 8A 07               	MOV	AL,[BX]			; Get next code byte
    3808/    989A : 74 01               	JZ	TSTOPL1
    3809/    989C : C3                  	RET				; Return if pool OK
    3810/    989D :                     TSTOPL1:
    3811/    989D : B2 1E               	MOV	DL,ST			; ?ST Error
    3812/    989F : E9 81 ED            	JMP	ERROR			; String pool overflow
    3813/    98A2 :                     ;
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 65 - 2023/09/19 18時02分31秒


    3814/    98A2 :                     PRNUMS:
    3815/    98A2 : 9F                  	LAHF
    3816/    98A3 : 43                  	INC	BX			; Skip leading space
    3817/    98A4 : 9E                  	SAHF
    3818/    98A5 :                     PRS:
    3819/    98A5 : E8 A2 FF            	CALL	CRTST			; Create string entry for it
    3820/    98A8 :                     PRS1:
    3821/    98A8 : E8 E1 01            	CALL	GSTRCU			; Current string to pool
    3822/    98AB : E8 7D 07            	CALL	LOADFP			; Move string block to BCDE
    3823/    98AE : FE C2               	INC	DL			; Length + 1
    3824/    98B0 :                     PRSLP:
    3825/    98B0 : FE CA               	DEC	DL			; Count characters
    3826/    98B2 : 75 01               	JNZ	PRSLP1
    3827/    98B4 : C3                  	RET				; End of string
    3828/    98B5 :                     PRSLP1:
    3829/    98B5 : 87 D9               	XCHG	BX,CX
    3830/    98B7 : 8A 07               	MOV	AL,[BX]			; Get byte to output
    3831/    98B9 : 87 D9               	XCHG	BX,CX
    3832/    98BB : E8 1C F1            	CALL	OUTC			; Output character in A
    3833/    98BE : 3C 0D               	CMP	AL,CR			; Return?
    3834/    98C0 : 75 03               	JNZ	PRSLP2
    3835/    98C2 : E8 A5 F6            	CALL	DONULL			; Yes - Do nulls
    3836/    98C5 :                     PRSLP2:
    3837/    98C5 : 9F                  	LAHF
    3838/    98C6 : 41                  	INC	CX			; Next byte in string
    3839/    98C7 : 9E                  	SAHF
    3840/    98C8 : EB E6               	JMP	PRSLP			; More characters to output
    3841/    98CA :                     ;
    3842/    98CA :                     TESTR:
    3843/    98CA : 0A C0               	OR	AL,AL			; Test if enough room
    3844/    98CC : EB 04               	JMP	GRBDON1			; No garbage collection done
    3845/    98CE :                     GRBDON:
    3846/    98CE : 58                  	POP	AX			; Garbage collection done
    3847/    98CF : 86 E0               	XCHG	AH,AL
    3848/    98D1 : 9E                  	SAHF
    3849/    98D2 :                     GRBDON1:
    3850/    98D2 : 9F                  	LAHF
    3851/    98D3 : 86 E0               	XCHG	AH,AL
    3852/    98D5 : 50                  	PUSH	AX			; Save status
    3853/    98D6 : 86 E0               	XCHG	AH,AL
    3854/    98D8 : 8B 1E A4 08         	MOV	BX,[STRSPC]		; Bottom of string space in use
    3855/    98DC : 87 DA               	XCHG	BX,DX			; To DE
    3856/    98DE : 8B 1E 0D 09         	MOV	BX,[STRBOT]		; Bottom of string area
    3857/    98E2 : F6 D0               	NOT	AL			; Negate length (Top down)
    3858/    98E4 : 8A C8               	MOV	CL,AL			; -Length to BC
    3859/    98E6 : B5 FF               	MOV	CH,-1			; BC = -ve length of string
    3860/    98E8 : 03 D9               	ADD	BX,CX			; Add to bottom of space in use
    3861/    98EA :                     ;	LAHF
    3862/    98EA : 43                  	INC	BX			; Plus one for 2's complement
    3863/    98EB :                     ;	SAHF
    3864/    98EB : E8 C7 F0            	CALL	CPDEHL			; Below string RAM area?
    3865/    98EE : 72 0E               	JC	TESTOS			; Tidy up if not done else err
    3866/    98F0 : 89 1E 0D 09         	MOV	[STRBOT],BX		; Save new bottom of area
    3867/    98F4 : 9F                  	LAHF
    3868/    98F5 : 43                  	INC	BX			; Point to first byte of string
    3869/    98F6 : 9E                  	SAHF
    3870/    98F7 : 87 DA               	XCHG	BX,DX			; Address to DE
    3871/    98F9 :                     POPAF:
    3872/    98F9 : 58                  	POP	AX			; Throw away status push
    3873/    98FA : 86 E0               	XCHG	AH,AL
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 66 - 2023/09/19 18時02分31秒


    3874/    98FC : 9E                  	SAHF
    3875/    98FD : C3                  	RET
    3876/    98FE :                     ;
    3877/    98FE :                     TESTOS:
    3878/    98FE : 58                  	POP	AX			; Garbage collect been done?
    3879/    98FF : 86 E0               	XCHG	AH,AL
    3880/    9901 : 9E                  	SAHF
    3881/    9902 : B2 1A               	MOV	DL,OS			; ?OS Error
    3882/    9904 : 75 03               	JNZ	TESTOS1
    3883/    9906 : E9 1A ED            	JMP	ERROR			; Yes - Not enough strig space
    3884/    9909 :                     TESTOS1:
    3885/    9909 : 3A C0               	CMP	AL,AL			; Flag garbage collect done
    3886/    990B : 9F                  	LAHF
    3887/    990C : 86 E0               	XCHG	AH,AL
    3888/    990E : 50                  	PUSH	AX			; Save status
    3889/    990F : 86 E0               	XCHG	AH,AL
    3890/    9911 : B9 CE 98            	MOV	CX,GRBDON		; Garbage collection done
    3891/    9914 : 51                  	PUSH	CX			; Save for RETurn
    3892/    9915 :                     GARBGE:
    3893/    9915 : 8B 1E F9 08         	MOV	BX,[LSTRAM]		; Get end of RAM pointer
    3894/    9919 :                     GARBLP:
    3895/    9919 : 89 1E 0D 09         	MOV	[STRBOT],BX		; Reset string pointer
    3896/    991D : BB 00 00            	MOV	BX,0
    3897/    9920 : 53                  	PUSH	BX			; Flag no string found
    3898/    9921 : 8B 1E A4 08         	MOV	BX,[STRSPC]		; Get bottom of string space
    3899/    9925 : 53                  	PUSH	BX			; Save bottom of string space
    3900/    9926 : BB FD 08            	MOV	BX,TMSTPL		; Temporary string pool
    3901/    9929 :                     GRBLP:
    3902/    9929 : 87 DA               	XCHG	BX,DX
    3903/    992B : 8B 1E FB 08         	MOV	BX,[TMSTPT]		; Temporary string pool pointer
    3904/    992F : 87 DA               	XCHG	BX,DX
    3905/    9931 : E8 81 F0            	CALL	CPDEHL			; Temporary string pool done?
    3906/    9934 : B9 29 99            	MOV	CX,GRBLP		; Loop until string pool done
    3907/    9937 : 75 56               	JNZ	STPOOL			; No - See if in string area
    3908/    9939 : 8B 1E 20 09         	MOV	BX,[PROGND]		; Start of simple variables
    3909/    993D :                     SMPVAR:
    3910/    993D : 87 DA               	XCHG	BX,DX
    3911/    993F : 8B 1E 22 09         	MOV	BX,[VAREND]		; End of simple variables
    3912/    9943 : 87 DA               	XCHG	BX,DX
    3913/    9945 : E8 6D F0            	CALL	CPDEHL			; All simple strings done?
    3914/    9948 : 74 0C               	JZ	ARRLP			; Yes - Do string arrays
    3915/    994A : 8A 07               	MOV	AL,[BX]			; Get type of variable
    3916/    994C :                     ;	LAHF
    3917/    994C : 43                  	INC	BX
    3918/    994D :                     ;	SAHF
    3919/    994D :                     ;	LAHF
    3920/    994D : 43                  	INC	BX
    3921/    994E :                     ;	SAHF
    3922/    994E : 0A C0               	OR	AL,AL			; "S" flag set if strings done?
    3923/    9950 : E8 3F 00            	CALL	STRADD			; See if string in strig area
    3924/    9953 : EB E8               	JMP	SMPVAR			; Loop until simple ones done
    3925/    9955 :                     ;
    3926/    9955 :                     GNXARY:
    3927/    9955 : 59                  	POP	CX			; Scrap address of this array
    3928/    9956 :                     ARRLP:
    3929/    9956 : 87 DA               	XCHG	BX,DX
    3930/    9958 : 8B 1E 24 09         	MOV	BX,[ARREND]		; End of string arrays
    3931/    995C : 87 DA               	XCHG	BX,DX
    3932/    995E : E8 54 F0            	CALL	CPDEHL			; All string arrays done?
    3933/    9961 : 74 6F               	JZ	SCNEND			; Yes - Move string if found
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 67 - 2023/09/19 18時02分31秒


    3934/    9963 : E8 C5 06            	CALL	LOADFP			; Get array name to BCDE
    3935/    9966 : 8A C2               	MOV	AL,DL			; Get type of array
    3936/    9968 : 53                  	PUSH	BX			; Save address of num of dimensions
    3937/    9969 : 03 D9               	ADD	BX,CX			; Start of next array
    3938/    996B : 0A C0               	OR	AL,AL			; Test type of array
    3939/    996D : 79 E6               	JNS	GNXARY			; Numeric array - Ignore it
    3940/    996F : 89 1E 0F 09         	MOV	[CUROPR],BX		; Save address of next array
    3941/    9973 : 5B                  	POP	BX			; Get address of num of dimensions
    3942/    9974 : 8A 0F               	MOV	CL,[BX]			; BC = Number of dimensions
    3943/    9976 : B5 00               	MOV	CH,0
    3944/    9978 : 03 D9               	ADD	BX,CX			; Two bytes per dimension size
    3945/    997A : 03 D9               	ADD	BX,CX
    3946/    997C : 9F                  	LAHF
    3947/    997D : 43                  	INC	BX			; Plus one for number of dimensions
    3948/    997E : 9E                  	SAHF
    3949/    997F :                     GRBARY:
    3950/    997F : 87 DA               	XCHG	BX,DX
    3951/    9981 : 8B 1E 0F 09         	MOV	BX,[CUROPR]		; Get address of next array
    3952/    9985 : 87 DA               	XCHG	BX,DX
    3953/    9987 : E8 2B F0            	CALL	CPDEHL			; Is this array finished?
    3954/    998A : 74 CA               	JZ	ARRLP			; Yes - Get next one
    3955/    998C : B9 7F 99            	MOV	CX,GRBARY		; Loop until array all done
    3956/    998F :                     STPOOL:
    3957/    998F : 51                  	PUSH	CX			; Save return address
    3958/    9990 : 0C 80               	OR	AL,80H			; Flag string type
    3959/    9992 :                     STRADD:
    3960/    9992 : 8A 07               	MOV	AL,[BX]			; Get string length
    3961/    9994 : 9F                  	LAHF
    3962/    9995 : 43                  	INC	BX
    3963/    9996 :                     ;	SAHF
    3964/    9996 :                     ;	LAHF
    3965/    9996 : 43                  	INC	BX
    3966/    9997 :                     ;	SAHF
    3967/    9997 : 8A 17               	MOV	DL,[BX]			; Get LSB of string address
    3968/    9999 :                     ;	LAHF
    3969/    9999 : 43                  	INC	BX
    3970/    999A :                     ;	SAHF
    3971/    999A : 8A 37               	MOV	DH,[BX]			; Get MSB of string address
    3972/    999C :                     ;	LAHF
    3973/    999C : 43                  	INC	BX
    3974/    999D : 9E                  	SAHF
    3975/    999E : 78 01               	JS	STRADD1
    3976/    99A0 : C3                  	RET				; Not a string - Return
    3977/    99A1 :                     STRADD1:
    3978/    99A1 : 0A C0               	OR	AL,AL			; Set flags on string length
    3979/    99A3 : 75 01               	JNZ	STRADD2
    3980/    99A5 : C3                  	RET				; Null string - Return
    3981/    99A6 :                     STRADD2:
    3982/    99A6 : 8B CB               	MOV	CX,BX			; Save variable pointer
    3983/    99A8 : 8B 1E 0D 09         	MOV	BX,[STRBOT]		; Bottom of new area
    3984/    99AC : E8 06 F0            	CALL	CPDEHL			; String been done?
    3985/    99AF : 8B D9               	MOV	BX,CX			; Restore variable pointer
    3986/    99B1 : 73 01               	JNC	STRADD3
    3987/    99B3 : C3                  	RET				; String done - Ignore
    3988/    99B4 :                     STRADD3:
    3989/    99B4 : 5B                  	POP	BX			; Return address
    3990/    99B5 : 8B EC               	MOV	BP,SP
    3991/    99B7 : 87 5E 00            	XCHG	[BP],BX			; Lowest available string area
    3992/    99BA : E8 F8 EF            	CALL	CPDEHL			; String within string area?
    3993/    99BD : 8B EC               	MOV	BP,SP
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 68 - 2023/09/19 18時02分31秒


    3994/    99BF : 87 5E 00            	XCHG	[BP],BX			; Lowest available string area
    3995/    99C2 : 53                  	PUSH	BX			; Re-save return address
    3996/    99C3 : 8B D9               	MOV	BX,CX			; Restore variable pointer
    3997/    99C5 : 72 01               	JC	STRADD4
    3998/    99C7 : C3                  	RET				; Outside string area - Ignore
    3999/    99C8 :                     STRADD4:
    4000/    99C8 : 59                  	POP	CX			; Get return , Throw 2 away
    4001/    99C9 : 58                  	POP	AX
    4002/    99CA :                     ;	XCHG	AH,AL
    4003/    99CA :                     ;	SAHF
    4004/    99CA : 58                  	POP	AX
    4005/    99CB : 86 E0               	XCHG	AH,AL
    4006/    99CD : 9E                  	SAHF
    4007/    99CE : 53                  	PUSH	BX			; Save variable pointer
    4008/    99CF : 52                  	PUSH	DX			; Save address of current
    4009/    99D0 : 51                  	PUSH	CX			; Put back return address
    4010/    99D1 : C3                  	RET				; Go to it
    4011/    99D2 :                     ;
    4012/    99D2 :                     SCNEND:
    4013/    99D2 : 5A                  	POP	DX			; Addresses of strings
    4014/    99D3 : 5B                  	POP	BX			;
    4015/    99D4 : 8A C3               	MOV	AL,BL			; HL = 0 if no more to do
    4016/    99D6 : 0A C7               	OR	AL,BH
    4017/    99D8 : 75 01               	JNZ	SCNEND1
    4018/    99DA : C3                  	RET				; No more to do - Return
    4019/    99DB :                     SCNEND1:
    4020/    99DB : 9F                  	LAHF
    4021/    99DC : 4B                  	DEC	BX
    4022/    99DD : 9E                  	SAHF
    4023/    99DE : 8A 2F               	MOV	CH,[BX]			; MSB of address of string
    4024/    99E0 : 9F                  	LAHF
    4025/    99E1 : 4B                  	DEC	BX
    4026/    99E2 : 9E                  	SAHF
    4027/    99E3 : 8A 0F               	MOV	CL,[BX]			; LSB of address of string
    4028/    99E5 : 53                  	PUSH	BX			; Save variable address
    4029/    99E6 : 9F                  	LAHF
    4030/    99E7 : 4B                  	DEC	BX
    4031/    99E8 : 9E                  	SAHF
    4032/    99E9 : 9F                  	LAHF
    4033/    99EA : 4B                  	DEC	BX
    4034/    99EB : 9E                  	SAHF
    4035/    99EC : 8A 1F               	MOV	BL,[BX]			; HL = Length of string
    4036/    99EE : B7 00               	MOV	BH,0
    4037/    99F0 : 03 D9               	ADD	BX,CX			; Address of end of string
    4038/    99F2 : 8A F5               	MOV	DH,CH			; String address to DE
    4039/    99F4 : 8A D1               	MOV	DL,CL
    4040/    99F6 : 9F                  	LAHF
    4041/    99F7 : 4B                  	DEC	BX			; Last byte in string
    4042/    99F8 : 9E                  	SAHF
    4043/    99F9 : 8B CB               	MOV	CX,BX			; Address to BC
    4044/    99FB : 8B 1E 0D 09         	MOV	BX,[STRBOT]		; Current bottom of string area
    4045/    99FF : E8 C2 EB            	CALL	MOVSTR			; Move string to new address
    4046/    9A02 : 5B                  	POP	BX			; Restore variable address
    4047/    9A03 : 88 0F               	MOV	[BX],CL			; Save new LSB of address
    4048/    9A05 : 9F                  	LAHF
    4049/    9A06 : 43                  	INC	BX
    4050/    9A07 : 9E                  	SAHF
    4051/    9A08 : 88 2F               	MOV	[BX],CH			; Save new MSB of address
    4052/    9A0A : 8B D9               	MOV	BX,CX			; Next string area+1 to HL
    4053/    9A0C : 9F                  	LAHF
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 69 - 2023/09/19 18時02分31秒


    4054/    9A0D : 4B                  	DEC	BX
    4055/    9A0E : 9E                  	SAHF				; Next string area address
    4056/    9A0F : E9 07 FF            	JMP	GARBLP			; Look for more strings
    4057/    9A12 :                     ;
    4058/    9A12 :                     CONCAT:
    4059/    9A12 : 51                  	PUSH	CX			; Save prec' opr & code string
    4060/    9A13 : 53                  	PUSH	BX			;
    4061/    9A14 : 8B 1E 2E 09         	MOV	BX,[FPREG]		; Get first string
    4062/    9A18 : 8B EC               	MOV	BP,SP
    4063/    9A1A : 87 5E 00            	XCHG	[BP],BX			; Save first string
    4064/    9A1D : E8 4C F8            	CALL	OPRND			; Get second string
    4065/    9A20 : 8B EC               	MOV	BP,SP
    4066/    9A22 : 87 5E 00            	XCHG	[BP],BX			; Restore first string
    4067/    9A25 : E8 89 F7            	CALL	TSTSTR			; Make sure it's a string
    4068/    9A28 : 8A 07               	MOV	AL,[BX]			; Get length of second string
    4069/    9A2A : 53                  	PUSH	BX			; Save first string
    4070/    9A2B : 8B 1E 2E 09         	MOV	BX,[FPREG]		; Get second string
    4071/    9A2F : 53                  	PUSH	BX			; Save second string
    4072/    9A30 : 02 07               	ADD	AL,[BX]			; Add length of second string
    4073/    9A32 : B2 1C               	MOV	DL,LS			; ?LS Error
    4074/    9A34 : 73 03               	JNC	CONCAT1			; String too long - Error
    4075/    9A36 : E9 EA EB            	JMP	ERROR
    4076/    9A39 :                     CONCAT1:
    4077/    9A39 : E8 F6 FD            	CALL	MKTMST			; Make temporary string
    4078/    9A3C : 5A                  	POP	DX			; Get second string to DE
    4079/    9A3D : E8 52 00            	CALL	GSTRDE			; Move to string pool if needed
    4080/    9A40 : 8B EC               	MOV	BP,SP
    4081/    9A42 : 87 5E 00            	XCHG	[BP],BX			; Get first string
    4082/    9A45 : E8 48 00            	CALL	GSTRHL			; Move to string pool if needed
    4083/    9A48 : 53                  	PUSH	BX			; Save first string
    4084/    9A49 : 8B 1E 0B 09         	MOV	BX,[TMPSTR+2]		; Temporary string address
    4085/    9A4D : 87 DA               	XCHG	BX,DX			; To DE
    4086/    9A4F : E8 0F 00            	CALL	SSTSA			; First string to string area
    4087/    9A52 : E8 0C 00            	CALL	SSTSA			; Second string to strig area
    4088/    9A55 : BB D1 91            	MOV	BX,EVAL2		; Return to evaluation loop
    4089/    9A58 : 8B EC               	MOV	BP,SP
    4090/    9A5A : 87 5E 00            	XCHG	[BP],BX			; Save return,get code string
    4091/    9A5D : 53                  	PUSH	BX			; Save code string address
    4092/    9A5E : E9 1C FE            	JMP	TSTOPL			; To temporary string to pool
    4093/    9A61 :                     ;
    4094/    9A61 :                     SSTSA:
    4095/    9A61 : 5B                  	POP	BX			; Return address
    4096/    9A62 : 8B EC               	MOV	BP,SP
    4097/    9A64 : 87 5E 00            	XCHG	[BP],BX			; Get string block,save return
    4098/    9A67 : 8A 07               	MOV	AL,[BX]			; Get length of string
    4099/    9A69 :                     ;	LAHF
    4100/    9A69 : 43                  	INC	BX
    4101/    9A6A :                     ;	SAHF
    4102/    9A6A :                     ;	LAHF
    4103/    9A6A : 43                  	INC	BX
    4104/    9A6B :                     ;	SAHF
    4105/    9A6B : 8A 0F               	MOV	CL,[BX]			; Get LSB of string address
    4106/    9A6D :                     ;	LAHF
    4107/    9A6D : 43                  	INC	BX
    4108/    9A6E :                     ;	SAHF
    4109/    9A6E : 8A 2F               	MOV	CH,[BX]			; Get MSB of string address
    4110/    9A70 : 8A D8               	MOV	BL,AL			; Length to L
    4111/    9A72 :                     TOSTRA:
    4112/    9A72 : FE C3               	INC	BL			; INC - DECed after
    4113/    9A74 :                     TSALP:
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 70 - 2023/09/19 18時02分31秒


    4114/    9A74 : FE CB               	DEC	BL			; Count bytes moved
    4115/    9A76 : 75 01               	JNZ	TSALP1
    4116/    9A78 : C3                  	RET				; End of string - Return
    4117/    9A79 :                     TSALP1:
    4118/    9A79 : 87 D9               	XCHG	BX,CX
    4119/    9A7B : 8A 07               	MOV	AL,[BX]
    4120/    9A7D : 87 D9               	XCHG	BX,CX			; Get source
    4121/    9A7F : 87 DA               	XCHG	BX,DX
    4122/    9A81 : 88 07               	MOV	[BX],AL
    4123/    9A83 : 87 DA               	XCHG	BX,DX			; Save destination
    4124/    9A85 :                     ;	LAHF
    4125/    9A85 : 41                  	INC	CX			; Next source
    4126/    9A86 :                     ;	SAHF
    4127/    9A86 :                     ;	LAHF
    4128/    9A86 : 42                  	INC	DX			; Next destination
    4129/    9A87 :                     ;	SAHF
    4130/    9A87 : EB EB               	JMP	TSALP			; Loop until string moved
    4131/    9A89 :                     ;
    4132/    9A89 :                     GETSTR:
    4133/    9A89 : E8 25 F7            	CALL	TSTSTR			; Make sure it's a strig
    4134/    9A8C :                     GSTRCU:
    4135/    9A8C : 8B 1E 2E 09         	MOV	BX,[FPREG]		; Get current string
    4136/    9A90 :                     GSTRHL:
    4137/    9A90 : 87 DA               	XCHG	BX,DX			; Save DE
    4138/    9A92 :                     GSTRDE:
    4139/    9A92 : E8 20 00            	CALL	BAKTMP			; Was it last tmp-str?
    4140/    9A95 : 87 DA               	XCHG	BX,DX			; Restore DE
    4141/    9A97 : 74 01               	JZ	GSTRDE1
    4142/    9A99 : C3                  	RET				; No - Return
    4143/    9A9A :                     GSTRDE1:
    4144/    9A9A : 52                  	PUSH	DX			; Save string
    4145/    9A9B : 8A F5               	MOV	DH,CH			; String block address to DE
    4146/    9A9D : 8A D1               	MOV	DL,CL
    4147/    9A9F :                     ;	LAHF
    4148/    9A9F : 4A                  	DEC	DX			; Point to length
    4149/    9AA0 :                     ;	SAHF
    4150/    9AA0 : 8A 0F               	MOV	CL,[BX]			; Get string length
    4151/    9AA2 : 8B 1E 0D 09         	MOV	BX,[STRBOT]		; Current bottom of string area
    4152/    9AA6 : E8 0C EF            	CALL	CPDEHL			; Last one in string area?
    4153/    9AA9 : 75 08               	JNZ	POPHL			; No - Return
    4154/    9AAB : 8A E8               	MOV	CH,AL			; Clear B (A=0)
    4155/    9AAD : 03 D9               	ADD	BX,CX			; Remove string from string area
    4156/    9AAF : 89 1E 0D 09         	MOV	[STRBOT],BX		; Save new bottom of string area
    4157/    9AB3 :                     POPHL:
    4158/    9AB3 : 5B                  	POP	BX			; Restore string
    4159/    9AB4 : C3                  	RET
    4160/    9AB5 :                     ;
    4161/    9AB5 :                     BAKTMP:
    4162/    9AB5 : 8B 1E FB 08         	MOV	BX,[TMSTPT]		; Get temporary string pool top
    4163/    9AB9 :                     ;	LAHF
    4164/    9AB9 : 4B                  	DEC	BX			; Back
    4165/    9ABA :                     ;	SAHF
    4166/    9ABA : 8A 2F               	MOV	CH,[BX]			; Get MSB of address
    4167/    9ABC :                     ;	LAHF
    4168/    9ABC : 4B                  	DEC	BX			; Back
    4169/    9ABD :                     ;	SAHF
    4170/    9ABD : 8A 0F               	MOV	CL,[BX]			; Get LSB of address
    4171/    9ABF :                     ;	LAHF
    4172/    9ABF : 4B                  	DEC	BX			; Back
    4173/    9AC0 :                     ;	SAHF
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 71 - 2023/09/19 18時02分31秒


    4174/    9AC0 :                     ;	LAHF
    4175/    9AC0 : 4B                  	DEC	BX			; Back
    4176/    9AC1 :                     ;	SAHF
    4177/    9AC1 : E8 F1 EE            	CALL	CPDEHL			; String last in string pool?
    4178/    9AC4 : 74 01               	JZ	BAKTMP1
    4179/    9AC6 : C3                  	RET				; Yes - Leave it
    4180/    9AC7 :                     BAKTMP1:
    4181/    9AC7 : 89 1E FB 08         	MOV	[TMSTPT],BX		; Save new string pool top
    4182/    9ACB : C3                  	RET
    4183/    9ACC :                     ;
    4184/    9ACC :                     LEN:
    4185/    9ACC : B9 31 97            	MOV	CX,PASSA		; To return integer A
    4186/    9ACF : 51                  	PUSH	CX			; Save address
    4187/    9AD0 :                     GETLEN:
    4188/    9AD0 : E8 B6 FF            	CALL	GETSTR			; Get string and its length
    4189/    9AD3 : 32 C0               	XOR	AL,AL
    4190/    9AD5 : 8A F0               	MOV	DH,AL			; Clear D
    4191/    9AD7 : A2 F7 08            	MOV	[TYPE],AL		; Set type to numeric
    4192/    9ADA : 8A 07               	MOV	AL,[BX]			; Get length of string
    4193/    9ADC : 0A C0               	OR	AL,AL			; Set status flags
    4194/    9ADE : C3                  	RET
    4195/    9ADF :                     ;
    4196/    9ADF :                     ASC:
    4197/    9ADF : B9 31 97            	MOV	CX,PASSA		; To return integer A
    4198/    9AE2 : 51                  	PUSH	CX			; Save address
    4199/    9AE3 :                     GTFLNM:
    4200/    9AE3 : E8 EA FF            	CALL	GETLEN			; Get length of string
    4201/    9AE6 : 75 03               	JNZ	GTFLNM1			; Null string - Error
    4202/    9AE8 : E9 FE F1            	JMP	FCERR
    4203/    9AEB :                     GTFLNM1:
    4204/    9AEB :                     ;	LAHF
    4205/    9AEB : 43                  	INC	BX
    4206/    9AEC :                     ;	SAHF
    4207/    9AEC :                     ;	LAHF
    4208/    9AEC : 43                  	INC	BX
    4209/    9AED :                     ;	SAHF
    4210/    9AED : 8A 17               	MOV	DL,[BX]			; Get LSB of address
    4211/    9AEF :                     ;	LAHF
    4212/    9AEF : 43                  	INC	BX
    4213/    9AF0 :                     ;	SAHF
    4214/    9AF0 : 8A 37               	MOV	DH,[BX]			; Get MSB of address
    4215/    9AF2 : 87 DA               	XCHG	BX,DX
    4216/    9AF4 : 8A 07               	MOV	AL,[BX]
    4217/    9AF6 : 87 DA               	XCHG	BX,DX			; Get first byte of string
    4218/    9AF8 : C3                  	RET
    4219/    9AF9 :                     ;
    4220/    9AF9 :                     CHR:
    4221/    9AF9 : B0 01               	MOV	AL,1			; One character string
    4222/    9AFB : E8 34 FD            	CALL	MKTMST			; Make a temporary string
    4223/    9AFE : E8 30 01            	CALL	MAKINT			; Make it integer A
    4224/    9B01 : 8B 1E 0B 09         	MOV	BX,[TMPSTR+2]		; Get address of string
    4225/    9B05 : 88 17               	MOV	[BX],DL			; Save character
    4226/    9B07 :                     TOPOOL:
    4227/    9B07 : 59                  	POP	CX			; Clean up stack
    4228/    9B08 : E9 72 FD            	JMP	TSTOPL			; Temporary string to pool
    4229/    9B0B :                     ;
    4230/    9B0B :                     LEFT:
    4231/    9B0B : E8 CD 00            	CALL	LFRGNM			; Get number and ending ")"
    4232/    9B0E : 32 C0               	XOR	AL,AL			; Start at first byte in string
    4233/    9B10 :                     RIGHT1:
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 72 - 2023/09/19 18時02分31秒


    4234/    9B10 : 8B EC               	MOV	BP,SP
    4235/    9B12 : 87 5E 00            	XCHG	[BP],BX			; Save code string,Get string
    4236/    9B15 : 8A C8               	MOV	CL,AL			; Starting position in string
    4237/    9B17 :                     MID1:
    4238/    9B17 : 53                  	PUSH	BX			; Save string block address
    4239/    9B18 : 8A 07               	MOV	AL,[BX]			; Get length of string
    4240/    9B1A : 3A C5               	CMP	AL,CH			; Compare with number given
    4241/    9B1C : 72 04               	JC	ALLFOL			; All following bytes required
    4242/    9B1E : 8A C5               	MOV	AL,CH			; Get new length
    4243/    9B20 : EB 02               	JMP	ALLFOL1			; Skip "LD C,0"
    4244/    9B22 :                     ALLFOL:
    4245/    9B22 : B1 00               	MOV	CL,0			; First byte of string
    4246/    9B24 :                     ALLFOL1:
    4247/    9B24 : 51                  	PUSH	CX			; Save position in string
    4248/    9B25 : E8 A2 FD            	CALL	TESTR			; See if enough string space
    4249/    9B28 : 59                  	POP	CX			; Get position in string
    4250/    9B29 : 5B                  	POP	BX			; Restore string block address
    4251/    9B2A : 53                  	PUSH	BX			; And re-save it
    4252/    9B2B :                     ;	LAHF
    4253/    9B2B : 43                  	INC	BX
    4254/    9B2C :                     ;	SAHF
    4255/    9B2C :                     ;	LAHF
    4256/    9B2C : 43                  	INC	BX
    4257/    9B2D :                     ;	SAHF
    4258/    9B2D : 8A 2F               	MOV	CH,[BX]			; Get LSB of address
    4259/    9B2F :                     ;	LAHF
    4260/    9B2F : 43                  	INC	BX
    4261/    9B30 :                     ;	SAHF
    4262/    9B30 : 8A 3F               	MOV	BH,[BX]			; Get MSB of address
    4263/    9B32 : 8A DD               	MOV	BL,CH			; HL = address of string
    4264/    9B34 : B5 00               	MOV	CH,0			; BC = starting address
    4265/    9B36 : 03 D9               	ADD	BX,CX			; Point to that byte
    4266/    9B38 : 8B CB               	MOV	CX,BX			; BC = source string
    4267/    9B3A : E8 F8 FC            	CALL	CRTMST			; Create a string entry
    4268/    9B3D : 8A D8               	MOV	BL,AL			; Length of new string
    4269/    9B3F : E8 30 FF            	CALL	TOSTRA			; Move string to string
    4270/    9B42 : 5A                  	POP	DX			; Clear stack
    4271/    9B43 : E8 4C FF            	CALL	GSTRDE			; Move to string pool if needed
    4272/    9B46 : E9 34 FD            	JMP	TSTOPL			; Temporary string to pool
    4273/    9B49 :                     ;
    4274/    9B49 :                     RIGHT:
    4275/    9B49 : E8 8F 00            	CALL	LFRGNM			; Get number and ending ")"
    4276/    9B4C : 5A                  	POP	DX			; Get string length
    4277/    9B4D : 52                  	PUSH	DX			; And re-save
    4278/    9B4E : 87 DA               	XCHG	BX,DX
    4279/    9B50 : 8A 07               	MOV	AL,[BX]
    4280/    9B52 : 87 DA               	XCHG	BX,DX			; Get length
    4281/    9B54 : 2A C5               	SUB	AL,CH			; Move back N bytes
    4282/    9B56 : EB B8               	JMP	RIGHT1			; Go and get sub-string
    4283/    9B58 :                     ;
    4284/    9B58 :                     MID:
    4285/    9B58 : 87 DA               	XCHG	BX,DX			; Get code string addre
    4286/    9B5A : 8A 07               	MOV	AL,[BX]			; Get next byte ',' or ")"
    4287/    9B5C : E8 82 00            	CALL	MIDNUM			; Get number supplied
    4288/    9B5F : FE C5               	INC	CH			; Is it character zero?
    4289/    9B61 : FE CD               	DEC	CH
    4290/    9B63 : 75 03               	JNZ	MID2			; Yes - Error
    4291/    9B65 : E9 81 F1            	JMP	FCERR
    4292/    9B68 :                     MID2:
    4293/    9B68 : 51                  	PUSH	CX			; Save starting position
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 73 - 2023/09/19 18時02分31秒


    4294/    9B69 : B2 FF               	MOV	DL,255				; All of string
    4295/    9B6B : 3C 29               	CMP	AL,')'			; Any length given?
    4296/    9B6D : 74 07               	JZ	RSTSTR			; No - Rest of string
    4297/    9B6F : E8 4F EE            	CALL	CHKSYN			; Make sure ',' follows
    4298/    9B72 : 2C                  	DB	','
    4299/    9B73 : E8 B8 00            	CALL	GETINT			; Get integer 0-255
    4300/    9B76 :                     RSTSTR:
    4301/    9B76 : E8 48 EE            	CALL	CHKSYN			; Make sure ")" follows
    4302/    9B79 : 29                  	DB	")"
    4303/    9B7A : 58                  	POP	AX			; Restore starting posion
    4304/    9B7B : 86 E0               	XCHG	AH,AL
    4305/    9B7D :                     ;	SAHF
    4306/    9B7D : 8B EC               	MOV	BP,SP
    4307/    9B7F : 87 5E 00            	XCHG	[BP],BX			; Get string,8ave code string
    4308/    9B82 : B9 17 9B            	MOV	CX,MID1			; Continuation of MID$ routine
    4309/    9B85 : 51                  	PUSH	CX			; Save for return
    4310/    9B86 : FE C8               	DEC	AL			; Starting position-1
    4311/    9B88 : 3A 07               	CMP	AL,[BX]			; Compare with length
    4312/    9B8A : B5 00               	MOV	CH,0			; Zero bytes length
    4313/    9B8C : 72 01               	JC	RSTSTR1
    4314/    9B8E : C3                  	RET				; Null string if start past end
    4315/    9B8F :                     RSTSTR1:
    4316/    9B8F : 8A C8               	MOV	CL,AL			; Save starting position -1
    4317/    9B91 : 8A 07               	MOV	AL,[BX]			; Get length of string
    4318/    9B93 : 2A C1               	SUB	AL,CL			; Subtract start
    4319/    9B95 : 3A C2               	CMP	AL,DL			; Enough string for it?
    4320/    9B97 : 8A E8               	MOV	CH,AL			; Save maximum length available
    4321/    9B99 : 73 01               	JNC	RSTSTR2
    4322/    9B9B : C3                  	RET				; Truncate string if needed
    4323/    9B9C :                     RSTSTR2:
    4324/    9B9C : 8A EA               	MOV	CH,DL			; Set specified length
    4325/    9B9E : C3                  	RET				; Go and create string
    4326/    9B9F :                     ;
    4327/    9B9F :                     VAL:
    4328/    9B9F : E8 2E FF            	CALL	GETLEN			; Get length of string
    4329/    9BA2 : 75 03               	JNZ	VAL0
    4330/    9BA4 : E9 6E 01            	JMP	RESZER			; Result zero
    4331/    9BA7 :                     VAL0:
    4332/    9BA7 : 8A D0               	MOV	DL,AL			; Save length
    4333/    9BA9 :                     ;	LAHF
    4334/    9BA9 : 43                  	INC	BX
    4335/    9BAA :                     ;	SAHF
    4336/    9BAA :                     ;	LAHF
    4337/    9BAA : 43                  	INC	BX
    4338/    9BAB :                     ;	SAHF
    4339/    9BAB : 8A 07               	MOV	AL,[BX]			; Get LSB of address
    4340/    9BAD :                     ;	LAHF
    4341/    9BAD : 43                  	INC	BX
    4342/    9BAE :                     ;	SAHF
    4343/    9BAE : 8A 3F               	MOV	BH,[BX]			; Get MSB of address
    4344/    9BB0 : 8A D8               	MOV	BL,AL			; HL = String address
    4345/    9BB2 : 53                  	PUSH	BX			; Save string address
    4346/    9BB3 : 03 DA               	ADD	BX,DX
    4347/    9BB5 : 8A 2F               	MOV	CH,[BX]			; Get end of string+1 byte
    4348/    9BB7 : 88 37               	MOV	[BX],DH			; Zero it to terminate
    4349/    9BB9 : 8B EC               	MOV	BP,SP
    4350/    9BBB : 87 5E 00            	XCHG	[BP],BX			; Save string end,get start
    4351/    9BBE : 51                  	PUSH	CX			; Save end+1 byte
    4352/    9BBF : 8A 07               	MOV	AL,[BX]			; Get starting byte
    4353/    9BC1 : 3C 24               	CMP	AL,'$'			; Hex number indicated?
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 74 - 2023/09/19 18時02分31秒


    4354/    9BC3 : 75 05               	JNZ	VAL1
    4355/    9BC5 : E8 E7 0A            	CALL	HEXTFP			; Convert Hex to FPREG
    4356/    9BC8 : EB 0C               	JMP	VAL3
    4357/    9BCA :                     VAL1:
    4358/    9BCA : 3C 25               	CMP	AL,'%'			; Binary number indicated?
    4359/    9BCC : 75 05               	JNZ	VAL2
    4360/    9BCE : E8 62 0B            	CALL	BINTFP			; Convert Bin to FPREG
    4361/    9BD1 : EB 03               	JMP	VAL3
    4362/    9BD3 :                     VAL2:
    4363/    9BD3 : E8 83 05            	CALL	ASCTFP			; Convert ASCII string to FP
    4364/    9BD6 :                     VAL3:
    4365/    9BD6 : 59                  	POP	CX			; Restore end+1 byte
    4366/    9BD7 : 5B                  	POP	BX			; Restore end+1 address
    4367/    9BD8 : 88 2F               	MOV	[BX],CH			; Put back original byte
    4368/    9BDA : C3                  	RET
    4369/    9BDB :                     ;
    4370/    9BDB :                     LFRGNM:
    4371/    9BDB : 87 DA               	XCHG	BX,DX			; Code string address to HL
    4372/    9BDD : E8 E1 ED            	CALL	CHKSYN			; Make sure ")" follows
    4373/    9BE0 : 29                  	DB	")"
    4374/    9BE1 :                     MIDNUM:
    4375/    9BE1 : 59                  	POP	CX			; Get return address
    4376/    9BE2 : 5A                  	POP	DX			; Get number supplied
    4377/    9BE3 : 51                  	PUSH	CX			; Re-save return address
    4378/    9BE4 : 8A EA               	MOV	CH,DL			; Number to B
    4379/    9BE6 : C3                  	RET
    4380/    9BE7 :                     ;
    4381/    9BE7 :                     INP:
    4382/    9BE7 : E8 47 00            	CALL	MAKINT			; Make it integer A
    4383/    9BEA : A2 89 08            	MOV	[INPORT],AL		; Set input port
    4384/    9BED : E8 98 6C            	CALL	INPSUB			; Get input from port
    4385/    9BF0 : E9 3E FB            	JMP	PASSA			; Return integer A
    4386/    9BF3 :                     ;
    4387/    9BF3 :                     POUT:
    4388/    9BF3 : E8 26 00            	CALL	SETIO			; Set up port number
    4389/    9BF6 : E9 52 6C            	JMP	OUTSUB			; Output data and return
    4390/    9BF9 :                     ;
    4391/    9BF9 :                     WAIT:
    4392/    9BF9 : E8 20 00            	CALL	SETIO			; Set up port number
    4393/    9BFC : 9F                  	LAHF
    4394/    9BFD : 86 E0               	XCHG	AH,AL
    4395/    9BFF : 50                  	PUSH	AX			; Save AND mask
    4396/    9C00 : 86 E0               	XCHG	AH,AL
    4397/    9C02 : B2 00               	MOV	DL,0			; Assume zero if none given
    4398/    9C04 :                     ;	LAHF
    4399/    9C04 : 4B                  	DEC	BX			; DEC 'cos GETCHR INCs
    4400/    9C05 :                     ;	SAHF
    4401/    9C05 : E8 D2 EF            	CALL	GETCHR			; Get next character
    4402/    9C08 : 74 07               	JZ	NOXOR			; No XOR byte given
    4403/    9C0A : E8 B4 ED            	CALL	CHKSYN			; Make sure ',' follows
    4404/    9C0D : 2C                  	DB	','
    4405/    9C0E : E8 1D 00            	CALL	GETINT			; Get integer 0-255 to XOR with
    4406/    9C11 :                     NOXOR:
    4407/    9C11 : 59                  	POP	CX			; Restore AND mask
    4408/    9C12 :                     WAITLP:
    4409/    9C12 : E8 73 6C            	CALL	INPSUB			; Get input
    4410/    9C15 : 32 C2               	XOR	AL,DL			; Flip selected bits
    4411/    9C17 : 22 C5               	AND	AL,CH			; Result non-zero?
    4412/    9C19 : 74 F7               	JZ	WAITLP			; No = keep waiting
    4413/    9C1B : C3                  	RET
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 75 - 2023/09/19 18時02分31秒


    4414/    9C1C :                     ;
    4415/    9C1C :                     SETIO:
    4416/    9C1C : E8 0F 00            	CALL	GETINT			; Get integer 0-255
    4417/    9C1F : A2 89 08            	MOV	[INPORT],AL		; Set input port
    4418/    9C22 : A2 4C 08            	MOV	[OTPORT],AL		; Set output port
    4419/    9C25 : E8 99 ED            	CALL	CHKSYN			; Make sure ',' follows
    4420/    9C28 : 2C                  	DB	','
    4421/    9C29 : EB 03               	JMP	GETINT			; Get integer 0-255 and return
    4422/    9C2B :                     ;
    4423/    9C2B :                     FNDNUM:
    4424/    9C2B : E8 AC EF            	CALL	GETCHR			; Get next character
    4425/    9C2E :                     GETINT:
    4426/    9C2E : E8 79 F5            	CALL	GETNUM			; Get a number from 0 to 255
    4427/    9C31 :                     MAKINT:
    4428/    9C31 : E8 96 F0            	CALL	DEPINT			; Make sure value 0 - 255
    4429/    9C34 : 8A C6               	MOV	AL,DH			; Get MSB of number
    4430/    9C36 : 0A C0               	OR	AL,AL			; Zero?
    4431/    9C38 : 74 03               	JZ	MAKINT1			; No - Error
    4432/    9C3A : E9 AC F0            	JMP	FCERR
    4433/    9C3D :                     MAKINT1:
    4434/    9C3D :                     ;	LAHF
    4435/    9C3D : 4B                  	DEC	BX			; DEC 'cos GETCHR INCs
    4436/    9C3E :                     ;	SAHF
    4437/    9C3E : E8 99 EF            	CALL	GETCHR			; Get next character
    4438/    9C41 : 8A C2               	MOV	AL,DL			; Get number to A
    4439/    9C43 : C3                  	RET
    4440/    9C44 :                     ;
    4441/    9C44 :                     PEEK:
    4442/    9C44 : E8 88 F0            	CALL	DEINT			; Get memory address
    4443/    9C47 : 87 DA               	XCHG	BX,DX
    4444/    9C49 : 8A 07               	MOV	AL,[BX]			; Get byte in memory
    4445/    9C4B : 87 DA               	XCHG	BX,DX
    4446/    9C4D : E9 E1 FA            	JMP	PASSA			; Return integer A
    4447/    9C50 :                     ;
    4448/    9C50 :                     POKE:
    4449/    9C50 : E8 57 F5            	CALL	GETNUM			; Get memory address
    4450/    9C53 : E8 79 F0            	CALL	DEINT			; Get integer -32768 to 32767
    4451/    9C56 : 52                  	PUSH	DX			; Save memory address
    4452/    9C57 : E8 67 ED            	CALL	CHKSYN			; Make sure ',' follows
    4453/    9C5A : 2C                  	DB	','
    4454/    9C5B : E8 D0 FF            	CALL	GETINT			; Get integer 0-255
    4455/    9C5E : 5A                  	POP	DX			; Restore memory address
    4456/    9C5F : 87 DA               	XCHG	BX,DX
    4457/    9C61 : 88 07               	MOV	[BX],AL
    4458/    9C63 : 87 DA               	XCHG	BX,DX			; Load it into memory
    4459/    9C65 : C3                  	RET
    4460/    9C66 :                     ;
    4461/    9C66 :                     ROUND:
    4462/    9C66 : BB 64 A3            	MOV	BX,HALF			; Add 0.5 to FPREG
    4463/    9C69 :                     ADDPHL:
    4464/    9C69 : E8 BF 03            	CALL	LOADFP			; Load FP at (HL) to BCDE
    4465/    9C6C : EB 0A               	JMP	FPADD			; Add BCDE to FPREG
    4466/    9C6E :                     ;
    4467/    9C6E :                     SUBPHL:
    4468/    9C6E : E8 BA 03            	CALL	LOADFP			; FPREG = -FPREG + number at HL
    4469/    9C71 : EB 02               	JMP	SUBCDE			; Skip "POP CX" and "POP DX"
    4470/    9C73 :                     PSUB:
    4471/    9C73 : 59                  	POP	CX			; Get FP number from stack
    4472/    9C74 : 5A                  	POP	DX
    4473/    9C75 :                     SUBCDE:
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 76 - 2023/09/19 18時02分31秒


    4474/    9C75 : E8 7B 03            	CALL	INVSGN			; Negate FPREG
    4475/    9C78 :                     FPADD:
    4476/    9C78 : 8A C5               	MOV	AL,CH			; Get FP exponent
    4477/    9C7A : 0A C0               	OR	AL,AL			; Is number zero?
    4478/    9C7C : 75 01               	JNZ	FPADD1
    4479/    9C7E : C3                  	RET				; Yes - Nothing to add
    4480/    9C7F :                     FPADD1:
    4481/    9C7F : A0 31 09            	MOV	AL,[FPEXP]		; Get FPREG exponent
    4482/    9C82 : 0A C0               	OR	AL,AL           	; Is this number zero?
    4483/    9C84 : 75 03               	JNZ	FPADD2			; Yes - Move BCDE to FPREQ
    4484/    9C86 : E9 90 03            	JMP	FPBCDE
    4485/    9C89 :                     FPADD2:
    4486/    9C89 : 2A C5               	SUB	AL,CH			; BCDE number larger?
    4487/    9C8B : 73 10               	JNC	NOSWAP			; No - Don't swap them
    4488/    9C8D : F6 D0               	NOT	AL			; Two's complement
    4489/    9C8F : FE C0               	INC	AL			; FP exponent
    4490/    9C91 : 87 DA               	XCHG	BX,DX
    4491/    9C93 : E8 67 03            	CALL	STAKFP			; Put FPREG on stack
    4492/    9C96 : 87 DA               	XCHG	BX,DX
    4493/    9C98 : E8 7E 03            	CALL	FPBCDE			; Move BCDE to FPREG
    4494/    9C9B : 59                  	POP	CX			; Restore number from stack
    4495/    9C9C : 5A                  	POP	DX
    4496/    9C9D :                     NOSWAP:
    4497/    9C9D : 3C 19               	CMP	AL,24+1			; Second number insignificant?
    4498/    9C9F : 72 01               	JC	NOSWAP1
    4499/    9CA1 : C3                  	RET				; Yes - First number is result
    4500/    9CA2 :                     NOSWAP1:
    4501/    9CA2 : 9F                  	LAHF
    4502/    9CA3 : 86 E0               	XCHG	AH,AL
    4503/    9CA5 : 50                  	PUSH	AX			; Save number of bits to scale
    4504/    9CA6 : 86 E0               	XCHG	AH,AL
    4505/    9CA8 : E8 A5 03            	CALL	SIGNS			; Set MSBs & sign of result
    4506/    9CAB : 8A F8               	MOV	BH,AL			; Save sign of result
    4507/    9CAD : 58                  	POP	AX			; Restore scaling factor
    4508/    9CAE : 86 E0               	XCHG	AH,AL
    4509/    9CB0 : 9E                  	SAHF
    4510/    9CB1 : E8 01 01            	CALL	SCALE			; Scale BCDE to same exponent
    4511/    9CB4 : 0A C7               	OR	AL,BH			; Result to be positive?
    4512/    9CB6 : BB 2E 09            	MOV	BX,FPREG		; Point to FPREG
    4513/    9CB9 : 79 19               	JNS	MINCDE			; No - Subtract FPREG from CDE
    4514/    9CBB : E8 BA 00            	CALL	PLUCDE			; Add FPREG to CDE
    4515/    9CBE : 72 03               	JC	NOSWAP2			; No overflow - Round it up
    4516/    9CC0 : E9 80 00            	JMP	RONDUP
    4517/    9CC3 :                     NOSWAP2:
    4518/    9CC3 : 9F                  	LAHF
    4519/    9CC4 : 43                  	INC	BX			; Point to exponent
    4520/    9CC5 : 9E                  	SAHF
    4521/    9CC6 : FE 07               	INC	BYTE PTR [BX]		; Increment it
    4522/    9CC8 : 75 03               	JNZ	NOSWAP3			; Number overflowed - Error
    4523/    9CCA : E9 50 E9            	JMP	OVERR
    4524/    9CCD :                     NOSWAP3:
    4525/    9CCD : B3 01               	MOV	BL,1			; 1 bit to shift right
    4526/    9CCF : E8 00 01            	CALL	SHRT1			; Shift result right
    4527/    9CD2 : EB 6F               	JMP	RONDUP			; Round it up
    4528/    9CD4 :                     ;
    4529/    9CD4 :                     MINCDE:
    4530/    9CD4 : 32 C0               	XOR	AL,AL			; Clear A and carry
    4531/    9CD6 : 2A C5               	SUB	AL,CH			; Negate exponent
    4532/    9CD8 : 8A E8               	MOV	CH,AL			; Re-save exponent
    4533/    9CDA : 8A 07               	MOV	AL,[BX]			; Get LSB of FPREG
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 77 - 2023/09/19 18時02分31秒


    4534/    9CDC : 1A C2               	SBB	AL,DL			; Subtract LSB of BCDE
    4535/    9CDE : 8A D0               	MOV	DL,AL			; Save LSB of BCDE
    4536/    9CE0 : 9F                  	LAHF
    4537/    9CE1 : 43                  	INC	BX
    4538/    9CE2 : 9E                  	SAHF
    4539/    9CE3 : 8A 07               	MOV	AL,[BX]			; Get NMSB of FPREG
    4540/    9CE5 : 1A C6               	SBB	AL,DH			; Subtract NMSB of BCDE
    4541/    9CE7 : 8A F0               	MOV	DH,AL			; Save NMSB of BCDE
    4542/    9CE9 : 9F                  	LAHF
    4543/    9CEA : 43                  	INC	BX
    4544/    9CEB : 9E                  	SAHF
    4545/    9CEC : 8A 07               	MOV	AL,[BX]			; Get MSB of FPREG
    4546/    9CEE : 1A C1               	SBB	AL,CL			; Subtract MSB of BCDE
    4547/    9CF0 : 8A C8               	MOV	CL,AL			; Save MSB of BCDE
    4548/    9CF2 :                     CONPOS:
    4549/    9CF2 : 73 03               	JNC	BNORM
    4550/    9CF4 : E8 9A 00            	CALL	COMPL			; Overflow - Make it positive
    4551/    9CF7 :                     ;
    4552/    9CF7 :                     BNORM:
    4553/    9CF7 : 8A DD               	MOV	BL,CH			; L = Exponent
    4554/    9CF9 : 8A FA               	MOV	BH,DL			; H = LSB
    4555/    9CFB : 32 C0               	XOR	AL,AL
    4556/    9CFD :                     BNRMLP:
    4557/    9CFD : 8A E8               	MOV	CH,AL			; Save bit count
    4558/    9CFF : 8A C1               	MOV	AL,CL			; Get MSB
    4559/    9D01 : 0A C0               	OR	AL,AL			; Is it zero?
    4560/    9D03 : 75 26               	JNZ	PNORM			; No - Do it bit at a time
    4561/    9D05 : 8A CE               	MOV	CL,DH			; MSB = NMSB
    4562/    9D07 : 8A F7               	MOV	DH,BH			; NMSB= LSB
    4563/    9D09 : 8A FB               	MOV	BH,BL			; LSB = VLSB
    4564/    9D0B : 8A D8               	MOV	BL,AL			; VLSB= 0
    4565/    9D0D : 8A C5               	MOV	AL,CH			; Get exponent
    4566/    9D0F : 2C 08               	SUB	AL,8			; Count 8 bits
    4567/    9D11 : 3C E0               	CMP	AL,-24-8		; Was number zero?
    4568/    9D13 : 75 E8               	JNZ	BNRMLP			; No - Keep normalising
    4569/    9D15 :                     RESZER:
    4570/    9D15 : 32 C0               	XOR	AL,AL			; Result is zero
    4571/    9D17 :                     SAVEXP:
    4572/    9D17 : A2 31 09            	MOV	[FPEXP],AL		; Save result as zero
    4573/    9D1A : C3                  	RET
    4574/    9D1B :                     ;
    4575/    9D1B :                     NORMAL:
    4576/    9D1B : FE CD               	DEC	CH			; Count bits
    4577/    9D1D : 03 DB               	ADD	BX,BX			; Shift HL left
    4578/    9D1F : 8A C6               	MOV	AL,DH			; Get NMSB
    4579/    9D21 : D0 D0               	RCL	AL,1			; Shift left with last bit
    4580/    9D23 : 8A F0               	MOV	DH,AL			; Save NMSB
    4581/    9D25 : 8A C1               	MOV	AL,CL			; Get MSB
    4582/    9D27 : 12 C0               	ADC	AL,AL			; Shift left with last bit
    4583/    9D29 : 8A C8               	MOV	CL,AL			; Save MSB
    4584/    9D2B :                     PNORM:
    4585/    9D2B : 79 EE               	JNS	NORMAL			; Not done - Keep going
    4586/    9D2D : 8A C5               	MOV	AL,CH			; Number of bits shifted
    4587/    9D2F : 8A D7               	MOV	DL,BH			; Save HL in EB
    4588/    9D31 : 8A EB               	MOV	CH,BL
    4589/    9D33 : 0A C0               	OR	AL,AL			; Any shifting done?
    4590/    9D35 : 74 0C               	JZ	RONDUP			; No - Round it up
    4591/    9D37 : BB 31 09            	MOV	BX,FPEXP		; Point to exponent
    4592/    9D3A : 02 07               	ADD	AL,[BX]			; Add shifted bits
    4593/    9D3C : 88 07               	MOV	[BX],AL			; Re-save exponent
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 78 - 2023/09/19 18時02分31秒


    4594/    9D3E : 73 D5               	JNC	RESZER			; Underflow - Result is zero
    4595/    9D40 : 75 01               	JNZ	RONDUP
    4596/    9D42 : C3                  	RET				; Result is zero
    4597/    9D43 :                     RONDUP:
    4598/    9D43 : 8A C5               	MOV	AL,CH			; Get VLSB of number
    4599/    9D45 :                     RONDB:
    4600/    9D45 : BB 31 09            	MOV	BX,FPEXP		; Point to exponent
    4601/    9D48 : 0A C0               	OR	AL,AL			; Any rounding?
    4602/    9D4A : 79 03               	JNS	RONDB1
    4603/    9D4C : E8 10 00            	CALL	FPROND			; Yes - Round number up
    4604/    9D4F :                     RONDB1:
    4605/    9D4F : 8A 2F               	MOV	CH,[BX]			; B = Exponent
    4606/    9D51 : 9F                  	LAHF
    4607/    9D52 : 43                  	INC	BX
    4608/    9D53 : 9E                  	SAHF
    4609/    9D54 : 8A 07               	MOV	AL,[BX]			; Get sign of result
    4610/    9D56 : 24 80               	AND	AL,10000000B		; Only bit 7 needed
    4611/    9D58 : 32 C1               	XOR	AL,CL			; Set correct sign
    4612/    9D5A : 8A C8               	MOV	CL,AL			; Save correct sign in number
    4613/    9D5C : E9 BA 02            	JMP	FPBCDE			; Move BCDE to FPREG
    4614/    9D5F :                     ;
    4615/    9D5F :                     FPROND:
    4616/    9D5F : FE C2               	INC	DL			; Round LSB
    4617/    9D61 : 74 01               	JZ	FPROND1
    4618/    9D63 : C3                  	RET				; Return if ok
    4619/    9D64 :                     FPROND1:
    4620/    9D64 : FE C6               	INC	DH			; Round NMSB
    4621/    9D66 : 74 01               	JZ	FPROND2
    4622/    9D68 : C3                  	RET				; Return if ok
    4623/    9D69 :                     FPROND2:
    4624/    9D69 : FE C1               	INC	CL			; Round MSB
    4625/    9D6B : 74 01               	JZ	FPROND3
    4626/    9D6D : C3                  	RET				; Return if ok
    4627/    9D6E :                     FPROND3:
    4628/    9D6E : B1 80               	MOV	CL,80H			; Set normal value
    4629/    9D70 : FE 07               	INC	BYTE PTR [BX]		; Increment exponent
    4630/    9D72 : 74 01               	JZ	FPROND4
    4631/    9D74 : C3                  	RET				; Return if ok
    4632/    9D75 :                     FPROND4:
    4633/    9D75 : E9 A5 E8            	JMP	OVERR			; Overflow error
    4634/    9D78 :                     ;
    4635/    9D78 :                     PLUCDE:
    4636/    9D78 : 8A 07               	MOV	AL,[BX]			; Get LSB of FPREG
    4637/    9D7A : 02 C2               	ADD	AL,DL			; Add LSB of BCDE
    4638/    9D7C : 8A D0               	MOV	DL,AL			; Save LSB of BCDE
    4639/    9D7E : 9F                  	LAHF
    4640/    9D7F : 43                  	INC	BX
    4641/    9D80 : 9E                  	SAHF
    4642/    9D81 : 8A 07               	MOV	AL,[BX]			; Get NMSB of FPREG
    4643/    9D83 : 12 C6               	ADC	AL,DH			; Add NMSB of BCDE
    4644/    9D85 : 8A F0               	MOV	DH,AL			; Save NMSB of BCDE
    4645/    9D87 : 9F                  	LAHF
    4646/    9D88 : 43                  	INC	BX
    4647/    9D89 : 9E                  	SAHF
    4648/    9D8A : 8A 07               	MOV	AL,[BX]			; Get MSB of FPREG
    4649/    9D8C : 12 C1               	ADC	AL,CL			; Add MSB of BCDE
    4650/    9D8E : 8A C8               	MOV	CL,AL			; Save MSB of BCDE
    4651/    9D90 : C3                  	RET
    4652/    9D91 :                     ;
    4653/    9D91 :                     COMPL:
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 79 - 2023/09/19 18時02分31秒


    4654/    9D91 : BB 32 09            	MOV	BX,SGNRES		; Sign of result
    4655/    9D94 : 8A 07               	MOV	AL,[BX]			; Get sign of result
    4656/    9D96 : F6 D0               	NOT	AL			; Negate it
    4657/    9D98 : 88 07               	MOV	[BX],AL			; Put it back
    4658/    9D9A : 32 C0               	XOR	AL,AL
    4659/    9D9C : 8A D8               	MOV	BL,AL			; Set L to zero
    4660/    9D9E : 2A C5               	SUB	AL,CH			; Negate exponent,set carry
    4661/    9DA0 : 8A E8               	MOV	CH,AL			; Re-save exponent
    4662/    9DA2 : 8A C3               	MOV	AL,BL			; Load zero
    4663/    9DA4 : 1A C2               	SBB	AL,DL			; Negate LSB
    4664/    9DA6 : 8A D0               	MOV	DL,AL			; Re-save LSB
    4665/    9DA8 : 8A C3               	MOV	AL,BL			; Load zero
    4666/    9DAA : 1A C6               	SBB	AL,DH			; Negate NMSB
    4667/    9DAC : 8A F0               	MOV	DH,AL			; Re-save NMSB
    4668/    9DAE : 8A C3               	MOV	AL,BL			; Load zero
    4669/    9DB0 : 1A C1               	SBB	AL,CL			; Negate MSB
    4670/    9DB2 : 8A C8               	MOV	CL,AL			; Re-save MSB
    4671/    9DB4 : C3                  	RET
    4672/    9DB5 :                     ;
    4673/    9DB5 :                     SCALE:
    4674/    9DB5 : B5 00               	MOV	CH,0			; Clear underflow
    4675/    9DB7 :                     SCALLP:
    4676/    9DB7 : 2C 08               	SUB	AL,8			; 8 bits (a whole byte)?
    4677/    9DB9 : 72 0A               	JC	SHRITE			; No - Shift right A bits
    4678/    9DBB : 8A EA               	MOV	CH,DL			; <- Shift
    4679/    9DBD : 8A D6               	MOV	DL,DH			; <- right
    4680/    9DBF : 8A F1               	MOV	DH,CL			; <- eight
    4681/    9DC1 : B1 00               	MOV	CL,0			; <- bits
    4682/    9DC3 : EB F2               	JMP	SCALLP			; More bits to shift
    4683/    9DC5 :                     ;
    4684/    9DC5 :                     SHRITE:
    4685/    9DC5 : 04 09               	ADD	AL,8+1			; Adjust count
    4686/    9DC7 : 8A D8               	MOV	BL,AL			; Save bits to shift
    4687/    9DC9 :                     SHRLP:
    4688/    9DC9 : 32 C0               	XOR	AL,AL			; Flag for all done
    4689/    9DCB : FE CB               	DEC	BL			; All shifting done?
    4690/    9DCD : 75 01               	JNZ	SHRLP1
    4691/    9DCF : C3                  	RET				; Yes - Return
    4692/    9DD0 :                     SHRLP1:
    4693/    9DD0 : 8A C1               	MOV	AL,CL			; Get MSB
    4694/    9DD2 :                     SHRT1:
    4695/    9DD2 : D0 D8               	RCR	AL,1			; Shift it right
    4696/    9DD4 : 8A C8               	MOV	CL,AL			; Re-save
    4697/    9DD6 : 8A C6               	MOV	AL,DH			; Get NMSB
    4698/    9DD8 : D0 D8               	RCR	AL,1			; Shift right with last bit
    4699/    9DDA : 8A F0               	MOV	DH,AL			; Re-save it
    4700/    9DDC : 8A C2               	MOV	AL,DL			; Get LSB
    4701/    9DDE : D0 D8               	RCR	AL,1			; Shift right with last bit
    4702/    9DE0 : 8A D0               	MOV	DL,AL			; Re-save it
    4703/    9DE2 : 8A C5               	MOV	AL,CH			; Get underflow
    4704/    9DE4 : D0 D8               	RCR	AL,1			; Shift right with last bit
    4705/    9DE6 : 8A E8               	MOV	CH,AL			; Re-save underflow
    4706/    9DE8 : EB DF               	JMP	SHRLP			; More bits to do
    4707/    9DEA :                     ;
    4708/    9DEA :                     UNITY:
    4709/    9DEA : 00 00 00 81         	DB	000H,000H,000H,081H 	; 1.00000
    4710/    9DEE :                     ;
    4711/    9DEE :                     LOGTAB:
    4712/    9DEE : 03                  	DB	3           		; Table used by LOG
    4713/    9DEF : AA 56 19 80         	DB	0AAH,056H,019H,080H	; 0.59898
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 80 - 2023/09/19 18時02分31秒


    4714/    9DF3 : F1 22 76 80         	DB	0F1H,022H,076H,080H	; 0.96147
    4715/    9DF7 : 45 AA 38 82         	DB	045H,0AAH,038H,082H	; 2.88539
    4716/    9DFB :                     ;
    4717/    9DFB :                     LOG:
    4718/    9DFB : E8 BA 01            	CALL	TSTSGN			; Test sign of value
    4719/    9DFE : 0A C0               	OR	AL,AL
    4720/    9E00 : 7B 03               	JPO	LOG1			; ?FC Error if <= zero	JP PE,FCERR
    4721/    9E02 : E9 E4 EE            	JMP	FCERR
    4722/    9E05 :                     LOG1:
    4723/    9E05 : BB 31 09            	MOV	BX,FPEXP		; Point to exponent
    4724/    9E08 : 8A 07               	MOV	AL,[BX]			; Get exponent
    4725/    9E0A : B9 35 80            	MOV	CX,8035H		; BCDE = SQR(1/2)
    4726/    9E0D : BA F3 04            	MOV	DX,04F3H
    4727/    9E10 : 2A C5               	SUB	AL,CH			; Scale value to be < 1
    4728/    9E12 : 9F                  	LAHF
    4729/    9E13 : 86 E0               	XCHG	AH,AL
    4730/    9E15 : 50                  	PUSH	AX			; Save scale factor
    4731/    9E16 : 86 E0               	XCHG	AH,AL
    4732/    9E18 : 88 2F               	MOV	[BX],CH			; Save new exponent
    4733/    9E1A : 52                  	PUSH	DX			; Save SQR(1/2)
    4734/    9E1B : 51                  	PUSH	CX
    4735/    9E1C : E8 59 FE            	CALL	FPADD			; Add SQR(1/2) to value
    4736/    9E1F : 59                  	POP	CX			; Restore SQR(1/2)
    4737/    9E20 : 5A                  	POP	DX
    4738/    9E21 : FE C5               	INC	CH			; Make it SQR(2)
    4739/    9E23 : E8 A5 00            	CALL	DVBCDE			; Divide by SQR(2)
    4740/    9E26 : BB EA 9D            	MOV	BX,UNITY		; Point to 1.
    4741/    9E29 : E8 42 FE            	CALL	SUBPHL			; Subtract FPREG from 1
    4742/    9E2C : BB EE 9D            	MOV	BX,LOGTAB		; Coefficient table
    4743/    9E2F : E8 25 06            	CALL	SUMSER			; Evaluate sum of series
    4744/    9E32 : B9 80 80            	MOV	CX,8080H		; BCDE = -0.5
    4745/    9E35 : BA 00 00            	MOV	DX,0000H
    4746/    9E38 : E8 3D FE            	CALL	FPADD			; Subtract 0.5 from FPREG
    4747/    9E3B : 58                  	POP	AX			; Restore scale factor
    4748/    9E3C : 86 E0               	XCHG	AH,AL
    4749/    9E3E : 9E                  	SAHF
    4750/    9E3F : E8 B5 03            	CALL	RSCALE			; Re-scale number
    4751/    9E42 :                     MULLN2:
    4752/    9E42 : B9 31 80            	MOV	CX,8031H		; BCDE = Ln(2)
    4753/    9E45 : BA 18 72            	MOV	DX,7218H
    4754/    9E48 : EB 02               	JMP	FPMULT			; Skip "POP CX" and "POP DX"
    4755/    9E4A :                     ;
    4756/    9E4A :                     MULT:
    4757/    9E4A : 59                  	POP	CX			; Get number from stack
    4758/    9E4B : 5A                  	POP	DX
    4759/    9E4C :                     FPMULT:
    4760/    9E4C : E8 69 01            	CALL	TSTSGN			; Test sign of FPREG
    4761/    9E4F : 75 01               	JNZ	FPMULT1
    4762/    9E51 : C3                  	RET				; Return zero if zero
    4763/    9E52 :                     FPMULT1:
    4764/    9E52 : B3 00               	MOV	BL,0			; Flag add exponents
    4765/    9E54 : E8 04 01            	CALL	ADDEXP			; Add exponents
    4766/    9E57 : 8A C1               	MOV	AL,CL			; Get MSB of multiplier
    4767/    9E59 : A2 40 09            	MOV	[MULVAL],AL		; Save MSB of multiplier
    4768/    9E5C : 87 DA               	XCHG	BX,DX
    4769/    9E5E : 89 1E 41 09         	MOV	[MULVAL+1],BX		; Save rest of multiplier
    4770/    9E62 : B9 00 00            	MOV	CX,0			; Partial product (BCDE) = zero
    4771/    9E65 : 8A F5               	MOV	DH,CH
    4772/    9E67 : 8A D5               	MOV	DL,CH
    4773/    9E69 : BB F7 9C            	MOV	BX,BNORM		; Address of normalise
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 81 - 2023/09/19 18時02分31秒


    4774/    9E6C : 53                  	PUSH	BX			; Save for return
    4775/    9E6D : BB 75 9E            	MOV	BX,MULT8		; Address of 8 bit multiply
    4776/    9E70 : 53                  	PUSH	BX			; Save for NMSB,MSB
    4777/    9E71 : 53                  	PUSH	BX			;
    4778/    9E72 : BB 2E 09            	MOV	BX,FPREG		; Point to number
    4779/    9E75 :                     MULT8:
    4780/    9E75 : 8A 07               	MOV	AL,[BX]			; Get LSB of number
    4781/    9E77 :                     ;	LAHF
    4782/    9E77 : 43                  	INC	BX			; Point to NMSB
    4783/    9E78 :                     ;	SAHF
    4784/    9E78 : 0A C0               	OR	AL,AL           	; Test LSB
    4785/    9E7A : 74 38               	JZ	BYTSFT			; Zero - shift to next byte
    4786/    9E7C : 53                  	PUSH	BX			; Save address of number
    4787/    9E7D : B3 08               	MOV	BL,8			; 8 bits to multiply by
    4788/    9E7F :                     MUL8LP:
    4789/    9E7F : D0 D8               	RCR	AL,1			; Shift LSB right
    4790/    9E81 : 8A F8               	MOV	BH,AL			; Save LSB
    4791/    9E83 : 8A C1               	MOV	AL,CL			; Get MSB
    4792/    9E85 : 73 0F               	JNC	NOMADD			; Bit was zero - Don't add
    4793/    9E87 : 53                  	PUSH	BX			; Save LSB and count
    4794/    9E88 : 8B 1E 41 09         	MOV	BX,[MULVAL+1]		; Get LSB and NMSB
    4795/    9E8C : 03 DA               	ADD	BX,DX			; Add NMSB and LSB
    4796/    9E8E : 87 DA               	XCHG	BX,DX			; Leave sum in DE
    4797/    9E90 : 5B                  	POP	BX			; Restore MSB and count
    4798/    9E91 : A0 40 09            	MOV	AL,[MULVAL]		; Get MSB of multiplier
    4799/    9E94 : 12 C1               	ADC	AL,CL			; Add MSB
    4800/    9E96 :                     NOMADD:
    4801/    9E96 : D0 D8               	RCR	AL,1			; Shift MSB right
    4802/    9E98 : 8A C8               	MOV	CL,AL			; Re-save MSB
    4803/    9E9A : 8A C6               	MOV	AL,DH			; Get NMSB
    4804/    9E9C : D0 D8               	RCR	AL,1			; Shift NMSB right
    4805/    9E9E : 8A F0               	MOV	DH,AL			; Re-save NMSB
    4806/    9EA0 : 8A C2               	MOV	AL,DL			; Get LSB
    4807/    9EA2 : D0 D8               	RCR	AL,1			; Shift LSB right
    4808/    9EA4 : 8A D0               	MOV	DL,AL			; Re-save LSB
    4809/    9EA6 : 8A C5               	MOV	AL,CH			; Get VLSB
    4810/    9EA8 : D0 D8               	RCR	AL,1			; Shift VLSB right
    4811/    9EAA : 8A E8               	MOV	CH,AL			; Re-save VLSB
    4812/    9EAC : FE CB               	DEC	BL			; Count bits multiplied
    4813/    9EAE : 8A C7               	MOV	AL,BH			; Get LSB of multiplier
    4814/    9EB0 : 75 CD               	JNZ	MUL8LP			; More - Do it
    4815/    9EB2 :                     POPHRT:
    4816/    9EB2 : 5B                  	POP	BX			; Restore address of number
    4817/    9EB3 : C3                  	RET
    4818/    9EB4 :                     ;
    4819/    9EB4 :                     BYTSFT:
    4820/    9EB4 : 8A EA               	MOV	CH,DL			; Shift partial product left
    4821/    9EB6 : 8A D6               	MOV	DL,DH
    4822/    9EB8 : 8A F1               	MOV	DH,CL
    4823/    9EBA : 8A C8               	MOV	CL,AL
    4824/    9EBC : C3                  	RET
    4825/    9EBD :                     ;
    4826/    9EBD :                     DIV10:
    4827/    9EBD : E8 3D 01            	CALL	STAKFP			; Save FPREG on stack
    4828/    9EC0 : B9 20 84            	MOV	CX,8420H		; BCDE = 10.
    4829/    9EC3 : BA 00 00            	MOV	DX,0000H
    4830/    9EC6 : E8 50 01            	CALL	FPBCDE			; Move 10 to FPREG
    4831/    9EC9 :                     ;
    4832/    9EC9 :                     DIV:
    4833/    9EC9 : 59                  	POP	CX			; Get number from stack
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 82 - 2023/09/19 18時02分31秒


    4834/    9ECA : 5A                  	POP	DX
    4835/    9ECB :                     DVBCDE:
    4836/    9ECB : E8 EA 00            	CALL	TSTSGN			; Test sign of FPREG
    4837/    9ECE : 75 03               	JNZ	DVBCDE1
    4838/    9ED0 : E9 3A E7            	JMP	DZERR			; Error if division by zero
    4839/    9ED3 :                     DVBCDE1:
    4840/    9ED3 : B3 FF               	MOV	BL,-1			; Flag subtract exponents
    4841/    9ED5 : E8 83 00            	CALL	ADDEXP			; Subtract exponents
    4842/    9ED8 : FE 07               	INC	BYTE PTR [BX]		; Add 2 to exponent to adjust
    4843/    9EDA : FE 07               	INC	BYTE PTR [BX]
    4844/    9EDC :                     ;	LAHF
    4845/    9EDC : 4B                  	DEC	BX			; Point to MSB
    4846/    9EDD :                     ;	SAHF
    4847/    9EDD : 8A 07               	MOV	AL,[BX]			; Get MSB of dividend
    4848/    9EDF : A2 5B 08            	MOV	[DIV3],AL		; Save for subtraction
    4849/    9EE2 :                     ;	LAHF
    4850/    9EE2 : 4B                  	DEC	BX
    4851/    9EE3 :                     ;	SAHF
    4852/    9EE3 : 8A 07               	MOV	AL,[BX]			; Get NMSB of dividend
    4853/    9EE5 : A2 55 08            	MOV	[DIV2],AL		; Save for subtraction
    4854/    9EE8 :                     ;	LAHF
    4855/    9EE8 : 4B                  	DEC	BX
    4856/    9EE9 :                     ;	SAHF
    4857/    9EE9 : 8A 07               	MOV	AL,[BX]			; Get MSB of dividend
    4858/    9EEB : A2 4F 08            	MOV	[DIV1],AL		; Save for subtraction
    4859/    9EEE : 8A E9               	MOV	CH,CL			; Get MSB
    4860/    9EF0 : 87 DA               	XCHG	BX,DX			; NMSB,LSB to HL
    4861/    9EF2 : 32 C0               	XOR	AL,AL
    4862/    9EF4 : 8A C8               	MOV	CL,AL			; Clear MSB of quotient
    4863/    9EF6 : 8A F0               	MOV	DH,AL			; Clear NMSB of quotient
    4864/    9EF8 : 8A D0               	MOV	DL,AL			; Clear LSB of quotient
    4865/    9EFA : A2 5F 08            	MOV	[DIV4],AL		; Clear overflow count
    4866/    9EFD :                     DIVLP:
    4867/    9EFD : 53                  	PUSH	BX			; Save divisor
    4868/    9EFE : 51                  	PUSH	CX
    4869/    9EFF : 8A C3               	MOV	AL,BL			; Get LSB of number
    4870/    9F01 : E8 4A 69            	CALL	DIVSUP			; Subt' divisor from dividend
    4871/    9F04 : 1C 00               	SBB	AL,0			; Count for overflows
    4872/    9F06 : F5                  	CMC
    4873/    9F07 : 73 0B               	JNC	RESDIV			; Restore divisor if borrow
    4874/    9F09 : A2 5F 08            	MOV	[DIV4],AL		; Re-save overflow count
    4875/    9F0C : 58                  	POP	AX			; Scrap divisor
    4876/    9F0D :                     ;	XCHG	AH,AL
    4877/    9F0D :                     ;	SAHF
    4878/    9F0D : 58                  	POP	AX
    4879/    9F0E : 86 E0               	XCHG	AH,AL
    4880/    9F10 : 9E                  	SAHF
    4881/    9F11 : F9                  	STC				; Set carry to
    4882/    9F12 : EB 02               	JMP	RESDIV1			; Skip "POP CX" and "POP BX"
    4883/    9F14 :                     ;
    4884/    9F14 :                     RESDIV:
    4885/    9F14 : 59                  	POP	CX			; Restore divisor
    4886/    9F15 : 5B                  	POP	BX
    4887/    9F16 :                     RESDIV1:
    4888/    9F16 : 8A C1               	MOV	AL,CL			; Get MSB of quotient
    4889/    9F18 : FE C0               	INC	AL
    4890/    9F1A : FE C8               	DEC	AL
    4891/    9F1C : D0 D8               	RCR	AL,1			; Bit 0 to bit 7
    4892/    9F1E : 79 03               	JNS	RESDIV2
    4893/    9F20 : E9 22 FE            	JMP	RONDB			; Done - Normalise result
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 83 - 2023/09/19 18時02分31秒


    4894/    9F23 :                     RESDIV2:
    4895/    9F23 : D0 D0               	RCL	AL,1			; Restore carry
    4896/    9F25 : 8A C2               	MOV	AL,DL			; Get LSB of quotient
    4897/    9F27 : D0 D0               	RCL	AL,1			; Double it
    4898/    9F29 : 8A D0               	MOV	DL,AL			; Put it back
    4899/    9F2B : 8A C6               	MOV	AL,DH			; Get NMSB of quotient
    4900/    9F2D : D0 D0               	RCL	AL,1			; Double it
    4901/    9F2F : 8A F0               	MOV	DH,AL			; Put it back
    4902/    9F31 : 8A C1               	MOV	AL,CL			; Get MSB of quotient
    4903/    9F33 : D0 D0               	RCL	AL,1			; Double it
    4904/    9F35 : 8A C8               	MOV	CL,AL			; Put it back
    4905/    9F37 : 03 DB               	ADD	BX,BX			; Double NMSB,LSB of divisor
    4906/    9F39 : 8A C5               	MOV	AL,CH			; Get MSB of divisor
    4907/    9F3B : D0 D0               	RCL	AL,1			; Double it
    4908/    9F3D : 8A E8               	MOV	CH,AL			; Put it back
    4909/    9F3F : A0 5F 08            	MOV	AL,[DIV4]		; Get VLSB of quotient
    4910/    9F42 : D0 D0               	RCL	AL,1			; Double it
    4911/    9F44 : A2 5F 08            	MOV	[DIV4],AL		; Put it back
    4912/    9F47 : 8A C1               	MOV	AL,CL			; Get MSB of quotient
    4913/    9F49 : 0A C6               	OR	AL,DH			; Merge NMSB
    4914/    9F4B : 0A C2               	OR	AL,DL			; Merge LSB
    4915/    9F4D : 75 AE               	JNZ	DIVLP			; Not done - Keep dividing
    4916/    9F4F : 53                  	PUSH	BX			; Save divisor
    4917/    9F50 : BB 31 09            	MOV	BX,FPEXP		; Point to exponent
    4918/    9F53 : FE 0F               	DEC	BYTE PTR [BX]		; Divide by 2
    4919/    9F55 : 5B                  	POP	BX			; Restore divisor
    4920/    9F56 : 75 A5               	JNZ	DIVLP			; Ok - Keep going
    4921/    9F58 : E9 C2 E6            	JMP	OVERR			; Overflow error
    4922/    9F5B :                     ;
    4923/    9F5B :                     ADDEXP:
    4924/    9F5B : 8A C5               	MOV	AL,CH			; Get exponent of dividend
    4925/    9F5D : 0A C0               	OR	AL,AL			; Test it
    4926/    9F5F : 74 2D               	JZ	OVTST3			; Zero - Result zero
    4927/    9F61 : 8A C3               	MOV	AL,BL			; Get add/subtract flag
    4928/    9F63 : BB 31 09            	MOV	BX,FPEXP		; Point to exponent
    4929/    9F66 : 32 07               	XOR	AL,[BX]			; Add or subtract it
    4930/    9F68 : 02 C5               	ADD	AL,CH			; Add the other exponent
    4931/    9F6A : 8A E8               	MOV	CH,AL			; Save new exponent
    4932/    9F6C : D0 D8               	RCR	AL,1			; Test exponent for overflow
    4933/    9F6E : 32 C5               	XOR	AL,CH
    4934/    9F70 : 8A C5               	MOV	AL,CH			; Get exponent
    4935/    9F72 : 79 18               	JNS	OVTST2			; Positive - Test for overflow
    4936/    9F74 : 04 80               	ADD	AL,80H			; Add excess 128
    4937/    9F76 : 88 07               	MOV	[BX],AL			; Save new exponent
    4938/    9F78 : 75 03               	JNZ	ADDEXP1			; Zero - Result zero
    4939/    9F7A : E9 35 FF            	JMP	POPHRT
    4940/    9F7D :                     ADDEXP1:
    4941/    9F7D : E8 D0 00            	CALL	SIGNS			; Set MSBs and sign of result
    4942/    9F80 : 88 07               	MOV	[BX],AL			; Save new exponent
    4943/    9F82 : 9F                  	LAHF
    4944/    9F83 : 4B                  	DEC	BX			; Point to MSB
    4945/    9F84 : 9E                  	SAHF
    4946/    9F85 : C3                  	RET
    4947/    9F86 :                     ;
    4948/    9F86 :                     OVTST1:
    4949/    9F86 : E8 2F 00            	CALL	TSTSGN			; Test sign of FPREG
    4950/    9F89 : F6 D0               	NOT	AL			; Invert sign
    4951/    9F8B : 5B                  	POP	BX			; Clean up stack
    4952/    9F8C :                     OVTST2:
    4953/    9F8C : 0A C0               	OR	AL,AL			; Test if new exponent zero
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 84 - 2023/09/19 18時02分31秒


    4954/    9F8E :                     OVTST3:
    4955/    9F8E : 5B                  	POP	BX			; Clear off return addr
    4956/    9F8F : 78 03               	JS	OVTST4			; Result zero
    4957/    9F91 : E9 81 FD            	JMP	RESZER
    4958/    9F94 :                     OVTST4:
    4959/    9F94 : E9 86 E6            	JMP	OVERR			; Overflow error
    4960/    9F97 :                     ;
    4961/    9F97 :                     MLSP10:
    4962/    9F97 : E8 8E 00            	CALL	BCDEFP			; Move FPREG to BCDE
    4963/    9F9A : 8A C5               	MOV	AL,CH			; Get exponent
    4964/    9F9C : 0A C0               	OR	AL,AL			; Is it zero?
    4965/    9F9E : 75 01               	JNZ	MLSP101
    4966/    9FA0 : C3                  	RET				; Yes - Result is zero
    4967/    9FA1 :                     MLSP101:
    4968/    9FA1 : 04 02               	ADD	AL,2			; Multiply by 4
    4969/    9FA3 : 73 03               	JNC	MLSP102
    4970/    9FA5 : E9 75 E6            	JMP	OVERR			; Overflow - ?OV Error
    4971/    9FA8 :                     MLSP102:
    4972/    9FA8 : 8A E8               	MOV	CH,AL			; Re-save exponent
    4973/    9FAA : E8 CB FC            	CALL	FPADD			; Add BCDE to FPREG (Time 5)
    4974/    9FAD : BB 31 09            	MOV	BX,FPEXP		; Point to exponent
    4975/    9FB0 : FE 07               	INC	BYTE PTR [BX]		; Double number (Times 10)
    4976/    9FB2 : 74 01               	JZ	MLSP103
    4977/    9FB4 : C3                  	RET				; Ok - Return
    4978/    9FB5 :                     MLSP103:
    4979/    9FB5 : E9 65 E6            	JMP	OVERR			; Overflow error
    4980/    9FB8 :                     ;
    4981/    9FB8 :                     ; Z flag
    4982/    9FB8 :                     ;
    4983/    9FB8 :                     TSTSGN:
    4984/    9FB8 : A0 31 09            	MOV	AL,[FPEXP]		; Get sign of FPREG
    4985/    9FBB : 0A C0               	OR	AL,AL
    4986/    9FBD : 75 01               	JNZ	TSTSGN1
    4987/    9FBF : C3                  	RET				; RETurn if number is zero
    4988/    9FC0 :                     TSTSGN1:
    4989/    9FC0 : A0 30 09            	MOV	AL,[FPREG+2]		; Get MSB of FPREG
    4990/    9FC3 : 3C 2F               	CMP	AL,02FH
    4991/    9FC5 : EB 02               	JMP	RETREL1
    4992/    9FC7 :                     RETREL:
    4993/    9FC7 : F6 D0               	NOT	AL			; Invert sign
    4994/    9FC9 :                     RETREL1:
    4995/    9FC9 : D0 D0               	RCL	AL,1			; Sign bit to carry
    4996/    9FCB :                     FLGDIF:
    4997/    9FCB : 1A C0               	SBB	AL,AL			; Carry to all bits of A
    4998/    9FCD : 74 01               	JZ	FLGDIF1
    4999/    9FCF : C3                  	RET				; Return -1 if negative
    5000/    9FD0 :                     FLGDIF1:
    5001/    9FD0 : FE C0               	INC	AL			; Bump to +1
    5002/    9FD2 : C3                  	RET				; Positive - Return +1
    5003/    9FD3 :                     ;
    5004/    9FD3 :                     SGN:
    5005/    9FD3 : E8 E2 FF            	CALL	TSTSGN			; Test sign of FPREG
    5006/    9FD6 :                     FLGREL:
    5007/    9FD6 : B5 88               	MOV	CH,80H+8		; 8 bit integer in exponent
    5008/    9FD8 : BA 00 00            	MOV	DX,0			; Zero NMSB and LSB
    5009/    9FDB :                     RETINT:
    5010/    9FDB : BB 31 09            	MOV	BX,FPEXP		; Point to exponent
    5011/    9FDE : 8A C8               	MOV	CL,AL			; CDE = MSB,NMSB and LSB
    5012/    9FE0 : 88 2F               	MOV	[BX],CH			; Save exponent
    5013/    9FE2 : B5 00               	MOV	CH,0			; CDE = integer to normalise
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 85 - 2023/09/19 18時02分31秒


    5014/    9FE4 :                     ;	LAHF
    5015/    9FE4 : 43                  	INC	BX			; Point to sign of result
    5016/    9FE5 :                     ;	SAHF
    5017/    9FE5 : C6 07 80            	MOV	BYTE PTR [BX],80H	; Set sign of result
    5018/    9FE8 : D0 D0               	RCL	AL,1			; Carry = sign of integer
    5019/    9FEA : E9 05 FD            	JMP	CONPOS			; Set sign of result
    5020/    9FED :                     ;
    5021/    9FED :                     ABS:
    5022/    9FED : E8 C8 FF            	CALL	TSTSGN			; Test sign of FPREG
    5023/    9FF0 : 78 01               	JS	INVSGN
    5024/    9FF2 : C3                  	RET				; Return if positive
    5025/    9FF3 :                     INVSGN:
    5026/    9FF3 : BB 30 09            	MOV	BX,FPREG+2		; Point to MSB
    5027/    9FF6 : 8A 07               	MOV	AL,[BX]			; Get sign of mantissa
    5028/    9FF8 : 34 80               	XOR	AL,80H			; Invert sign of mantissa
    5029/    9FFA : 88 07               	MOV	[BX],AL			; Re-save sign of mantissa
    5030/    9FFC : C3                  	RET
    5031/    9FFD :                     ;
    5032/    9FFD :                     STAKFP:
    5033/    9FFD : 87 DA               	XCHG	BX,DX			; Save code string address
    5034/    9FFF : 8B 1E 2E 09         	MOV	BX,[FPREG]		; LSB,NLSB of FPREG
    5035/    A003 : 8B EC               	MOV	BP,SP
    5036/    A005 : 87 5E 00            	XCHG	[BP],BX			; Stack them,get return
    5037/    A008 : 53                  	PUSH	BX			; Re-save return
    5038/    A009 : 8B 1E 30 09         	MOV	BX,[FPREG+2]		; MSB and exponent of FPREG
    5039/    A00D : 8B EC               	MOV	BP,SP
    5040/    A00F : 87 5E 00            	XCHG	[BP],BX			; Stack them,get return
    5041/    A012 : 53                  	PUSH	BX			; Re-save return
    5042/    A013 : 87 DA               	XCHG	BX,DX			; Restore code string address
    5043/    A015 : C3                  	RET
    5044/    A016 :                     ;
    5045/    A016 :                     PHLTFP:
    5046/    A016 : E8 12 00            	CALL	LOADFP			; Number at HL to BCDE
    5047/    A019 :                     FPBCDE:
    5048/    A019 : 87 DA               	XCHG	BX,DX			; Save code string address
    5049/    A01B : 89 1E 2E 09         	MOV	[FPREG],BX		; Save LSB,NLSB of number
    5050/    A01F : 8B D9               	MOV	BX,CX			; Exponent of number
    5051/    A021 : 89 1E 30 09         	MOV	[FPREG+2],BX		; Save MSB and exponent
    5052/    A025 : 87 DA               	XCHG	BX,DX			; Restore code string address
    5053/    A027 : C3                  	RET
    5054/    A028 :                     ;
    5055/    A028 :                     BCDEFP:
    5056/    A028 : BB 2E 09            	MOV	BX,FPREG		; Point to FPREG
    5057/    A02B :                     LOADFP:
    5058/    A02B : 8A 17               	MOV	DL,[BX]			; Get LSB of number
    5059/    A02D : 9F                  	LAHF
    5060/    A02E : 43                  	INC	BX
    5061/    A02F :                     ;	SAHF
    5062/    A02F : 8A 37               	MOV	DH,[BX]			; Get NMSB of number
    5063/    A031 :                     ;	LAHF
    5064/    A031 : 43                  	INC	BX
    5065/    A032 :                     ;	SAHF
    5066/    A032 : 8A 0F               	MOV	CL,[BX]			; Get MSB of number
    5067/    A034 :                     ;	LAHF
    5068/    A034 : 43                  	INC	BX
    5069/    A035 : 9E                  	SAHF
    5070/    A036 : 8A 2F               	MOV	CH,[BX]			; Get exponent of number
    5071/    A038 :                     INCHL:
    5072/    A038 : 9F                  	LAHF
    5073/    A039 : 43                  	INC	BX			; Used for conditional "INC HL"
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 86 - 2023/09/19 18時02分31秒


    5074/    A03A : 9E                  	SAHF
    5075/    A03B : C3                  	RET
    5076/    A03C :                     ;
    5077/    A03C :                     FPTHL:
    5078/    A03C : BA 2E 09            	MOV	DX,FPREG		; Point to FPREG
    5079/    A03F :                     DETHL4:
    5080/    A03F : B5 04               	MOV	CH,4			; 4 bytes to move
    5081/    A041 :                     DETHLB:
    5082/    A041 : 87 DA               	XCHG	BX,DX
    5083/    A043 : 8A 07               	MOV	AL,[BX]			; Get source
    5084/    A045 : 87 DA               	XCHG	BX,DX
    5085/    A047 : 88 07               	MOV	[BX],AL			; Save destination
    5086/    A049 :                     ;	LAHF
    5087/    A049 : 42                  	INC	DX			; Next source
    5088/    A04A :                     ;	SAHF
    5089/    A04A :                     ;	LAHF
    5090/    A04A : 43                  	INC	BX			; Next destination
    5091/    A04B :                     ;	SAHF
    5092/    A04B : FE CD               	DEC	CH			; Count bytes
    5093/    A04D : 75 F2               	JNZ	DETHLB			; Loop if more
    5094/    A04F : C3                  	RET
    5095/    A050 :                     ;
    5096/    A050 :                     SIGNS:
    5097/    A050 : BB 30 09            	MOV	BX,FPREG+2		; Point to MSB of FPREG
    5098/    A053 : 8A 07               	MOV	AL,[BX]			; Get MSB
    5099/    A055 : D0 C0               	ROL	AL,1			; Old sign to carry
    5100/    A057 : F9                  	STC				; Set MSBit
    5101/    A058 : D0 D8               	RCR	AL,1			; Set MSBit of MSB
    5102/    A05A : 88 07               	MOV	[BX],AL			; Save new MSB
    5103/    A05C : F5                  	CMC				; Complement sign
    5104/    A05D : D0 D8               	RCR	AL,1			; Old sign to carry
    5105/    A05F : 9F                  	LAHF
    5106/    A060 : 43                  	INC	BX
    5107/    A061 :                     ;	SAHF
    5108/    A061 :                     ;	LAHF
    5109/    A061 : 43                  	INC	BX
    5110/    A062 : 9E                  	SAHF
    5111/    A063 : 88 07               	MOV	[BX],AL			; Set sign of result
    5112/    A065 : 8A C1               	MOV	AL,CL			; Get MSB
    5113/    A067 : D0 C0               	ROL	AL,1			; Old sign to carry
    5114/    A069 : F9                  	STC				; Set MSBit
    5115/    A06A : D0 D8               	RCR	AL,1			; Set MSBit of MSB
    5116/    A06C : 8A C8               	MOV	CL,AL			; Save MSB
    5117/    A06E : D0 D8               	RCR	AL,1
    5118/    A070 : 32 07               	XOR	AL,[BX]			; New sign of result
    5119/    A072 : C3                  	RET
    5120/    A073 :                     ;
    5121/    A073 :                     CMPNUM:
    5122/    A073 : 8A C5               	MOV	AL,CH			; Get exponent of numbe
    5123/    A075 : 0A C0               	OR	AL,AL
    5124/    A077 : 75 03               	JNZ	CMPNUM1			; Zero - Test sign of FPREG
    5125/    A079 : E9 3C FF            	JMP	TSTSGN
    5126/    A07C :                     CMPNUM1:
    5127/    A07C : BB C7 9F            	MOV	BX,RETREL		; Return relation routine
    5128/    A07F : 53                  	PUSH	BX			; Save for return
    5129/    A080 : E8 35 FF            	CALL	TSTSGN			; Test sign of FPREG
    5130/    A083 : 8A C1               	MOV	AL,CL			; Get MSB of number
    5131/    A085 : 75 01               	JNZ	CMPNUM2
    5132/    A087 : C3                  	RET				; FPREG zero - Number's MSB
    5133/    A088 :                     CMPNUM2:
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 87 - 2023/09/19 18時02分31秒


    5134/    A088 : BB 30 09            	MOV	BX,FPREG+2		; MSB of FPREG
    5135/    A08B : 32 07               	XOR	AL,[BX]			; Combine signs
    5136/    A08D : 8A C1               	MOV	AL,CL			; Get MSB of number
    5137/    A08F : 79 01               	JNS	CMPNUM3
    5138/    A091 : C3                  	RET				; Exit if signs different
    5139/    A092 :                     CMPNUM3:
    5140/    A092 : E8 05 00            	CALL	CMPFP			; Compare FP numbers
    5141/    A095 : D0 D8               	RCR	AL,1			; Get carry to sign
    5142/    A097 : 32 C1               	XOR	AL,CL			; Combine with MSB of number
    5143/    A099 : C3                  	RET
    5144/    A09A :                     ;
    5145/    A09A :                     CMPFP:
    5146/    A09A : 9F                  	LAHF
    5147/    A09B : 43                  	INC	BX			; Point to exponent
    5148/    A09C : 9E                  	SAHF
    5149/    A09D : 8A C5               	MOV	AL,CH			; Get exponent
    5150/    A09F : 3A 07               	CMP	AL,[BX]			; Compare exponents
    5151/    A0A1 : 74 01               	JZ	CMPFP1
    5152/    A0A3 : C3                  	RET				; Different
    5153/    A0A4 :                     CMPFP1:
    5154/    A0A4 : 9F                  	LAHF
    5155/    A0A5 : 4B                  	DEC	BX			; Point to MBS
    5156/    A0A6 : 9E                  	SAHF
    5157/    A0A7 : 8A C1               	MOV	AL,CL			; Get MSB
    5158/    A0A9 : 3A 07               	CMP	AL,[BX]			; Compare MSBs
    5159/    A0AB : 74 01               	JZ	CMPFP2
    5160/    A0AD : C3                  	RET				; Different
    5161/    A0AE :                     CMPFP2:
    5162/    A0AE : 9F                  	LAHF
    5163/    A0AF : 4B                  	DEC	BX			; Point to NMSB
    5164/    A0B0 : 9E                  	SAHF
    5165/    A0B1 : 8A C6               	MOV	AL,DH			; Get NMSB
    5166/    A0B3 : 3A 07               	CMP	AL,[BX]			; Compare NMSBs
    5167/    A0B5 : 74 01               	JZ	CMPFP3
    5168/    A0B7 : C3                  	RET				; Different
    5169/    A0B8 :                     CMPFP3:
    5170/    A0B8 : 9F                  	LAHF
    5171/    A0B9 : 4B                  	DEC	BX			; Point to LSB
    5172/    A0BA : 9E                  	SAHF
    5173/    A0BB : 8A C2               	MOV	AL,DL			; Get LSB
    5174/    A0BD : 2A 07               	SUB	AL,[BX]			; Compare LSBs
    5175/    A0BF : 74 01               	JZ	CMPFP4
    5176/    A0C1 : C3                  	RET				; Different
    5177/    A0C2 :                     CMPFP4:
    5178/    A0C2 : 5B                  	POP	BX			; Drop RETurn
    5179/    A0C3 : 5B                  	POP	BX			; Drop another RETurn
    5180/    A0C4 : C3                  	RET
    5181/    A0C5 :                     ;
    5182/    A0C5 :                     FPINT:
    5183/    A0C5 : 8A E8               	MOV	CH,AL			; <- Move
    5184/    A0C7 : 8A C8               	MOV	CL,AL			; <- exponent
    5185/    A0C9 : 8A F0               	MOV	DH,AL			; <- to all
    5186/    A0CB : 8A D0               	MOV	DL,AL			; <- bits
    5187/    A0CD : 0A C0               	OR	AL,AL			; Test exponent
    5188/    A0CF : 75 01               	JNZ	FPINT1
    5189/    A0D1 : C3                  	RET				; Zero - Return zero
    5190/    A0D2 :                     FPINT1:
    5191/    A0D2 : 53                  	PUSH	BX			; Save pointer to number
    5192/    A0D3 : E8 52 FF            	CALL	BCDEFP			; Move FPREG to BCDE
    5193/    A0D6 : E8 77 FF            	CALL	SIGNS			; Set MSBs & sign of result
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 88 - 2023/09/19 18時02分31秒


    5194/    A0D9 : 32 07               	XOR	AL,[BX]			; Combine with sign of FPREG
    5195/    A0DB : 8A F8               	MOV	BH,AL			; Save combined signs
    5196/    A0DD : 79 03               	JNS	FPINT2
    5197/    A0DF : E8 19 00            	CALL	DCBCDE			; Negative - Decrement BCDE
    5198/    A0E2 :                     FPINT2:
    5199/    A0E2 : B0 98               	MOV	AL,80H+24		; 24 bits
    5200/    A0E4 : 2A C5               	SUB	AL,CH			; Bits to shift
    5201/    A0E6 : E8 CC FC            	CALL	SCALE			; Shift BCDE
    5202/    A0E9 : 8A C7               	MOV	AL,BH			; Get combined sign
    5203/    A0EB : D0 D0               	RCL	AL,1			; Sign to carry
    5204/    A0ED : 73 03               	JNC	FPINT3
    5205/    A0EF : E8 6D FC            	CALL	FPROND			; Negative - Round number up
    5206/    A0F2 :                     FPINT3:
    5207/    A0F2 : B5 00               	MOV	CH,0			; Zero exponent
    5208/    A0F4 : 73 03               	JNC	FPINT4
    5209/    A0F6 : E8 98 FC            	CALL    COMPL			; If negative make positive
    5210/    A0F9 :                     FPINT4:
    5211/    A0F9 : 5B                  	POP	BX			; Restore pointer to number
    5212/    A0FA : C3                  	RET
    5213/    A0FB :                     ;
    5214/    A0FB :                     DCBCDE:
    5215/    A0FB :                     ;	LAHF
    5216/    A0FB : 4A                  	DEC	DX			; Decrement BCDE
    5217/    A0FC :                     ;	SAHF
    5218/    A0FC : 8A C6               	MOV	AL,DH			; Test LSBs
    5219/    A0FE : 22 C2               	AND	AL,DL
    5220/    A100 : FE C0               	INC	AL
    5221/    A102 : 74 01               	JZ	DCBCDE1
    5222/    A104 : C3                  	RET				; Exit if LSBs not FFFF
    5223/    A105 :                     DCBCDE1:
    5224/    A105 : 9F                  	LAHF
    5225/    A106 : 49                  	DEC	CX			; Decrement MSBs
    5226/    A107 : 9E                  	SAHF
    5227/    A108 : C3                  	RET
    5228/    A109 :                     ;
    5229/    A109 :                     INT:
    5230/    A109 : BB 31 09            	MOV	BX,FPEXP		; Point to exponent
    5231/    A10C : 8A 07               	MOV	AL,[BX]			; Get exponent
    5232/    A10E : 3C 98               	CMP	AL,80H+24		; Integer accuracy only?
    5233/    A110 : A0 2E 09            	MOV	AL,[FPREG]		; Get LSB
    5234/    A113 : 72 01               	JC	INT1
    5235/    A115 : C3                  	RET				; Yes - Already integer
    5236/    A116 :                     INT1:
    5237/    A116 : 8A 07               	MOV	AL,[BX]			; Get exponent
    5238/    A118 : E8 AA FF            	CALL	FPINT			; F.P to integer
    5239/    A11B : C6 07 98            	MOV	BYTE PTR [BX],80H+24	; Save 24 bit integer
    5240/    A11E : 8A C2               	MOV	AL,DL			; Get LSB of number
    5241/    A120 : 9F                  	LAHF
    5242/    A121 : 86 E0               	XCHG	AH,AL
    5243/    A123 : 50                  	PUSH	AX			; Save LSB
    5244/    A124 : 86 E0               	XCHG	AH,AL
    5245/    A126 : 8A C1               	MOV	AL,CL			; Get MSB of number
    5246/    A128 : D0 D0               	RCL	AL,1			; Sign to carry
    5247/    A12A : E8 C5 FB            	CALL	CONPOS			; Set sign of result
    5248/    A12D : 58                  	POP	AX			; Restore LSB of number
    5249/    A12E : 86 E0               	XCHG	AH,AL
    5250/    A130 : 9E                  	SAHF
    5251/    A131 : C3                  	RET
    5252/    A132 :                     ;
    5253/    A132 :                     MLDEBC:
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 89 - 2023/09/19 18時02分31秒


    5254/    A132 : BB 00 00            	MOV	BX,0			; Clear partial product
    5255/    A135 : 8A C5               	MOV	AL,CH			; Test multiplier
    5256/    A137 : 0A C1               	OR	AL,CL
    5257/    A139 : 75 01               	JNZ	MLDEBC1
    5258/    A13B : C3                  	RET				; Return zero if zero
    5259/    A13C :                     MLDEBC1:
    5260/    A13C : B0 10               	MOV	AL,16			; 16 bits
    5261/    A13E :                     MLDBLP:
    5262/    A13E : 03 DB               	ADD	BX,BX			; Shift P.P left
    5263/    A140 : 73 03               	JNC	MLDBLP1
    5264/    A142 : E9 BB F4            	JMP	BSERR			; ?BS Error if overflow
    5265/    A145 :                     MLDBLP1:
    5266/    A145 : 87 DA               	XCHG	BX,DX
    5267/    A147 : 03 DB               	ADD	BX,BX			; Shift multiplier left
    5268/    A149 : 87 DA               	XCHG	BX,DX
    5269/    A14B : 73 07               	JNC	NOMLAD			; Bit was zero - No add
    5270/    A14D : 03 D9               	ADD	BX,CX			; Add multiplicand
    5271/    A14F : 73 03               	JNC	NOMLAD
    5272/    A151 : E9 AC F4            	JMP	BSERR			; ?BS Error if overflow
    5273/    A154 :                     NOMLAD:
    5274/    A154 : FE C8               	DEC	AL			; Count bits
    5275/    A156 : 75 E6               	JNZ	MLDBLP			; More
    5276/    A158 : C3                  	RET
    5277/    A159 :                     ;
    5278/    A159 :                     ASCTFP:
    5279/    A159 : 3C 2D               	CMP	AL,'-'			; Negative?
    5280/    A15B : 9F                  	LAHF
    5281/    A15C : 86 E0               	XCHG	AH,AL
    5282/    A15E : 50                  	PUSH	AX			; Save it and flags
    5283/    A15F : 86 E0               	XCHG	AH,AL
    5284/    A161 : 74 07               	JZ	CNVNUM			; Yes - Convert number
    5285/    A163 : 3C 2B               	CMP	AL,'+'			; Positive?
    5286/    A165 : 74 03               	JZ	CNVNUM			; Yes - Convert number
    5287/    A167 : 9F                  	LAHF
    5288/    A168 : 4B                  	DEC	BX			; DEC 'cos GETCHR INCs
    5289/    A169 : 9E                  	SAHF
    5290/    A16A :                     CNVNUM:
    5291/    A16A : E8 A8 FB            	CALL	RESZER			; Set result to zero
    5292/    A16D : 8A E8               	MOV	CH,AL			; Digits after point counter
    5293/    A16F : 8A F0               	MOV	DH,AL			; Sign of exponent
    5294/    A171 : 8A D0               	MOV	DL,AL			; Exponent of ten
    5295/    A173 : F6 D0               	NOT	AL
    5296/    A175 : 8A C8               	MOV	CL,AL			; Before or after point flag
    5297/    A177 :                     MANLP:
    5298/    A177 : E8 60 EA            	CALL	GETCHR			; Get next character
    5299/    A17A : 72 5E               	JC	ADDIG			; Digit - Add to number
    5300/    A17C : 3C 2E               	CMP	AL,'.'
    5301/    A17E : 74 1B               	JZ	DPOINT			; '.' - Flag point
    5302/    A180 : 3C 45               	CMP	AL,'E'
    5303/    A182 : 75 1B               	JNZ	CONEXP			; Not 'E' - Scale number
    5304/    A184 : E8 53 EA            	CALL	GETCHR			; Get next character
    5305/    A187 : E8 BF F1            	CALL	SGNEXP			; Get sign of exponent
    5306/    A18A :                     EXPLP:
    5307/    A18A : E8 4D EA            	CALL	GETCHR			; Get next character
    5308/    A18D : 72 73               	JC	EDIGIT			; Digit - Add to exponent
    5309/    A18F : FE C6               	INC	DH			; Is sign negative?
    5310/    A191 : 75 0C               	JNZ	CONEXP			; No - Scale number
    5311/    A193 : 32 C0               	XOR	AL,AL
    5312/    A195 : 2A C2               	SUB	AL,DL			; Negate exponent
    5313/    A197 : 8A D0               	MOV	DL,AL			; And re-save it
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 90 - 2023/09/19 18時02分31秒


    5314/    A199 : FE C1               	INC	CL			; Flag end of number
    5315/    A19B :                     DPOINT:
    5316/    A19B : FE C1               	INC	CL			; Flag point passed
    5317/    A19D : 74 D8               	JZ	MANLP			; Zero - Get another digit
    5318/    A19F :                     CONEXP:
    5319/    A19F : 53                  	PUSH	BX			; Save code string address
    5320/    A1A0 : 8A C2               	MOV	AL,DL			; Get exponent
    5321/    A1A2 : 2A C5               	SUB	AL,CH			; Subtract digits after point
    5322/    A1A4 :                     SCALMI:
    5323/    A1A4 : 78 03               	JS	SCALMI1
    5324/    A1A6 : E8 20 00            	CALL	SCALPL			; Positive - Multiply number
    5325/    A1A9 :                     SCALMI1:
    5326/    A1A9 : 79 0F               	JNS	ENDCON			; Positive - All done
    5327/    A1AB : 9F                  	LAHF
    5328/    A1AC : 86 E0               	XCHG	AH,AL
    5329/    A1AE : 50                  	PUSH	AX			; Save number of times to /10
    5330/    A1AF : 86 E0               	XCHG	AH,AL
    5331/    A1B1 : E8 09 FD            	CALL	DIV10			; Divide by 10
    5332/    A1B4 : 58                  	POP	AX			; Restore count
    5333/    A1B5 : 86 E0               	XCHG	AH,AL
    5334/    A1B7 : 9E                  	SAHF
    5335/    A1B8 : FE C0               	INC	AL			; Count divides
    5336/    A1BA :                     ;
    5337/    A1BA :                     ENDCON:
    5338/    A1BA : 75 E8               	JNZ	SCALMI			; More to do
    5339/    A1BC : 5A                  	POP	DX			; Restore code string address
    5340/    A1BD : 58                  	POP	AX			; Restore sign of number
    5341/    A1BE : 86 E0               	XCHG	AH,AL
    5342/    A1C0 : 9E                  	SAHF
    5343/    A1C1 : 75 03               	JNZ	ENDCON1
    5344/    A1C3 : E8 2D FE            	CALL	INVSGN			; Negative - Negate number
    5345/    A1C6 :                     ENDCON1:
    5346/    A1C6 : 87 DA               	XCHG	BX,DX			; Code string address to HL
    5347/    A1C8 : C3                  	RET
    5348/    A1C9 :                     ;
    5349/    A1C9 :                     SCALPL:
    5350/    A1C9 : 75 01               	JNZ	MULTEN
    5351/    A1CB : C3                  	RET				; Exit if no scaling needed
    5352/    A1CC :                     MULTEN:
    5353/    A1CC :                     ;	LAHF
    5354/    A1CC : 86 E0               	XCHG	AH,AL
    5355/    A1CE : 50                  	PUSH	AX			; Save count
    5356/    A1CF : 86 E0               	XCHG	AH,AL
    5357/    A1D1 : E8 C3 FD            	CALL	MLSP10			; Multiply number by 10
    5358/    A1D4 : 58                  	POP	AX			; Restore count
    5359/    A1D5 : 86 E0               	XCHG	AH,AL
    5360/    A1D7 :                     ;	SAHF
    5361/    A1D7 : FE C8               	DEC	AL			; Count multiplies
    5362/    A1D9 : C3                  	RET
    5363/    A1DA :                     ;
    5364/    A1DA :                     ADDIG:
    5365/    A1DA : 52                  	PUSH	DX			; Save sign of exponent
    5366/    A1DB : 8A F0               	MOV	DH,AL			; Save digit
    5367/    A1DD : 8A C5               	MOV	AL,CH			; Get digits after point
    5368/    A1DF : 12 C1               	ADC	AL,CL			; Add one if after point
    5369/    A1E1 : 8A E8               	MOV	CH,AL			; Re-save counter
    5370/    A1E3 : 51                  	PUSH	CX			; Save point flags
    5371/    A1E4 : 53                  	PUSH	BX			; Save code string address
    5372/    A1E5 : 52                  	PUSH	DX			; Save digit
    5373/    A1E6 : E8 AE FD            	CALL	MLSP10			; Multiply number by 10
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 91 - 2023/09/19 18時02分31秒


    5374/    A1E9 : 58                  	POP	AX			; Restore digit
    5375/    A1EA : 86 E0               	XCHG	AH,AL
    5376/    A1EC : 9E                  	SAHF
    5377/    A1ED : 2C 30               	SUB	AL,'0'			; Make it absolute
    5378/    A1EF : E8 05 00            	CALL	RSCALE			; Re-scale number
    5379/    A1F2 : 5B                  	POP	BX			; Restore code string address
    5380/    A1F3 : 59                  	POP	CX			; Restore point flags
    5381/    A1F4 : 5A                  	POP	DX			; Restore sign of exponent
    5382/    A1F5 : EB 80               	JMP	MANLP			; Get another digit
    5383/    A1F7 :                     ;
    5384/    A1F7 :                     RSCALE:
    5385/    A1F7 : E8 03 FE            	CALL	STAKFP			; Put number on stack
    5386/    A1FA : E8 D9 FD            	CALL	FLGREL			; Digit to add to FPREG
    5387/    A1FD :                     PADD:
    5388/    A1FD : 59                  	POP	CX			; Restore number
    5389/    A1FE : 5A                  	POP	DX
    5390/    A1FF : E9 76 FA            	JMP	FPADD			; Add BCDE to FPREG and return
    5391/    A202 :                     ;
    5392/    A202 :                     EDIGIT:
    5393/    A202 : 8A C2               	MOV	AL,DL			; Get digit
    5394/    A204 : D0 C0               	ROL	AL,1			; Times 2
    5395/    A206 : D0 C0               	ROL	AL,1			; Times 4
    5396/    A208 : 02 C2               	ADD	AL,DL			; Times 5
    5397/    A20A : D0 C0               	ROL	AL,1			; Times 10
    5398/    A20C : 02 07               	ADD	AL,[BX]			; Add next digit
    5399/    A20E : 2C 30               	SUB	AL,'0'			; Make it absolute
    5400/    A210 : 8A D0               	MOV	DL,AL			; Save new digit
    5401/    A212 : E9 75 FF            	JMP	EXPLP			; Look for another digit
    5402/    A215 :                     ;
    5403/    A215 :                     LINEIN:
    5404/    A215 : 53                  	PUSH	BX			; Save code string address
    5405/    A216 : BB 82 85            	MOV	BX,INMSG		; Output " in "
    5406/    A219 : E8 89 F6            	CALL	PRS			; Output string at HL
    5407/    A21C : 5B                  	POP	BX			; Restore code string address
    5408/    A21D :                     PRNTHL:
    5409/    A21D : 87 DA               	XCHG	BX,DX			; Code string address to DE
    5410/    A21F : 32 C0               	XOR	AL,AL
    5411/    A221 : B5 98               	MOV	CH,80H+24		; 24 bits
    5412/    A223 : E8 B5 FD            	CALL	RETINT			; Return the integer
    5413/    A226 : BB A2 98            	MOV	BX,PRNUMS		; Print number string
    5414/    A229 : 53                  	PUSH	BX			; Save for return
    5415/    A22A :                     NUMASC:
    5416/    A22A : BB 33 09            	MOV	BX,PBUFF		; Convert number to ASCII
    5417/    A22D : 53                  	PUSH	BX			; Save for return
    5418/    A22E : E8 87 FD            	CALL	TSTSGN			; Test sign of FPREG
    5419/    A231 : C6 07 20            	MOV	BYTE PTR [BX],' '	; Space at start
    5420/    A234 : 79 03               	JNS	SPCFST			; Positive - Space to start
    5421/    A236 : C6 07 2D            	MOV	BYTE PTR [BX],'-'	; '-' sign at start
    5422/    A239 :                     SPCFST:
    5423/    A239 : 9F                  	LAHF
    5424/    A23A : 43                  	INC	BX			; First byte of number
    5425/    A23B : 9E                  	SAHF
    5426/    A23C : C6 07 30            	MOV	BYTE PTR [BX],'0'	; '0' if zero
    5427/    A23F : 75 03               	JNZ	SPCFST1			; Return '0' if zero
    5428/    A241 : E9 01 01            	JMP	JSTZER
    5429/    A244 :                     SPCFST1:
    5430/    A244 : 53                  	PUSH	BX			; Save buffer address
    5431/    A245 : 79 03               	JNS	SPCFST2
    5432/    A247 : E8 A9 FD            	CALL	INVSGN			; Negate FPREG if negative
    5433/    A24A :                     SPCFST2:
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 92 - 2023/09/19 18時02分31秒


    5434/    A24A : 32 C0               	XOR	AL,AL			; Zero A
    5435/    A24C : 9F                  	LAHF
    5436/    A24D : 86 E0               	XCHG	AH,AL
    5437/    A24F : 50                  	PUSH	AX			; Save it
    5438/    A250 : 86 E0               	XCHG	AH,AL
    5439/    A252 : E8 FC 00            	CALL	RNGTST			; Test number is in range
    5440/    A255 :                     SIXDIG:
    5441/    A255 : B9 43 91            	MOV	CX,9143H		; BCDE - 99999.9
    5442/    A258 : BA F8 4F            	MOV	DX,4FF8H
    5443/    A25B : E8 15 FE            	CALL	CMPNUM			; Compare numbers
    5444/    A25E : 0A C0               	OR	AL,AL
    5445/    A260 : 7B 21               	JPO	INRNG			; > 99999.9 - Sort it out	JP PO,INGNG
    5446/    A262 : 58                  	POP	AX			; Restore count
    5447/    A263 : 86 E0               	XCHG	AH,AL
    5448/    A265 : 9E                  	SAHF
    5449/    A266 : E8 63 FF            	CALL	MULTEN			; Multiply by ten
    5450/    A269 : 9F                  	LAHF
    5451/    A26A : 86 E0               	XCHG	AH,AL
    5452/    A26C : 50                  	PUSH	AX			; Re-save count
    5453/    A26D : 86 E0               	XCHG	AH,AL
    5454/    A26F : EB E4               	JMP	SIXDIG			; Test it again
    5455/    A271 :                     ;
    5456/    A271 :                     GTSIXD:
    5457/    A271 : E8 49 FC            	CALL	DIV10			; Divide by 10
    5458/    A274 : 58                  	POP	AX			; Get count
    5459/    A275 : 86 E0               	XCHG	AH,AL
    5460/    A277 : 9E                  	SAHF
    5461/    A278 : FE C0               	INC	AL			; Count divides
    5462/    A27A : 9F                  	LAHF
    5463/    A27B : 86 E0               	XCHG	AH,AL
    5464/    A27D : 50                  	PUSH	AX			; Re-save count
    5465/    A27E : 86 E0               	XCHG	AH,AL
    5466/    A280 : E8 CE 00            	CALL	RNGTST			; Test number is in range
    5467/    A283 :                     INRNG:
    5468/    A283 : E8 E0 F9            	CALL	ROUND			; Add 0.5 to FPREG
    5469/    A286 : FE C0               	INC	AL
    5470/    A288 : E8 3A FE            	CALL	FPINT			; F.P to integer
    5471/    A28B : E8 8B FD            	CALL	FPBCDE			; Move BCDE to FPREG
    5472/    A28E : B9 06 03            	MOV	CX,0306H		; 1E+06 to 1E-03 range
    5473/    A291 : 58                  	POP	AX			; Restore count
    5474/    A292 : 86 E0               	XCHG	AH,AL
    5475/    A294 : 9E                  	SAHF
    5476/    A295 : 02 C1               	ADD	AL,CL			; 6 digits before point
    5477/    A297 : FE C0               	INC	AL			; Add one
    5478/    A299 : 78 0A               	JS	MAKNUM			; Do it in 'E' form if < 1E-02
    5479/    A29B : 3C 08               	CMP	AL,6+1+1		; More than 999999 ?
    5480/    A29D : 73 06               	JNC	MAKNUM			; Yes - Do it in 'E' form
    5481/    A29F : FE C0               	INC	AL			; Adjust for exponent
    5482/    A2A1 : 8A E8               	MOV	CH,AL			; Exponent of number
    5483/    A2A3 : B0 02               	MOV	AL,2			; Make it zero after
    5484/    A2A5 :                     ;
    5485/    A2A5 :                     MAKNUM:
    5486/    A2A5 : FE C8               	DEC	AL			; Adjust for digits to do
    5487/    A2A7 : FE C8               	DEC	AL
    5488/    A2A9 : 5B                  	POP	BX			; Restore buffer addres
    5489/    A2AA : 9F                  	LAHF
    5490/    A2AB : 86 E0               	XCHG	AH,AL
    5491/    A2AD : 50                  	PUSH	AX			; Save count
    5492/    A2AE : 86 E0               	XCHG	AH,AL
    5493/    A2B0 : BA 68 A3            	MOV	DX,POWERS		; Powers of ten
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 93 - 2023/09/19 18時02分31秒


    5494/    A2B3 : FE CD               	DEC	CH			; Count digits before point
    5495/    A2B5 : 75 0C               	JNZ	DIGTXT			; Not zero - Do number
    5496/    A2B7 : C6 07 2E            	MOV	BYTE PTR [BX],'.'	; Save point
    5497/    A2BA : 9F                  	LAHF
    5498/    A2BB : 43                  	INC	BX			; Move on
    5499/    A2BC : 9E                  	SAHF
    5500/    A2BD : C6 07 30            	MOV	BYTE PTR [BX],'0'	; Save zero
    5501/    A2C0 : 9F                  	LAHF
    5502/    A2C1 : 43                  	INC	BX			; Move on
    5503/    A2C2 : 9E                  	SAHF
    5504/    A2C3 :                     DIGTXT:
    5505/    A2C3 : FE CD               	DEC	CH			; Count digits before point
    5506/    A2C5 : C6 07 2E            	MOV	BYTE PTR [BX],'.'	; Save point in case
    5507/    A2C8 : 75 03               	JNZ	DIGTXT1
    5508/    A2CA : E8 6B FD            	CALL	INCHL			; Last digit - move on
    5509/    A2CD :                     DIGTXT1:
    5510/    A2CD : 51                  	PUSH	CX			; Save digits before point
    5511/    A2CE : 53                  	PUSH	BX			; Save buffer address
    5512/    A2CF : 52                  	PUSH	DX			; Save powers of ten
    5513/    A2D0 : E8 55 FD            	CALL	BCDEFP			; Move FPREG to BCDE
    5514/    A2D3 : 5B                  	POP	BX			; Powers of ten table
    5515/    A2D4 : B5 2F               	MOV	CH,'0'-1		; ASCII '0' - 1
    5516/    A2D6 :                     TRYAGN:
    5517/    A2D6 : FE C5               	INC	CH			; Count subtractions
    5518/    A2D8 : 8A C2               	MOV	AL,DL			; Get LSB
    5519/    A2DA : 2A 07               	SUB	AL,[BX]			; Subtract LSB
    5520/    A2DC : 8A D0               	MOV	DL,AL			; Save LSB
    5521/    A2DE : 9F                  	LAHF
    5522/    A2DF : 43                  	INC	BX
    5523/    A2E0 : 9E                  	SAHF
    5524/    A2E1 : 8A C6               	MOV	AL,DH			; Get NMSB
    5525/    A2E3 : 1A 07               	SBB	AL,[BX]			; Subtract NMSB
    5526/    A2E5 : 8A F0               	MOV	DH,AL			; Save NMSB
    5527/    A2E7 : 9F                  	LAHF
    5528/    A2E8 : 43                  	INC	BX
    5529/    A2E9 : 9E                  	SAHF
    5530/    A2EA : 8A C1               	MOV	AL,CL			; Get MSB
    5531/    A2EC : 1A 07               	SBB	AL,[BX]			; Subtract MSB
    5532/    A2EE : 8A C8               	MOV	CL,AL			; Save MSB
    5533/    A2F0 : 9F                  	LAHF
    5534/    A2F1 : 4B                  	DEC	BX			; Point back to start
    5535/    A2F2 :                     ;	SAHF
    5536/    A2F2 :                     ;	LAHF
    5537/    A2F2 : 4B                  	DEC	BX
    5538/    A2F3 : 9E                  	SAHF
    5539/    A2F4 : 73 E0               	JNC	TRYAGN			; No overflow - Try aga
    5540/    A2F6 : E8 7F FA            	CALL	PLUCDE			; Restore number
    5541/    A2F9 : 9F                  	LAHF
    5542/    A2FA : 43                  	INC	BX
    5543/    A2FB : 9E                  	SAHF				; Start of next number
    5544/    A2FC : E8 1A FD            	CALL	FPBCDE			; Move BCDE to FPREG
    5545/    A2FF : 87 DA               	XCHG	BX,DX			; Save point in table
    5546/    A301 : 5B                  	POP	BX			; Restore buffer address
    5547/    A302 : 88 2F               	MOV	[BX],CH			; Save digit in buffer
    5548/    A304 : 9F                  	LAHF
    5549/    A305 : 43                  	INC	BX			; And move on
    5550/    A306 : 9E                  	SAHF
    5551/    A307 : 59                  	POP	CX			; Restore digit count
    5552/    A308 : FE C9               	DEC	CL			; Count digits
    5553/    A30A : 75 B7               	JNZ	DIGTXT			; More - Do them
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 94 - 2023/09/19 18時02分31秒


    5554/    A30C : FE CD               	DEC	CH			; Any decimal part?
    5555/    A30E : 74 0E               	JZ	DOEBIT			; No - Do 'E' bit
    5556/    A310 :                     SUPTLZ:
    5557/    A310 :                     ;	LAHF
    5558/    A310 : 4B                  	DEC	BX			; Move back through buffer
    5559/    A311 :                     ;	SAHF
    5560/    A311 : 8A 07               	MOV	AL,[BX]			; Get character
    5561/    A313 : 3C 30               	CMP	AL,'0'			; '0' character?
    5562/    A315 : 74 F9               	JZ	SUPTLZ			; Yes - Look back for more
    5563/    A317 : 3C 2E               	CMP	AL,'.'			; A decimal point?
    5564/    A319 : 74 03               	JZ	DOEBIT
    5565/    A31B : E8 1A FD            	CALL	INCHL			; Move back over digit
    5566/    A31E :                     ;
    5567/    A31E :                     DOEBIT:
    5568/    A31E : 58                  	POP	AX			; Get 'E' flag
    5569/    A31F : 86 E0               	XCHG	AH,AL
    5570/    A321 : 9E                  	SAHF
    5571/    A322 : 74 29               	JZ	NOENED			; No 'E' needed - End buffer
    5572/    A324 : C6 07 45            	MOV	BYTE PTR [BX],'E'	; Put 'E' in buffer
    5573/    A327 : 9F                  	LAHF
    5574/    A328 : 43                  	INC	BX			; And move on
    5575/    A329 : 9E                  	SAHF
    5576/    A32A : C6 07 2B            	MOV	BYTE PTR [BX],'+'	; Put '+' in buffer
    5577/    A32D : 79 07               	JNS	OUTEXP			; Positive - Output exponent
    5578/    A32F : C6 07 2D            	MOV	BYTE PTR [BX],'-'	; Put '-' in buffer
    5579/    A332 : F6 D0               	NOT	AL			; Negate exponent
    5580/    A334 : FE C0               	INC	AL
    5581/    A336 :                     OUTEXP:
    5582/    A336 : B5 2F               	MOV	CH,'0'-1		; ASCII '0' - 1
    5583/    A338 :                     EXPTEN:
    5584/    A338 : FE C5               	INC	CH			; Count subtractions
    5585/    A33A : 2C 0A               	SUB	AL,10			; Tens digit
    5586/    A33C : 73 FA               	JNC	EXPTEN			; More to do
    5587/    A33E : 04 3A               	ADD	AL,'0'+10		; Restore and make ASCII
    5588/    A340 : 9F                  	LAHF
    5589/    A341 : 43                  	INC	BX
    5590/    A342 : 9E                  	SAHF				; Move on
    5591/    A343 : 88 2F               	MOV	[BX],CH			; Save MSB of exponent
    5592/    A345 :                     JSTZER:
    5593/    A345 : 9F                  	LAHF
    5594/    A346 : 43                  	INC	BX
    5595/    A347 : 9E                  	SAHF
    5596/    A348 : 88 07               	MOV	[BX],AL			; Save LSB of exponent
    5597/    A34A : 9F                  	LAHF
    5598/    A34B : 43                  	INC	BX
    5599/    A34C : 9E                  	SAHF
    5600/    A34D :                     NOENED:
    5601/    A34D : 88 0F               	MOV	[BX],CL			; Mark end of buffer
    5602/    A34F : 5B                  	POP	BX			; Restore code string address
    5603/    A350 : C3                  	RET
    5604/    A351 :                     ;
    5605/    A351 :                     RNGTST:
    5606/    A351 : B9 74 94            	MOV	CX,9474H		; BCDE = 999999.
    5607/    A354 : BA F7 23            	MOV	DX,23F7H
    5608/    A357 : E8 19 FD            	CALL	CMPNUM			; Compare numbers
    5609/    A35A : 0A C0               	OR	AL,AL
    5610/    A35C : 5B                  	POP	BX			; Return address to HL
    5611/    A35D : 7A 03               	JPE	RNGTST1			; Too big - Divide by ten	JP PO,GTSIND
    5612/    A35F : E9 0F FF            	JMP	GTSIXD
    5613/    A362 :                     RNGTST1:
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 95 - 2023/09/19 18時02分31秒


    5614/    A362 : 53                  	PUSH	BX
    5615/    A363 : C3                  	RET
    5616/    A364 :                     ;	JMP	[BX]			; Otherwise return to caller
    5617/    A364 :                     ;
    5618/    A364 :                     HALF:
    5619/    A364 : 00 00 00 80         	DB	00H,00H,00H,80H 	; 0.5
    5620/    A368 :                     ;
    5621/    A368 :                     POWERS:
    5622/    A368 : A0 86 01            	DB	0A0H,086H,001H		; 100000
    5623/    A36B : 10 27 00            	DB	010H,027H,000H		; 10000
    5624/    A36E : E8 03 00            	DB	0E8H,003H,000H		; 1000
    5625/    A371 : 64 00 00            	DB	064H,000H,000H		; 100
    5626/    A374 : 0A 00 00            	DB	00AH,000H,000H		; 10
    5627/    A377 : 01 00 00            	DB	001H,000H,000H		; 1
    5628/    A37A :                     ;
    5629/    A37A :                     NEGAFT:
    5630/    A37A : BB F3 9F            	MOV	BX,INVSGN		; Negate result
    5631/    A37D : 8B EC               	MOV	BP,SP
    5632/    A37F : 87 5E 00            	XCHG	[BP],BX			; To be done after call
    5633/    A382 : 53                  	PUSH	BX
    5634/    A383 : C3                  	RET
    5635/    A384 :                     ;	JMP	[BX]			; Return to caller
    5636/    A384 :                     ;
    5637/    A384 :                     SQR:
    5638/    A384 : E8 76 FC            	CALL	STAKFP			; Put value on stack
    5639/    A387 : BB 64 A3            	MOV	BX,HALF			; Set power to 1/2
    5640/    A38A : E8 89 FC            	CALL	PHLTFP			; Move 1/2 to FPREG
    5641/    A38D :                     ;
    5642/    A38D :                     POWER:
    5643/    A38D : 59                  	POP	CX			; Get base
    5644/    A38E : 5A                  	POP	DX
    5645/    A38F : E8 26 FC            	CALL	TSTSGN			; Test sign of power
    5646/    A392 : 8A C5               	MOV	AL,CH			; Get exponent of base
    5647/    A394 : 74 4E               	JZ	EXP			; Make result 1 if zero
    5648/    A396 : 79 07               	JNS	POWER1			; Positive base - Ok
    5649/    A398 : 0A C0               	OR	AL,AL			; Zero to negative power?
    5650/    A39A : 75 03               	JNZ	POWER1			; Yes - ?/0 Error
    5651/    A39C : E9 6E E2            	JMP	DZERR
    5652/    A39F :                     POWER1:
    5653/    A39F : 0A C0               	OR	AL,AL			; Base zero?
    5654/    A3A1 : 75 03               	JNZ	POWER5			; Yes - Return zero
    5655/    A3A3 : E9 71 F9            	JMP	SAVEXP
    5656/    A3A6 :                     POWER5:
    5657/    A3A6 : 52                  	PUSH	DX			; Save base
    5658/    A3A7 : 51                  	PUSH	CX
    5659/    A3A8 : 8A C1               	MOV	AL,CL			; Get MSB of base
    5660/    A3AA : 0C 7F               	OR	AL,01111111B		; Get sign status
    5661/    A3AC : E8 79 FC            	CALL	BCDEFP			; Move power to BCDE
    5662/    A3AF : 79 15               	JNS	POWER2			; Positive base - Ok
    5663/    A3B1 : 52                  	PUSH	DX			; Save power
    5664/    A3B2 : 51                  	PUSH	CX
    5665/    A3B3 : E8 53 FD            	CALL	INT			; Get integer of power
    5666/    A3B6 : 59                  	POP	CX			; Restore power
    5667/    A3B7 : 5A                  	POP	DX
    5668/    A3B8 : 9F                  	LAHF
    5669/    A3B9 : 86 E0               	XCHG	AH,AL
    5670/    A3BB : 50                  	PUSH	AX			; MSB of base
    5671/    A3BC : 86 E0               	XCHG	AH,AL
    5672/    A3BE : E8 B2 FC            	CALL	CMPNUM			; Power an integer?
    5673/    A3C1 : 5B                  	POP	BX			; Restore MSB of base
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 96 - 2023/09/19 18時02分31秒


    5674/    A3C2 : 8A C7               	MOV	AL,BH			; but don't affect flags
    5675/    A3C4 : D0 D8               	RCR	AL,1			; Exponent odd or even?
    5676/    A3C6 :                     POWER2:
    5677/    A3C6 : 5B                  	POP	BX			; Restore MSB and exponent
    5678/    A3C7 : 89 1E 30 09         	MOV	[FPREG+2],BX		; Save base in FPREG
    5679/    A3CB : 5B                  	POP	BX			; LSBs of base
    5680/    A3CC : 89 1E 2E 09         	MOV	[FPREG],BX		; Save in FPREG
    5681/    A3D0 : 73 03               	JNC	POWER3
    5682/    A3D2 : E8 A5 FF            	CALL	NEGAFT			; Odd power - Negate result
    5683/    A3D5 :                     POWER3:
    5684/    A3D5 : 75 03               	JNZ	POWER4
    5685/    A3D7 : E8 19 FC            	CALL	INVSGN			; Negative base - Negate it
    5686/    A3DA :                     POWER4:
    5687/    A3DA : 52                  	PUSH	DX			; Save power
    5688/    A3DB : 51                  	PUSH	CX
    5689/    A3DC : E8 1C FA            	CALL	LOG			; Get LOG of base
    5690/    A3DF : 59                  	POP	CX			; Restore power
    5691/    A3E0 : 5A                  	POP	DX
    5692/    A3E1 : E8 68 FA            	CALL	FPMULT			; Multiply LOG by power
    5693/    A3E4 :                     ;
    5694/    A3E4 :                     EXP:
    5695/    A3E4 : E8 16 FC            	CALL	STAKFP			; Put value on stack
    5696/    A3E7 : B9 38 81            	MOV	CX,08138H		; BCDE = 1/Ln(2)
    5697/    A3EA : BA 3B AA            	MOV	DX,0AA3BH
    5698/    A3ED : E8 5C FA            	CALL	FPMULT			; Multiply value by 1/L(2)
    5699/    A3F0 : A0 31 09            	MOV	AL,[FPEXP]		; Get exponent
    5700/    A3F3 : 3C 88               	CMP	AL,80H+8		; Is it in range?
    5701/    A3F5 : 72 03               	JC	EXP1			; No - Test for overflow
    5702/    A3F7 : E9 8C FB            	JMP	OVTST1
    5703/    A3FA :                     EXP1:
    5704/    A3FA : E8 0C FD            	CALL	INT			; Get INT of FPREG
    5705/    A3FD : 04 80               	ADD	AL,80H			; For excess 128
    5706/    A3FF : 04 02               	ADD	AL,2			; Exponent > 126?
    5707/    A401 : 73 03               	JNC	EXP2			; Yes - Test for overflow
    5708/    A403 : E9 80 FB            	JMP	OVTST1
    5709/    A406 :                     EXP2:
    5710/    A406 : 9F                  	LAHF
    5711/    A407 : 86 E0               	XCHG	AH,AL
    5712/    A409 : 50                  	PUSH	AX			; Save scaling factor
    5713/    A40A : 86 E0               	XCHG	AH,AL
    5714/    A40C : BB EA 9D            	MOV	BX,UNITY		; Point to 1.
    5715/    A40F : E8 57 F8            	CALL	ADDPHL			; Add 1 to FPREG
    5716/    A412 : E8 2D FA            	CALL	MULLN2			; Multiply by LN(2)
    5717/    A415 : 58                  	POP	AX			; Restore scaling factor
    5718/    A416 : 86 E0               	XCHG	AH,AL
    5719/    A418 : 9E                  	SAHF
    5720/    A419 : 59                  	POP	CX			; Restore exponent
    5721/    A41A : 5A                  	POP	DX
    5722/    A41B : 9F                  	LAHF
    5723/    A41C : 86 E0               	XCHG	AH,AL
    5724/    A41E : 50                  	PUSH	AX			; Save scaling factor
    5725/    A41F : 86 E0               	XCHG	AH,AL
    5726/    A421 : E8 51 F8            	CALL	SUBCDE			; Subtract exponent from FPREG
    5727/    A424 : E8 CC FB            	CALL	INVSGN			; Negate result
    5728/    A427 : BB 36 A4            	MOV	BX,EXPTAB		; Coefficient table
    5729/    A42A : E8 39 00            	CALL	SMSER1			; Sum the series
    5730/    A42D : BA 00 00            	MOV	DX,0			; Zero LSBs
    5731/    A430 : 59                  	POP	CX			; Scaling factor
    5732/    A431 : 8A CE               	MOV	CL,DH			; Zero MSB
    5733/    A433 : E9 16 FA            	JMP	FPMULT			; Scale result to correct value
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 97 - 2023/09/19 18時02分31秒


    5734/    A436 :                     ;
    5735/    A436 :                     EXPTAB:
    5736/    A436 : 08                  	DB	8                  	; Table used by EXP
    5737/    A437 : 40 2E 94 74         	DB	040H,02EH,094H,074H	; -1/7! (-1/504
    5738/    A43B : 70 4F 2E 77         	DB	070H,04FH,02EH,077H	;  1/6! ( 1/720
    5739/    A43F : 6E 02 88 7A         	DB	06EH,002H,088H,07AH	; -1/5! (-1/120
    5740/    A443 : E6 A0 2A 7C         	DB	0E6H,0A0H,02AH,07CH	;  1/4! ( 1/24)
    5741/    A447 : 50 AA AA 7E         	DB	050H,0AAH,0AAH,07EH	; -1/3! (-1/6)
    5742/    A44B : FF FF 7F 7F         	DB	0FFH,0FFH,07FH,07FH	;  1/2! ( 1/2)
    5743/    A44F : 00 00 80 81         	DB	000H,000H,080H,081H	; -1/1! (-1/1)
    5744/    A453 : 00 00 00 81         	DB	000H,000H,000H,081H	;  1/0! ( 1/1)
    5745/    A457 :                     ;
    5746/    A457 :                     SUMSER:
    5747/    A457 : E8 A3 FB            	CALL	STAKFP			; Put FPREG on stack
    5748/    A45A : BA 4A 9E            	MOV	DX,MULT			; Multiply by "X"
    5749/    A45D : 52                  	PUSH	DX			; To be done after
    5750/    A45E : 53                  	PUSH	BX			; Save address of table
    5751/    A45F : E8 C6 FB            	CALL	BCDEFP			; Move FPREG to BCDE
    5752/    A462 : E8 E7 F9            	CALL	FPMULT			; Square the value
    5753/    A465 : 5B                  	POP	BX			; Restore address of table
    5754/    A466 :                     SMSER1:
    5755/    A466 : E8 94 FB            	CALL	STAKFP			; Put value on stack
    5756/    A469 : 8A 07               	MOV	AL,[BX]			; Get number of coefficients
    5757/    A46B : 9F                  	LAHF
    5758/    A46C : 43                  	INC	BX			; Point to start of table
    5759/    A46D : 9E                  	SAHF
    5760/    A46E : E8 A5 FB            	CALL	PHLTFP			; Move coefficient to FPREG
    5761/    A471 : EB 03               	JMP	SUMLP1			; Skip "POP AF"
    5762/    A473 :                     SUMLP:
    5763/    A473 : 58                  	POP	AX			; Restore count
    5764/    A474 : 86 E0               	XCHG	AH,AL
    5765/    A476 :                     ;	SAHF
    5766/    A476 :                     SUMLP1:
    5767/    A476 : 59                  	POP	CX			; Restore number
    5768/    A477 : 5A                  	POP	DX
    5769/    A478 : FE C8               	DEC	AL			; Cont coefficients
    5770/    A47A : 75 01               	JNZ	SUMLP2
    5771/    A47C : C3                  	RET				; All done
    5772/    A47D :                     SUMLP2:
    5773/    A47D : 52                  	PUSH	DX			; Save number
    5774/    A47E : 51                  	PUSH	CX
    5775/    A47F :                     ;	LAHF
    5776/    A47F : 86 E0               	XCHG	AH,AL
    5777/    A481 : 50                  	PUSH	AX			; Save count
    5778/    A482 : 86 E0               	XCHG	AH,AL
    5779/    A484 : 53                  	PUSH	BX			; Save address in table
    5780/    A485 : E8 C4 F9            	CALL	FPMULT			; Multiply FPREG by BCD
    5781/    A488 : 5B                  	POP	BX			; Restore address in table
    5782/    A489 : E8 9F FB            	CALL	LOADFP			; Number at HL to BCDE
    5783/    A48C : 53                  	PUSH	BX			; Save address in table
    5784/    A48D : E8 E8 F7            	CALL	FPADD			; Add coefficient to FPREG
    5785/    A490 : 5B                  	POP	BX			; Restore address in table
    5786/    A491 : EB E0               	JMP	SUMLP			; More coefficients
    5787/    A493 :                     ;
    5788/    A493 :                     RND:
    5789/    A493 : E8 22 FB            	CALL	TSTSGN			; Test sign of FPREG
    5790/    A496 : BB 68 08            	MOV	BX,SEED+2		; Random number seed
    5791/    A499 : 78 71               	JS	RESEED			; Negative - Re-seed
    5792/    A49B : BB 84 08            	MOV	BX,LSTRND		; Last random number
    5793/    A49E : E8 75 FB            	CALL	PHLTFP			; Move last RND to FPREG
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 98 - 2023/09/19 18時02分31秒


    5794/    A4A1 : BB 68 08            	MOV	BX,SEED+2		; Random number seed
    5795/    A4A4 : 75 01               	JNZ	RND0
    5796/    A4A6 : C3                  	RET				; Return if RND(0)
    5797/    A4A7 :                     RND0:
    5798/    A4A7 : 02 07               	ADD	AL,[BX]			; Add (SEED)+2)
    5799/    A4A9 : 24 07               	AND	AL,00000111B		; 0 to 7
    5800/    A4AB : B5 00               	MOV	CH,0
    5801/    A4AD : 88 07               	MOV	[BX],AL			; Re-save seed
    5802/    A4AF :                     ;	LAHF
    5803/    A4AF : 43                  	INC	BX			; Move to coefficient table
    5804/    A4B0 :                     ;	SAHF
    5805/    A4B0 : 02 C0               	ADD	AL,AL			; 4 bytes
    5806/    A4B2 : 02 C0               	ADD	AL,AL			; per entry
    5807/    A4B4 : 8A C8               	MOV	CL,AL			; BC = Offset into table
    5808/    A4B6 : 03 D9               	ADD	BX,CX			; Point to coefficient
    5809/    A4B8 : E8 70 FB            	CALL	LOADFP			; Coefficient to BCDE
    5810/    A4BB : E8 8E F9            	CALL	FPMULT			; Multiply FPREG by coefficient
    5811/    A4BE : A0 67 08            	MOV	AL,[SEED+1]		; Get [SEED+1]
    5812/    A4C1 : FE C0               	INC	AL			; Add 1
    5813/    A4C3 : 24 03               	AND	AL,00000011B		; 0 to 3
    5814/    A4C5 : B5 00               	MOV	CH,0
    5815/    A4C7 : 3C 01               	CMP	AL,1			; Is it zero?
    5816/    A4C9 : 12 C5               	ADC	AL,CH			; Yes - Make it 1
    5817/    A4CB : A2 67 08            	MOV	[SEED+1],AL		; Re-save seed
    5818/    A4CE : BB 12 A5            	MOV	BX,RNDTAB-4		; Addition table
    5819/    A4D1 : 02 C0               	ADD	AL,AL			; 4 bytes
    5820/    A4D3 : 02 C0               	ADD	AL,AL			; per entry
    5821/    A4D5 : 8A C8               	MOV	CL,AL			; BC = Offset into table
    5822/    A4D7 : 03 D9               	ADD	BX,CX			; Point to value
    5823/    A4D9 : E8 8D F7            	CALL	ADDPHL			; Add value to FPREG
    5824/    A4DC :                     RND1:
    5825/    A4DC : E8 49 FB            	CALL	BCDEFP			; Move FPREG to BCDE
    5826/    A4DF : 8A C2               	MOV	AL,DL			; Get LSB
    5827/    A4E1 : 8A D1               	MOV	DL,CL			; LSB = MSB
    5828/    A4E3 : 34 4F               	XOR	AL,01001111B		; Fiddle around
    5829/    A4E5 : 8A C8               	MOV	CL,AL			; New MSB
    5830/    A4E7 : C6 07 80            	MOV	BYTE PTR [BX],80H	; Set exponent
    5831/    A4EA :                     ;	LAHF
    5832/    A4EA : 4B                  	DEC	BX			; Point to MSB
    5833/    A4EB :                     ;	SAHF
    5834/    A4EB : 8A 2F               	MOV	CH,[BX]			; Get MSB
    5835/    A4ED : C6 07 80            	MOV	BYTE PTR [BX],80H	; Make value -0.5
    5836/    A4F0 : BB 66 08            	MOV	BX,SEED			; Random number seed
    5837/    A4F3 : FE 07               	INC	BYTE PTR [BX]		; Count seed
    5838/    A4F5 : 8A 07               	MOV	AL,[BX]			; Get seed
    5839/    A4F7 : 2C AB               	SUB	AL,171			; Do it modulo 171
    5840/    A4F9 : 75 08               	JNZ	RND2			; Non-zero - Ok
    5841/    A4FB : 88 07               	MOV	[BX],AL			; Zero seed
    5842/    A4FD : FE C1               	INC	CL			; Fillde about
    5843/    A4FF : FE CE               	DEC	DH			; with the
    5844/    A501 : FE C2               	INC	DL			; number
    5845/    A503 :                     RND2:
    5846/    A503 : E8 F1 F7            	CALL	BNORM			; Normalise number
    5847/    A506 : BB 84 08            	MOV	BX,LSTRND		; Save random number
    5848/    A509 : E9 30 FB            	JMP	FPTHL			; Move FPREG to last and return
    5849/    A50C :                     ;
    5850/    A50C :                     RESEED:
    5851/    A50C : 88 07               	MOV	[BX],AL			; Re-seed random number
    5852/    A50E :                     ;	LAHF
    5853/    A50E : 4B                  	DEC	BX
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 99 - 2023/09/19 18時02分31秒


    5854/    A50F :                     ;	SAHF
    5855/    A50F : 88 07               	MOV	[BX],AL
    5856/    A511 :                     ;	LAHF
    5857/    A511 : 4B                  	DEC	BX
    5858/    A512 :                     ;	SAHF
    5859/    A512 : 88 07               	MOV	[BX],AL
    5860/    A514 : EB C6               	JMP	RND1			; Return RND seed
    5861/    A516 :                     ;
    5862/    A516 :                     RNDTAB:
    5863/    A516 : 68 B1 46 68         	DB	068H,0B1H,046H,068H	; Table used by RND
    5864/    A51A : 99 E9 92 69         	DB	099H,0E9H,092H,069H
    5865/    A51E : 10 D1 75 68         	DB	010H,0D1H,075H,068H
    5866/    A522 :                     ;
    5867/    A522 :                     COS:
    5868/    A522 : BB 78 A5            	MOV	BX,HALFPI		; Point to PI/2
    5869/    A525 : E8 41 F7            	CALL	ADDPHL			; Add it to PPREG
    5870/    A528 :                     SIN:
    5871/    A528 : E8 D2 FA            	CALL	STAKFP			; Put angle on stack
    5872/    A52B : B9 49 83            	MOV	CX,8349H		; BCDE = 2 PI
    5873/    A52E : BA DB 0F            	MOV	DX,0FDBH
    5874/    A531 : E8 E5 FA            	CALL	FPBCDE			; Move 2 PI to FPREG
    5875/    A534 : 59                  	POP	CX			; Restore angle
    5876/    A535 : 5A                  	POP	DX
    5877/    A536 : E8 92 F9            	CALL	DVBCDE			; Divide angle by 2 PI
    5878/    A539 : E8 C1 FA            	CALL	STAKFP			; Put it on stack
    5879/    A53C : E8 CA FB            	CALL	INT			; Get INT of result
    5880/    A53F : 59                  	POP	CX			; Restore number
    5881/    A540 : 5A                  	POP	DX
    5882/    A541 : E8 31 F7            	CALL	SUBCDE			; Make it 0 <= value < 1
    5883/    A544 : BB 7C A5            	MOV	BX,QUARTR		; Point to 0.25
    5884/    A547 : E8 24 F7            	CALL	SUBPHL			; Subtract value from 0.25
    5885/    A54A : E8 6B FA            	CALL	TSTSGN			; Test sign of value
    5886/    A54D : F9                  	STC				; Flag positive
    5887/    A54E : 79 08               	JNS	SIN1			; Positive - Ok
    5888/    A550 : E8 13 F7            	CALL	ROUND			; Add 0.5 to value
    5889/    A553 : E8 62 FA            	CALL	TSTSGN			; Test sign of value
    5890/    A556 : 0A C0               	OR	AL,AL			; Flag negative
    5891/    A558 :                     SIN1:
    5892/    A558 : 9F                  	LAHF
    5893/    A559 : 86 E0               	XCHG	AH,AL
    5894/    A55B : 50                  	PUSH	AX			; Save sign
    5895/    A55C : 86 E0               	XCHG	AH,AL
    5896/    A55E : 78 03               	JS	SIN2
    5897/    A560 : E8 90 FA            	CALL	INVSGN			; Negate value if positive
    5898/    A563 :                     SIN2:
    5899/    A563 : BB 7C A5            	MOV	BX,QUARTR		; Point to 0.25
    5900/    A566 : E8 00 F7            	CALL	ADDPHL			; Add 0.25 to value
    5901/    A569 : 58                  	POP	AX			; Restore sign
    5902/    A56A : 86 E0               	XCHG	AH,AL
    5903/    A56C : 9E                  	SAHF
    5904/    A56D : 72 03               	JC	SIN3
    5905/    A56F : E8 81 FA            	CALL	INVSGN			; Negative - Make positive
    5906/    A572 :                     SIN3:
    5907/    A572 : BB 80 A5            	MOV	BX,SINTAB		; Coefficient table
    5908/    A575 : E9 DF FE            	JMP	SUMSER			; Evaluate sum of series
    5909/    A578 :                     ;
    5910/    A578 :                     HALFPI:
    5911/    A578 : DB 0F 49 81         	DB	0DBH,00FH,049H,081H	; 1.5708 (PI/2)
    5912/    A57C :                     ;
    5913/    A57C :                     QUARTR:
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 100 - 2023/09/19 18時02分31秒


    5914/    A57C : 00 00 00 7F         	DB	000H,000H,000H,07FH	; 0.25
    5915/    A580 :                     ;
    5916/    A580 :                     SINTAB:
    5917/    A580 : 05                  	DB	5			; Table used by SIN
    5918/    A581 : BA D7 1E 86         	DB	0BAH,0D7H,01EH,086H	; 39.711
    5919/    A585 : 64 26 99 87         	DB	064H,026H,099H,087H	;-76.575
    5920/    A589 : 58 34 23 87         	DB	058H,034H,023H,087H	; 81.602
    5921/    A58D : E0 5D A5 86         	DB	0E0H,05DH,0A5H,086H	;-41.342
    5922/    A591 : DA 0F 49 83         	DB	0DAH,00FH,049H,083H	; 6.2832
    5923/    A595 :                     ;
    5924/    A595 :                     TAN:
    5925/    A595 : E8 65 FA            	CALL	STAKFP			; Put angle on stack
    5926/    A598 : E8 8D FF            	CALL	SIN			; Get SIN of angle
    5927/    A59B : 59                  	POP	CX			; Restore angle
    5928/    A59C : 5B                  	POP	BX
    5929/    A59D : E8 5D FA            	CALL	STAKFP			; Save SIN of angle
    5930/    A5A0 : 87 DA               	XCHG	BX,DX			; BCDE = Angle
    5931/    A5A2 : E8 74 FA            	CALL	FPBCDE			; Angle to FPREG
    5932/    A5A5 : E8 7A FF            	CALL	COS			; Get COS of angle
    5933/    A5A8 : E9 1E F9            	JMP	DIV			; TAN = SIN / COS
    5934/    A5AB :                     ;
    5935/    A5AB :                     ATN:
    5936/    A5AB : E8 0A FA            	CALL	TSTSGN			; Test sign of value
    5937/    A5AE : 79 03               	JNS	ATN1
    5938/    A5B0 : E8 C7 FD            	CALL	NEGAFT			; Negate result after if -ve
    5939/    A5B3 :                     ATN1:
    5940/    A5B3 : 79 03               	JNS	ATN2
    5941/    A5B5 : E8 3B FA            	CALL	INVSGN			; Negate value if -ve
    5942/    A5B8 :                     ATN2:
    5943/    A5B8 : A0 31 09            	MOV	AL,[FPEXP]		; Get exponent
    5944/    A5BB : 3C 81               	CMP	AL,81H			; Number less than 1?
    5945/    A5BD : 72 0E               	JC	ATN3			; Yes - Get arc tangnt
    5946/    A5BF : B9 00 81            	MOV	CX,8100H		; BCDE = 1
    5947/    A5C2 : 8A F1               	MOV	DH,CL
    5948/    A5C4 : 8A D1               	MOV	DL,CL
    5949/    A5C6 : E8 02 F9            	CALL	DVBCDE			; Get reciprocal of number
    5950/    A5C9 : BB 6E 9C            	MOV	BX,SUBPHL		; Sub angle from PI/2
    5951/    A5CC : 53                  	PUSH	BX			; Save for angle > 1
    5952/    A5CD :                     ATN3:
    5953/    A5CD : BB D7 A5            	MOV	BX,ATNTAB		; Coefficient table
    5954/    A5D0 : E8 84 FE            	CALL	SUMSER			; Evaluate sum of series
    5955/    A5D3 : BB 78 A5            	MOV	BX,HALFPI		; PI/2 - angle in case > 1
    5956/    A5D6 : C3                  	RET				; Number > 1 - Sub from PI/2
    5957/    A5D7 :                     ;
    5958/    A5D7 :                     ATNTAB:
    5959/    A5D7 : 09                  	DB	9			; Table used by ATN
    5960/    A5D8 : 4A D7 3B 78         	DB	04AH,0D7H,03BH,078H	; 1/17
    5961/    A5DC : 02 6E 84 7B         	DB	002H,06EH,084H,07BH	;-1/15
    5962/    A5E0 : FE C1 2F 7C         	DB	0FEH,0C1H,02FH,07CH	; 1/13
    5963/    A5E4 : 74 31 9A 7D         	DB	074H,031H,09AH,07DH	;-1/11
    5964/    A5E8 : 84 3D 5A 7D         	DB	084H,03DH,05AH,07DH	; 1/9
    5965/    A5EC : C8 7F 91 7E         	DB	0C8H,07FH,091H,07EH	;-1/7
    5966/    A5F0 : E4 BB 4C 7E         	DB	0E4H,0BBH,04CH,07EH	; 1/5
    5967/    A5F4 : 6C AA AA 7F         	DB	06CH,0AAH,0AAH,07FH	;-1/3
    5968/    A5F8 : 00 00 00 81         	DB	000H,000H,000H,081H	; 1/1
    5969/    A5FC :                     ;
    5970/    A5FC :                     
    5971/    A5FC :                     ARET:
    5972/    A5FC : C3                  	RET				; A RETurn instruction
    5973/    A5FD :                     ;
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 101 - 2023/09/19 18時02分31秒


    5974/    A5FD :                     CLS:
    5975/    A5FD : B0 0C               	MOV	AL,CLRSCRN		; ASCII Clear screen
    5976/    A5FF : E9 5C DA            	JMP	putch			; Output character
    5977/    A602 :                     ;
    5978/    A602 :                     WIDTH:
    5979/    A602 : E8 29 F6            	CALL	GETINT			; Get integer 0-255
    5980/    A605 : 8A C2               	MOV	AL,DL			; Width to A
    5981/    A607 : A2 8C 08            	MOV	[LWIDTH],AL		; Set width
    5982/    A60A : C3                  	RET
    5983/    A60B :                     ;
    5984/    A60B :                     LINES:
    5985/    A60B : E8 9C EB            	CALL	GETNUM			; Get a number
    5986/    A60E : E8 BE E6            	CALL	DEINT			; Get integer -32768 to 32767
    5987/    A611 : 89 16 90 08         	MOV	[LINESC],DX		; Set lines counter
    5988/    A615 : 89 16 92 08         	MOV	[LINESN],DX		; Set lines number
    5989/    A619 : C3                  	RET
    5990/    A61A :                     ;
    5991/    A61A :                     DEEK:
    5992/    A61A : E8 B2 E6            	CALL	DEINT			; Get integer -32768 to 32767
    5993/    A61D : 52                  	PUSH	DX			; Save number
    5994/    A61E : 5B                  	POP	BX			; Number to HL
    5995/    A61F : 8A 2F               	MOV	CH,[BX]			; Get LSB of contents
    5996/    A621 :                     ;	LAHF
    5997/    A621 : 43                  	INC	BX
    5998/    A622 :                     ;	SAHF
    5999/    A622 : 8A 07               	MOV	AL,[BX]			; Get MSB of contents
    6000/    A624 : E9 F9 F0            	JMP	ABPASS			; Return integer AB
    6001/    A627 :                     ;
    6002/    A627 :                     DOKE:
    6003/    A627 : E8 80 EB            	CALL	GETNUM			; Get a number
    6004/    A62A : E8 A2 E6            	CALL	DEINT			; Get integer -32768 to 32767
    6005/    A62D : 52                  	PUSH	DX			; Save address
    6006/    A62E : E8 90 E3            	CALL	CHKSYN			; Make sure ',' follows
    6007/    A631 : 2C                  	DB	','
    6008/    A632 : E8 75 EB            	CALL	GETNUM			; Get a number
    6009/    A635 : E8 97 E6            	CALL	DEINT			; Get integer -32768 to 32767
    6010/    A638 : 8B EC               	MOV	BP,SP
    6011/    A63A : 87 5E 00            	XCHG	[BP],BX			; Save value,get address
    6012/    A63D : 88 17               	MOV	[BX],DL			; Save LSB of value
    6013/    A63F :                     ;	LAHF
    6014/    A63F : 43                  	INC	BX
    6015/    A640 :                     ;	SAHF
    6016/    A640 : 88 37               	MOV	[BX],DH			; Save MSB of value
    6017/    A642 : 5B                  	POP	BX			; Restore code string address
    6018/    A643 : C3                  	RET
    6019/    A644 :                     ;
    6020/    A644 :                     ; HEX$(nn) Convert 16 bit number to Hexadecimal string
    6021/    A644 :                     ;
    6022/    A644 :                     HEX:
    6023/    A644 : E8 66 EB            	CALL	TSTNUM			; Verify it's a number
    6024/    A647 : E8 85 E6            	CALL	DEINT			; Get integer -32768 to 32767
    6025/    A64A : 51                  	PUSH	CX			; Save contents of BC
    6026/    A64B : BB 33 09            	MOV	BX,PBUFF
    6027/    A64E : 8A C6               	MOV	AL,DH			; Get high order into A
    6028/    A650 : 3C 00               	CMP	AL,0
    6029/    A652 : 74 0F               	JZ	HEX2			; Skip output if both high digits are zero
    6030/    A654 : E8 33 00            	CALL	BYT2ASC			; Convert D to ASCII
    6031/    A657 : 8A C5               	MOV	AL,CH
    6032/    A659 : 3C 30               	CMP	AL,'0'
    6033/    A65B : 74 03               	JZ	HEX1			; Don't store high digit if zero
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 102 - 2023/09/19 18時02分31秒


    6034/    A65D : 88 2F               	MOV	[BX],CH			; Store it to PBUFF
    6035/    A65F :                     ;	LAHF
    6036/    A65F : 43                  	INC	BX			; Next location
    6037/    A660 :                     ;	SAHF
    6038/    A660 :                     HEX1:
    6039/    A660 : 88 0F               	MOV	[BX],CL			; Store C to PBUFF+1
    6040/    A662 :                     ;	LAHF
    6041/    A662 : 43                  	INC	BX			; Next location
    6042/    A663 :                     ;	SAHF
    6043/    A663 :                     HEX2:
    6044/    A663 : 8A C2               	MOV	AL,DL			; Get lower byte
    6045/    A665 : E8 22 00            	CALL	BYT2ASC			; Convert E to ASCII
    6046/    A668 : 8A C6               	MOV	AL,DH
    6047/    A66A : 3C 00               	CMP	AL,0
    6048/    A66C : 75 06               	JNZ	HEX3			; If upper byte was not zero then always print lower byte
    6049/    A66E : 8A C5               	MOV	AL,CH
    6050/    A670 : 3C 30               	CMP	AL,'0'			; If high digit of lower byte is zero then don't print
    6051/    A672 : 74 05               	JZ	HEX4
    6052/    A674 :                     HEX3:
    6053/    A674 : 88 2F               	MOV	[BX],CH			; to PBUFF+2
    6054/    A676 : 9F                  	LAHF
    6055/    A677 : 43                  	INC	BX			; Next location
    6056/    A678 : 9E                  	SAHF
    6057/    A679 :                     HEX4:
    6058/    A679 : 88 0F               	MOV	[BX],CL			; to PBUFF+3
    6059/    A67B :                     ;	LAHF
    6060/    A67B : 43                  	INC	BX			; PBUFF+4 to zero
    6061/    A67C :                     ;	SAHF
    6062/    A67C : 32 C0               	XOR	AL,AL			; Terminating character
    6063/    A67E : 88 07               	MOV	[BX],AL			; Store zero to terminate
    6064/    A680 :                     ;	LAHF
    6065/    A680 : 43                  	INC	BX			; Make sure PBUFF is terminated
    6066/    A681 :                     ;	SAHF
    6067/    A681 : 88 07               	MOV	[BX],AL			; Store the double zero there
    6068/    A683 : 59                  	POP	CX			; Get BC back
    6069/    A684 : BB 33 09            	MOV	BX,PBUFF		; Reset to start of PBUFF
    6070/    A687 : E9 7F F1            	JMP	STR1			; Convert the PBUFF to a string and return it
    6071/    A68A :                     ;
    6072/    A68A :                     BYT2ASC:
    6073/    A68A : 8A E8               	MOV	CH,AL			; Save original value
    6074/    A68C : 24 0F               	AND	AL,0FH			; Strip off upper nybbl
    6075/    A68E : 3C 0A               	CMP	AL,0AH			; 0-9?
    6076/    A690 : 72 02               	JC	ADD30			; If A-F, add 7 more
    6077/    A692 : 04 07               	ADD	AL,07H			; Bring value up to ASCII A-F
    6078/    A694 :                     ADD30:
    6079/    A694 : 04 30               	ADD	AL,'0'			; And make ASCII
    6080/    A696 : 8A C8               	MOV	CL,AL			; Save converted char to C
    6081/    A698 : 8A C5               	MOV	AL,CH			; Retrieve original value
    6082/    A69A : D0 C8               	ROR	AL,1			; and Rotate it right
    6083/    A69C : D0 C8               	ROR	AL,1
    6084/    A69E : D0 C8               	ROR	AL,1
    6085/    A6A0 : D0 C8               	ROR	AL,1
    6086/    A6A2 : 24 0F               	AND	AL,0FH			; Mask off upper nybble
    6087/    A6A4 : 3C 0A               	CMP	AL,0AH			; 0-9? < A hex?
    6088/    A6A6 : 72 02               	JC	ADD301			; Skip Add 7
    6089/    A6A8 : 04 07               	ADD	AL,07H			; Bring it up to ASCII A-F
    6090/    A6AA :                     ADD301:
    6091/    A6AA : 04 30               	ADD	AL,'0'			; And make it full ASCII
    6092/    A6AC : 8A E8               	MOV	CH,AL			; Store high order byte
    6093/    A6AE : C3                  	RET
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 103 - 2023/09/19 18時02分31秒


    6094/    A6AF :                     ;
    6095/    A6AF :                     ; Convert "&Hnnnn" to FPREG
    6096/    A6AF :                     ; Gets a character from (HL) checks for Hexadecimal ASCII numbers "&Hnnnn"
    6097/    A6AF :                     ; Char is in A, NC if char is;<=>?@ A-z, CY is set if 0-9
    6098/    A6AF :                     HEXTFP:
    6099/    A6AF : 87 DA               	XCHG	BX,DX			; Move code string pointer to DE
    6100/    A6B1 : BB 00 00            	MOV	BX,0000H		; Zero out the value
    6101/    A6B4 : E8 17 00            	CALL	GETHEX			; Check the number for valid hex
    6102/    A6B7 : 72 40               	JC	HXERR			; First value wasn't hex, HX error
    6103/    A6B9 : EB 05               	JMP	HEXLP1			; Convert first character
    6104/    A6BB :                     HEXLP:
    6105/    A6BB : E8 10 00            	CALL	GETHEX			; Get second and addtional characters
    6106/    A6BE : 72 2D               	JC	HEXIT			; Exit if not a hex character
    6107/    A6C0 :                     HEXLP1:
    6108/    A6C0 : 03 DB               	ADD	BX,BX			; Rotate 4 bits to the left
    6109/    A6C2 : 03 DB               	ADD	BX,BX
    6110/    A6C4 : 03 DB               	ADD	BX,BX
    6111/    A6C6 : 03 DB               	ADD	BX,BX
    6112/    A6C8 : 0A C3               	OR	AL,BL			; Add in D0-D3 into L
    6113/    A6CA : 8A D8               	MOV	BL,AL			; Save new value
    6114/    A6CC : EB ED               	JMP	HEXLP			; And continue until all hex characters are in
    6115/    A6CE :                     ;
    6116/    A6CE :                     GETHEX:
    6117/    A6CE :                     ;	LAHF
    6118/    A6CE : 42                  	INC	DX			; Next location
    6119/    A6CF :                     ;	SAHF
    6120/    A6CF : 87 DA               	XCHG	BX,DX
    6121/    A6D1 : 8A 07               	MOV	AL,[BX]
    6122/    A6D3 : 87 DA               	XCHG	BX,DX			; Load character at pointer
    6123/    A6D5 : 3C 20               	CMP	AL,' '
    6124/    A6D7 : 74 F5               	JZ	GETHEX			; Skip spaces
    6125/    A6D9 : 2C 30               	SUB	AL,'0'			; Get absolute value
    6126/    A6DB : 73 01               	JNC	GETHEX1
    6127/    A6DD : C3                  	RET				; < "0", error
    6128/    A6DE :                     GETHEX1:
    6129/    A6DE : 3C 0A               	CMP	AL,0AH
    6130/    A6E0 : 72 07               	JC	NOSUB7			; Is already in the range 0-9
    6131/    A6E2 : 2C 07               	SUB	AL,07H			; Reduce to A-F
    6132/    A6E4 : 3C 0A               	CMP	AL,0AH			; Value should be $0A-$0F at this point
    6133/    A6E6 : 73 01               	JNC	NOSUB7
    6134/    A6E8 : C3                  	RET				; CY set if was :		; < = > ? @
    6135/    A6E9 :                     ;
    6136/    A6E9 :                     NOSUB7:
    6137/    A6E9 : 3C 10               	CMP	AL,10H			; > Greater than "F"?
    6138/    A6EB : F5                  	CMC
    6139/    A6EC : C3                  	RET				; CY set if it wasn't valid hex
    6140/    A6ED :                     ;
    6141/    A6ED :                     HEXIT:
    6142/    A6ED : 87 DA               	XCHG	BX,DX			; Value into DE, Code string into HL
    6143/    A6EF : 8A C6               	MOV	AL,DH			; Load DE into AC
    6144/    A6F1 : 8A CA               	MOV	CL,DL			; For prep to
    6145/    A6F3 : 53                  	PUSH	BX
    6146/    A6F4 : E8 27 F0            	CALL	ACPASS			; ACPASS to set AC as integer into FPREG
    6147/    A6F7 : 5B                  	POP	BX
    6148/    A6F8 : C3                  	RET
    6149/    A6F9 :                     ;
    6150/    A6F9 :                     HXERR:
    6151/    A6F9 : B2 26               	MOV	DL,HX			; ?HEX Error
    6152/    A6FB : E9 25 DF            	JMP	ERROR
    6153/    A6FE :                     ;
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 104 - 2023/09/19 18時02分31秒


    6154/    A6FE :                     ; BIN$(NN) Convert integer to a 1-16 char binary string
    6155/    A6FE :                     BIN:
    6156/    A6FE : E8 AC EA            	CALL	TSTNUM			; Verify it's a number
    6157/    A701 : E8 CB E5            	CALL	DEINT			; Get integer -32768 to 32767
    6158/    A704 :                     BIN2:
    6159/    A704 : 51                  	PUSH	CX			; Save contents of BC
    6160/    A705 : BB 33 09            	MOV	BX,PBUFF
    6161/    A708 : B5 11               	MOV	CH,17			; One higher than max char count
    6162/    A70A :                     ZEROSUP:				; Suppress leading zero
    6163/    A70A : FE CD               	DEC	CH			; Max 16 chars
    6164/    A70C : 8A C5               	MOV	AL,CH
    6165/    A70E : 3C 01               	CMP	AL,01H
    6166/    A710 : 74 06               	JZ	BITOUT			; Always output at least one character
    6167/    A712 :                     ;	RCL	DL,1
    6168/    A712 :                     ;	RCL	DH,1
    6169/    A712 : D1 D2               	RCL	DX,1
    6170/    A714 : 73 F4               	JNC	ZEROSUP
    6171/    A716 : EB 02               	JMP	BITOUT2
    6172/    A718 :                     BITOUT:
    6173/    A718 :                     ;	RCL	DL,1
    6174/    A718 :                     ;	RCL	DH,1
    6175/    A718 : D1 D2               	RCL	DX,1
    6176/    A71A :                     BITOUT2:
    6177/    A71A : B0 30               	MOV	AL,'0'			; Char for '0'
    6178/    A71C : 14 00               	ADC	AL,0			; If carry set then '0' --> '1'
    6179/    A71E : 88 07               	MOV	[BX],AL
    6180/    A720 :                     ;	LAHF
    6181/    A720 : 43                  	INC	BX
    6182/    A721 :                     ;	SAHF
    6183/    A721 : FE CD               	DEC	CH
    6184/    A723 : 75 F3               	JNZ	BITOUT
    6185/    A725 : 32 C0               	XOR	AL,AL			; Terminating character
    6186/    A727 : 88 07               	MOV	[BX],AL			; Store zero to terminate
    6187/    A729 :                     ;	LAHF
    6188/    A729 : 43                  	INC	BX			; Make sure PBUFF is terminated
    6189/    A72A :                     ;	SAHF
    6190/    A72A : 88 07               	MOV	[BX],AL			; Store the double zero
    6191/    A72C : 59                  	POP	CX
    6192/    A72D : BB 33 09            	MOV	BX,PBUFF
    6193/    A730 : E9 D6 F0            	JMP	STR1
    6194/    A733 :                     ;
    6195/    A733 :                     ; Convert "&Bnnnn" to FPREG
    6196/    A733 :                     ; Gets a character from (HL) checks for Binary ASCII numbers "&Bnnnn"
    6197/    A733 :                     BINTFP:
    6198/    A733 : 87 DA               	XCHG	BX,DX			; Move code string pointer
    6199/    A735 : BB 00 00            	MOV	BX,0000H		; Zero out the value
    6200/    A738 : E8 1B 00            	CALL	CHKBIN			; Check the number for valid bin
    6201/    A73B : 72 2D               	JC	BINERR			; First value wasn't bin, HX error
    6202/    A73D :                     BINIT:
    6203/    A73D : 2C 30               	SUB	AL,'0'
    6204/    A73F : 03 DB               	ADD	BX,BX			; Rotate HL left
    6205/    A741 : 0A C3               	OR	AL,BL
    6206/    A743 : 8A D8               	MOV	BL,AL
    6207/    A745 : E8 0E 00            	CALL	CHKBIN			; Get second and addtional characters
    6208/    A748 : 73 F3               	JNC	BINIT			; Process if a bin character
    6209/    A74A : 87 DA               	XCHG	BX,DX			; Value into DE, Code string into HL
    6210/    A74C : 8A C6               	MOV	AL,DH			; Load DE into AC
    6211/    A74E : 8A CA               	MOV	CL,DL			; For prep to
    6212/    A750 : 53                  	PUSH	BX
    6213/    A751 : E8 CA EF            	CALL	ACPASS			; ACPASS to set AC as integer into FPREG
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 105 - 2023/09/19 18時02分31秒


    6214/    A754 : 5B                  	POP	BX
    6215/    A755 : C3                  	RET
    6216/    A756 :                     ;
    6217/    A756 :                     ; Char is in A, NC if char is 0 or 1
    6218/    A756 :                     CHKBIN:
    6219/    A756 :                     ;	LAHF
    6220/    A756 : 42                  	INC	DX
    6221/    A757 :                     ;	SAHF
    6222/    A757 : 87 DA               	XCHG	BX,DX
    6223/    A759 : 8A 07               	MOV	AL,[BX]
    6224/    A75B : 87 DA               	XCHG	BX,DX
    6225/    A75D : 3C 20               	CMP	AL,' '
    6226/    A75F : 74 F5               	JZ	CHKBIN			; Skip spaces
    6227/    A761 : 3C 30               	CMP	AL,'0'			; Set C if < '0'
    6228/    A763 : 73 01               	JNC	CHKBIN1
    6229/    A765 : C3                  	RET
    6230/    A766 :                     CHKBIN1:
    6231/    A766 : 3C 32               	CMP	AL,'2'
    6232/    A768 : F5                  	CMC				; Set C if > '1'
    6233/    A769 : C3                  	RET
    6234/    A76A :                     ;
    6235/    A76A :                     BINERR:
    6236/    A76A : B2 28               	MOV	DL,BN			; ?BIN Error
    6237/    A76C : E9 B4 DE            	JMP	ERROR
    6238/    A76F :                     ;
    6239/    A76F :                     JJUMP1:
    6240/    A76F : E9 A1 DA            	JMP	CSTART			; Go and initialise
    6241/    A772 :                     ;
    6242/    A772 :                     MONITR:
    6243/    A772 : FA                  	CLI				; Clear Interrupt flag
    6244/    A773 : E9 8A 18            	JMP	0C000H			; Restart (Normally Monitor)
    6245/    A776 :                     ;
    6246/    A776 :                     INITST:
    6247/    A776 : B0 00               	MOV	AL,0			; Clear break flag
    6248/    A778 : A2 97 08            	MOV	[BRKFLG],AL
    6249/    A77B : E9 9D DA            	JMP	INIT
    6250/    A77E :                     ;
    6251/    A77E :                     TSTBIT:
    6252/    A77E :                     ;	LAHF
    6253/    A77E : 86 E0               	XCHG	AH,AL
    6254/    A780 : 50                  	PUSH	AX			; Save bit mask
    6255/    A781 : 86 E0               	XCHG	AH,AL
    6256/    A783 : 22 C5               	AND	AL,CH			; Get common bits
    6257/    A785 : 59                  	POP	CX			; Restore bit mask
    6258/    A786 : 3A C5               	CMP	AL,CH           	; Same bit set?
    6259/    A788 : B0 00               	MOV	AL,0			; Return 0 in A
    6260/    A78A : C3                  	RET
    6261/    A78B :                     ;
    6262/    A78B :                     OUTNCR:
    6263/    A78B : E8 4C E2            	CALL	OUTC			; Output character in A
    6264/    A78E : E9 CF E7            	JMP	PRCRLF			; Output CRLF
    6265/    A791 :                     ;
    6266/    A791 :                     
    6267/    A791 :                     ;	Reset
    6268/    FFF0 :                     	ORG	0FFF0h
    6269/    FFF0 : EA 81 80 00 00      	JMPF	0000:start
    6270/    FFF5 :                     
    6271/    FFF5 :                     	END
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 106 - 2023/09/19 18時02分31秒


  Symbol Table (* = unused):
  --------------------------

 ABPASS :                      9720 C |  ABS :                         9FED C |
*ACCSUM :                      8CA8 C |  ACPASS :                      971E C |
 ADD30 :                      0A694 C |  ADD301 :                     0A6AA C |
 ADDEXP :                      9F5B C |  ADDEXP1 :                     9F7D C |
 ADDIG :                      0A1DA C |  ADDPHL :                      9C69 C |
 ALLFOL :                      9B22 C |  ALLFOL1 :                     9B24 C |
 ANTVLU :                      908A C | *ARCHITECTURE :   "arm64-apple-osx" - |
*ARET :                       0A5FC C |  ARLDSV :                      95AC C |
 ARLDSV1 :                     95B3 C |  ARREND :                       924 - |
 ARRLP :                       9956 C |  ASC :                         9ADF C |
 ASCTFP :                     0A159 C |  ASPCS :                       8FC3 C |
 ATN :                        0A5AB C |  ATN1 :                       0A5B3 C |
 ATN2 :                       0A5B8 C |  ATN3 :                       0A5CD C |
 ATNTAB :                     0A5D7 C |  ATOH :                        8CEE C |
 BADINP :                      8FEA C |  BADINP1 :                     8FF4 C |
 BAKSTK :                      8593 C |  BAKTMP :                      9AB5 C |
 BAKTMP1 :                     9AC7 C |  BASTXT :                       8A8 - |
 BCDEFP :                     0A028 C |  BFREE :                       82AE C |
 BIN :                        0A6FE C | *BIN2 :                       0A704 C |
 BINERR :                     0A76A C |  BINIT :                      0A73D C |
 BINTFP :                     0A733 C |  BITOUT :                     0A718 C |
 BITOUT2 :                    0A71A C |  BKSP :                           8 - |
 BN :                            28 - |  BNORM :                       9CF7 C |
 BNRMLP :                      9CFD C | *BR3INS :                        0C D |
 BRK :                         8C35 C |  BRKFLG :                       897 - |
 BRKLIN :                       918 - |  BRKMSG :                      858D C |
 BRKRET :                      82A0 C | *BRK_FLG :                        4 D |
*BRVINS :                        10 D |  BS :                            10 - |
 BSERR :                       9600 C |  BUFFER :                       8AB - |
 BUFSIZ :                        80 - |  BYT2ASC :                    0A68A C |
 BYTSFT :                      9EB4 C | *CASESENSITIVE :                  0 - |
 CFEVAL :                      9519 C |  CHARTY :                      94AA C |
 CHEKFN :                      97F0 C |  CHKBIN :                     0A756 C |
 CHKBIN1 :                    0A766 C |  CHKCHR :                      8202 C |
*CHKINS :                        14 D |  CHKLTR :                      8CB9 C |
 CHKLTR1 :                     8CC0 C |  CHKSTK :                      85DD C |
 CHKSUM :                       894 - |  CHKSYN :                      89C1 C |
 CHKSYN1 :                     89D7 C |  CHKTYP :                      91B2 C |
 CHKTYP1 :                     91BC C |  CHR :                         9AF9 C |
 CLEAR :                       8D27 C |  CLEAR1 :                      8D2C C |
 CLEAR2 :                      8D4C C |  CLOTST :                      8A1C C |
 CLOTST1 :                     8A26 C |  CLREG :                       87C0 C |
 CLRPTR :                      8788 C |  CLRSCRN :                       0C - |
 CLS :                        0A5FD C |  CMPFP :                      0A09A C |
 CMPFP1 :                     0A0A4 C |  CMPFP2 :                     0A0AE C |
 CMPFP3 :                     0A0B8 C |  CMPFP4 :                     0A0C2 C |
 CMPLG1 :                      93CB C |  CMPLG2 :                      93E5 C |
 CMPLOG :                      93C9 C |  CMPNUM :                     0A073 C |
 CMPNUM1 :                    0A07C C |  CMPNUM2 :                    0A088 C |
 CMPNUM3 :                    0A092 C |  CMPRES :                      9441 C |
 CMPSTR :                      9412 C |  CMPSTR1 :                     9419 C |
 CMPSTR2 :                     9420 C |  CMPSTR3 :                     9429 C |
 CN :                            20 - |  CNVNUM :                     0A16A C |
 COLD :                        8208 C |  COMMAN :                       88D - |
 COMPL :                       9D91 C | *COMPMODE :                       0 - |
 CONCAT :                      9A12 C |  CONCAT1 :                     9A39 C |
 CONEXP :                     0A19F C |  CONPOS :                      9CF2 C |
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 107 - 2023/09/19 18時02分31秒


*CONSTPI :        3.141592653589793 - |  CONT :                        8C82 C |
 CONT1 :                       8C91 C |  CONTAD :                       91E - |
 CONVAR :                      92E3 C |  COPY :                        8223 C |
 COS :                        0A522 C |  COUNT :                       8AAF C |
 COUNT1 :                      8AC3 C |  CPDEHL :                      89B5 C |
 CPDEHL1 :                     89BC C |  CPYLIT :                      88D0 C |
 CR :                            0D - |  CRARLP :                      9636 C |
 CREARY :                      9605 C |  CREARY1 :                     9611 C |
 CRESTR :                      8E81 C |  CRESTR1 :                     8E82 C |
 CRNCLP :                      87FD C |  CRNCLP1 :                     8806 C |
 CRNCLP2 :                     880F C |  CRNCLP3 :                     8816 C |
 CRNCLP4 :                     8822 C |  CRNCLP5 :                     882A C |
 CRTMST :                      9835 C |  CRTST :                       984A C |
 CRTSTE :                      9867 C |  CRTSTE1 :                     986E C |
 CRUNCH :                      87F3 C |  CSTART :                      8213 C |
 CTLOFG :                       88F - |  CTRLC :                          3 - |
 CTRLG :                          7 - |  CTRLO :                         0F - |
 CTRLQ :                         11 - |  CTRLR :                         12 - |
 CTRLS :                         13 - |  CTRLU :                         15 - |
 CUROPR :                       90F - |  CURPOS :                       8F5 - |
 DATA :                        8E0C C | *DATE :                "2023/09/19" - |
 DATFLG :                       8F8 - |  DATLIN :                       913 - |
 DATSNR :                      8603 C |  DCBCDE :                     0A0FB C |
 DCBCDE1 :                    0A105 C |  DDERR :                       8615 C |
 DEEK :                       0A61A C |  DEF :                         9737 C |
 DEFSIZ :                      963F C |  DEFSIZ1 :                     966F C |
 DEINT :                       8CCF C |  DEINT1 :                      8CD9 C |
 DEL :                           7F - |  DELCHR :                      891B C |
 DEPINT :                      8CCA C |  DETHL4 :                     0A03F C |
 DETHLB :                     0A041 C | *DEVERR :                         0 D |
 DIGTXT :                     0A2C3 C |  DIGTXT1 :                    0A2CD C |
 DIM :                         9476 C |  DIMRET :                      946B C |
 DIMRET1 :                     9472 C |  DINPOS :                      8A13 C |
 DIV :                         9EC9 C |  DIV1 :                         84F - |
 DIV10 :                       9EBD C |  DIV2 :                         855 - |
 DIV3 :                         85B - |  DIV4 :                         85F - |
 DIVLP :                       9EFD C |  DIVSUP :                       84E - |
 DOAGN :                       87E1 C |  DOCOM :                       8F88 C |
 DOCOM1 :                      8F97 C |  DODEL :                       88F8 C |
 DOEBIT :                     0A31E C |  DOFN :                        9773 C |
 DOFN1 :                       9795 C |  DOFN2 :                       97CA C |
 DOKE :                       0A627 C |  DONULL :                      8F6A C |
 DOSPC :                       8FBD C |  DOTAB :                       8FA1 C |
 DPOINT :                     0A19B C |  DTSTR :                       9851 C |
 DVBCDE :                      9ECB C |  DVBCDE1 :                     9ED3 C |
 DZ :                            14 - |  DZERR :                       860D C |
 ECHDEL :                      890D C |  ECHDEL1 :                     890F C |
 EDIGIT :                     0A202 C | *EMEM :                           0 - |
 EMROM :                       8200 - |  ENDBUF :                      88E0 C |
 ENDCON :                     0A1BA C |  ENDCON1 :                    0A1C6 C |
 ENDDIM :                      96ED C |  ENDINP :                      8F5A C |
 ENDNAM :                      94A0 C |  ENDPRG :                      8C4D C |
 ENFMEM :                      85EA C |  ENFMEM1 :                     85EB C |
 ERRIN :                       8646 C |  ERRIN1 :                      8658 C |
 ERRLIN :                       91C - |  ERRMSG :                      857B C |
 ERROR :                       8623 C |  ERRORS :                      84EC C |
 ESC :                           1B - |  EVAL :                        91C3 C |
 EVAL1 :                       91C8 C |  EVAL2 :                       91D1 C |
 EVAL3 :                       91D5 C |  EVAL4 :                       91E3 C |
 EVLPAR :                      92C9 C |  EVNOT :                       944F C |
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 108 - 2023/09/19 18時02分31秒


 EXCUTE :                      8BAB C |  EXP :                        0A3E4 C |
 EXP1 :                       0A3FA C |  EXP2 :                       0A406 C |
 EXPLP :                      0A18A C |  EXPTAB :                     0A436 C |
 EXPTEN :                     0A338 C |  EXTIG :                       9101 C |
*FALSE :                          0 - |  FANDT :                       913C C |
 FC :                             8 - |  FCERR :                       8CE9 C |
 FDTLP :                       9112 C |  FDTLP1 :                      912A C |
 FINDEL :                      96AA C |  FLGDIF :                      9FCB C |
 FLGDIF1 :                     9FD0 C |  FLGREL :                      9FD6 C |
 FNARG :                        92A - |  FNCTAB :                      8336 C |
 FNDARY :                      95B9 C |  FNDARY1 :                     95BB C |
 FNDELP :                      96B5 C |  FNDELP1 :                     96B6 C |
 FNDELP2 :                     96D3 C |  FNDEND :                      8743 C |
 FNDNUM :                      9C2B C |  FNDTOK :                      8A81 C |
 FNDVAR :                      94F4 C |  FNDWRD :                      8836 C |
 FNOFST :                      92F9 C |  FNRGNM :                       928 - |
 FNTHR :                       9506 C |  FNVAL :                       932D C |
 FOPRND :                      9207 C |  FOPRND1 :                     9210 C |
 FOPRND2 :                     921B C |  FOPRND3 :                     9220 C |
 FOPRND4 :                     9230 C |  FOPRND5 :                     9244 C |
 FOR :                         8AE1 C |  FORFLG :                       915 - |
 FORFND :                      8B16 C |  FORSLP :                      8AF7 C |
 FPADD :                       9C78 C |  FPADD1 :                      9C7F C |
 FPADD2 :                      9C89 C |  FPBCDE :                     0A019 C |
 FPEXP :                        931 - |  FPINT :                      0A0C5 C |
 FPINT1 :                     0A0D2 C |  FPINT2 :                     0A0E2 C |
 FPINT3 :                     0A0F2 C |  FPINT4 :                     0A0F9 C |
 FPMULT :                      9E4C C |  FPMULT1 :                     9E52 C |
 FPREG :                        92E - |  FPROND :                      9D5F C |
 FPROND1 :                     9D64 C |  FPROND2 :                     9D69 C |
 FPROND3 :                     9D6E C |  FPROND4 :                     9D75 C |
 FPSINT :                      8CC4 C |  FPTHL :                      0A03C C |
 FRE :                         96F2 C |  FRENUM :                      9714 C |
 FRMEVL :                      92E6 C |  FRMEVL1 :                     92F7 C |
*FULLPMMU :                       1 - |  FULSIZ :                        70 - |
 GARBGE :                      9915 C |  GARBLP :                      9919 C |
 GCST1 :                       8030 C |  GCST2 :                       8047 C |
 GETCH :                       802F C |  GETCHR :                      8BDA C |
 GETCHR1 :                     8BE2 C |  GETCMD :                      8674 C |
 GETCMD1 :                     86A2 C |  GETCMD2 :                     86C8 C |
 GETHEX :                     0A6CE C |  GETHEX1 :                    0A6DE C |
 GETINT :                      9C2E C |  GETLEN :                      9AD0 C |
 GETLIN :                      892D C |  GETLN :                       8CF1 C |
 GETNUM :                      91AA C |  GETNXT :                      8853 C |
 GETNXT1 :                     8863 C |  GETSTR :                      9A89 C |
 GETVAR :                      947E C |  GETVAR1 :                     9480 C |
 GNXARY :                      9955 C |  GOFUNC :                      9339 C |
 GOSUB :                       8D92 C |  GOTO :                        8DAD C |
 GOTO1 :                       8DC4 C |  GOTO2 :                       8DC9 C |
 GRBARY :                      997F C |  GRBDON :                      98CE C |
 GRBDON1 :                     98D2 C |  GRBLP :                       9929 C |
 GSTRCU :                      9A8C C |  GSTRDE :                      9A92 C |
 GSTRDE1 :                     9A9A C |  GSTRHL :                      9A90 C |
*GTFLNM :                      9AE3 C |  GTFLNM1 :                     9AEB C |
 GTFNAM :                      9485 C |  GTFNAM1 :                     948D C |
 GTLNLP :                      8CF4 C |  GTLNLP1 :                     8CFA C |
 GTLNLP2 :                     8D0C C |  GTSIXD :                     0A271 C |
 GTVLUS :                      9051 C |  GTVLUS1 :                     906A C |
 GTVLUS2 :                     9079 C |  GTVLUS3 :                     9089 C |
 HALF :                       0A364 C |  HALFPI :                     0A578 C |
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 109 - 2023/09/19 18時02分31秒


*HAS64 :                          1 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - |  HEX :                        0A644 C |
 HEX1 :                       0A660 C |  HEX2 :                       0A663 C |
 HEX3 :                       0A674 C |  HEX4 :                       0A679 C |
 HEXIT :                      0A6ED C |  HEXLP :                      0A6BB C |
 HEXLP1 :                     0A6C0 C |  HEXTFP :                     0A6AF C |
 HX :                            26 - |  HXERR :                      0A6F9 C |
 ID :                            16 - |  IDTEST :                      97DB C |
 IDTEST1 :                     97EB C |  IF :                          8EC1 C |
 IFGO :                        8ED1 C |  IFGO1 :                       8EDC C |
 IFGO2 :                       8EE4 C |  IFJMP :                       8BB2 C |
 INCHL :                      0A038 C |  INCLEN :                      8A0E C |
 INDFND :                      85B6 C |  INDFND1 :                     85BD C |
 INEWLN :                      86EE C |  INIT :                        821B C |
 INITAB :                      8516 C |  INITBE :                      857B C |
 INITST :                     0A776 C |  INMSG :                       8582 C |
 INP :                         9BE7 C |  INPBIN :                      90BD C |
 INPBRK :                      8C4A C |  INPBRK1 :                     8C4C C |
 INPORT :                       889 - |  INPSUB :                       888 - |
 INPUT :                       8FFE C |  INRNG :                      0A283 C |
*INSUPMODE :                      0 - |  INT :                        0A109 C |
 INT1 :                       0A116 C |  INTREQ :                       3FC D |
 INTSR :                       8000 C |  INTVAR :                      87A3 C |
 INVSGN :                      9FF3 C |  ISEXT :                       802B C |
 ISST1 :                       801A C |  ITMSEP :                      90A7 C |
*JJUMP1 :                     0A76F C |  JSTZER :                     0A345 C |
 KILFOR :                      9195 C |  KILFOR1 :                     91A4 C |
 KILIN :                       8928 C |  LCRFLG :                       8F6 - |
 LEFT :                        9B0B C |  LEN :                         9ACC C |
 LET :                         8E2F C |  LETNUM :                      8E93 C |
 LETSTR :                      8E57 C |  LF :                            0A - |
 LFRGNM :                      9BDB C |  LINEAT :                       8A6 - |
 LINEIN :                     0A215 C |  LINES :                      0A60B C |
 LINESC :                       890 - |  LINESN :                       892 - |
 LINFND :                      86CA C |  LIST :                        8A31 C |
 LIST1 :                       8A37 C |  LISTLP :                      8A3F C |
 LISTLP1 :                     8A4F C | *LISTON :                         1 - |
 LOADFP :                     0A02B C |  LOG :                         9DFB C |
 LOG1 :                        9E05 C |  LOGTAB :                      9DEE C |
 LOKFOR :                      8598 C |  LOKFOR1 :                     85A0 C |
 LOOPST :                       911 - |  LS :                            1C - |
 LSTBIN :                       916 - |  LSTLP2 :                      8A6C C |
 LSTLP3 :                      8A6F C |  LSTRAM :                       8F9 - |
 LSTRND :                       884 - |  LTSTND :                      90CC C |
 LWIDTH :                       88C - | *MACEXP :                         7 - |
 MAKINT :                      9C31 C |  MAKINT1 :                     9C3D C |
 MAKNUM :                     0A2A5 C |  MANLP :                      0A177 C |
 MATCH :                       8895 C |  MEMMSG :                      8304 C |
 MID :                         9B58 C |  MID1 :                        9B17 C |
 MID2 :                        9B68 C |  MIDNUM :                      9BE1 C |
 MINCDE :                      9CD4 C |  MINUS :                       92D1 C |
 MKTMST :                      9832 C |  MLDBLP :                     0A13E C |
 MLDBLP1 :                    0A145 C |  MLDEBC :                     0A132 C |
 MLDEBC1 :                    0A13C C |  MLOOP :                       8242 C |
 MLSP10 :                      9F97 C |  MLSP101 :                     9FA1 C |
 MLSP102 :                     9FA8 C |  MLSP103 :                     9FB5 C |
 MO :                            24 - | *MOMCPU :                      8086 - |
*MOMCPUNAME :                "8086" - |  MONITR :                     0A772 C |
 MORDT :                       90D9 C |  MORDT1 :                      90E7 C |
 MORDT2 :                      90F4 C |  MORDT3 :                      90FF C |
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 110 - 2023/09/19 18時02分31秒


 MORINP :                      8937 C |  MOVBUF :                      871C C |
 MOVDIR :                      88A4 C |  MOVLP :                       85CB C |
 MOVLP1 :                      85D9 C |  MOVSTR :                      85C4 C |
 MOVUP :                       85C1 C |  MRPRNT :                      8EE7 C |
*MSIZE :                       823F C |  MUL8LP :                      9E7F C |
 MULLN2 :                      9E42 C |  MULT :                        9E4A C |
 MULT8 :                       9E75 C |  MULTEN :                     0A1CC C |
 MULVAL :                       940 - |  MVSTPT :                      8E8A C |
 NEDMOR :                      904D C |  NEGAFT :                     0A37A C |
 NEMEM :                       82A6 C | *NESTMAX :                      100 - |
 NEW :                         8785 C |  NEXITM :                      8FD0 C |
 NEXT :                        9146 C |  NEXT1 :                       9149 C |
 NEXT2 :                       914E C |  NEXT3 :                       915A C |
 NF :                             0 - |  NFERR :                       8611 C |
 NGETCH :                      8075 C |  NKBHIT :                      8079 C |
*NMIFLG :                       896 - | *NMIREQ :                         8 D |
 NOCHNG :                      888E C |  NOENED :                     0A34D C |
 NOLIN :                       8C6B C |  NOLIN1 :                      8C7F C |
 NOMADD :                      9E96 C |  NOMLAD :                     0A154 C |
 NOPMPT :                      9019 C |  NOPMPT1 :                     901A C |
 NOPMPT2 :                     9023 C |  NOPMPT3 :                     9033 C |
 NORMAL :                      9D1B C |  NOSPC :                       8885 C |
 NOSUB7 :                     0A6E9 C |  NOSWAP :                      9C9D C |
 NOSWAP1 :                     9CA2 C |  NOSWAP2 :                     9CC3 C |
 NOSWAP3 :                     9CCD C |  NOTAMP :                      92A1 C |
 NOTAMP1 :                     92AC C |  NOTAMP2 :                     92B7 C |
 NOTAMP3 :                     92BE C |  NOTAMP4 :                     92C5 C |
 NOTSTR :                      94BC C |  NOTSTR1 :                     94C6 C |
 NOXOR :                       9C11 C |  NPUTCH :                      807D C |
 NSCFOR :                      94D1 C |  NSCFOR1 :                     94EA C |
 NULFLG :                       88E - |  NULL :                        8C9E C |
 NULL1 :                       8CA4 C |  NULLP :                       8F72 C |
 NULLP1 :                      8F77 C |  NULLS :                        88B - |
 NUMASC :                     0A22A C |  NXTARY :                      95D5 C |
 NXTARY1 :                     95EE C |  NXTARY2 :                     95F9 C |
 NXTBYT :                      886A C |  NXTCHR :                      88C6 C |
 NXTDAT :                       926 - |  NXTDTA :                      8E0B C |
 NXTITM :                      9041 C |  NXTITM1 :                     9043 C |
 NXTOPR :                       91A - |  NXTSTL :                      8E14 C |
 NXTSTT :                      8E1A C |  NXTSTT1 :                     8E21 C |
 NXTSTT2 :                     8E26 C |  OD :                             6 - |
 OKMSG :                       8587 C |  OM :                            0C - |
 OMERR :                       85FF C |  ON :                          8E9A C |
 ONGO :                        8EAC C |  ONGOLP :                      8EAE C |
 ONGOLP1 :                     8EB7 C |  ONJMP :                       8BB5 C |
 ONJMP1 :                      8BBC C |  ONJMP2 :                      8BC3 C |
 OPNPAR :                      91BF C |  OPRND :                       926C C |
 OPRND1 :                      927B C |  OPRND2 :                      9280 C |
 OPRND3 :                      9293 C |  OPRND4 :                      929A C |
 OS :                            1A - |  OTKLN :                       8925 C |
 OTPORT :                       84C - |  OUTC :                        89DA C |
 OUTC1 :                       89EA C |  OUTEXP :                     0A336 C |
 OUTIT :                       89A9 C |  OUTNBS :                      89AE C |
 OUTNCR :                     0A78B C |  OUTSUB :                       84B - |
 OUTWRD :                      8A90 C |  OV :                            0A - |
 OVERR :                       861D C |  OVTST1 :                      9F86 C |
 OVTST2 :                      9F8C C |  OVTST3 :                      9F8E C |
 OVTST4 :                      9F94 C |  PADD :                       0A1FD C |
*PADDING :                        1 - |  PAND :                        9367 C |
 PAND1 :                       9369 C |  PASSA :                       9731 C |
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 111 - 2023/09/19 18時02分31秒


 PBUFF :                        933 - |  PCST1 :                       805F C |
 PEEK :                        9C44 C |  PEND :                        8C41 C |
 PEND1 :                       8C44 C |  PHLTFP :                     0A016 C |
 PLUCDE :                      9D78 C |  PNORM :                       9D2B C |
 POINT :                        89B - |  POKE :                        9C50 C |
 POPAF :                       98F9 C |  POPHL :                       9AB3 C |
 POPHRT :                      9EB2 C |  POPNOK :                      8665 C |
 POR :                         9363 C |  POR1 :                        93A5 C |
 POS :                         972E C |  POSINT :                      8CC7 C |
 POUT :                        9BF3 C |  POWER :                      0A38D C |
 POWER1 :                     0A39F C |  POWER2 :                     0A3C6 C |
 POWER3 :                     0A3D5 C |  POWER4 :                     0A3DA C |
 POWER5 :                     0A3A6 C |  POWERS :                     0A368 C |
 PRCRLF :                      8F60 C |  PRINT :                       8EEB C |
 PRITAB :                      84D7 C |  PRNTHL :                     0A21D C |
 PRNTLP :                      8EED C |  PRNTLP1 :                     8EF0 C |
 PRNTLP2 :                     8EF7 C |  PRNTLP3 :                     8EFE C |
 PRNTLP4 :                     8F06 C |  PRNTLP5 :                     8F0D C |
 PRNTNB :                      8F45 C |  PRNTOK :                      8666 C |
 PRNTST :                      8F4A C |  PRNTST1 :                     8F4F C |
 PRNUMS :                      98A2 C |  PROCES :                      8951 C |
 PROCES1 :                     895E C |  PROCES2 :                     8962 C |
 PROCES3 :                     8969 C |  PROGND :                       920 - |
 PROGST :                       943 - |  PROG_CODE :                   8200 C |
 PROMPT :                      87E6 C |  PRS :                         98A5 C |
 PRS1 :                        98A8 C |  PRSLP :                       98B0 C |
 PRSLP1 :                      98B5 C |  PRSLP2 :                      98C5 C |
 PSET :                         89E - |  PSUB :                        9C73 C |
 PTEXT :                       8074 C |  PTRLP :                       8732 C |
 PTRLP1 :                      873E C |  PTST1 :                       806A C |
 PUTBUF :                      8991 C |  PUTCH :                       805E C |
 PUTCTL :                      8995 C |  PUTFID :                      8B72 C |
*PUTS :                        8069 C |  QTSTLP :                      9854 C |
 QTSTR :                       984D C |  QUARTR :                     0A57C C |
 RAM :                            0 - |  RAMTOP :                       800 - |
 RBFCNT :                       484 D |  RBFRDP :                       480 D |
 RBFWTP :                       482 D |  RD :                            12 - |
 READ :                        9038 C |  READFG :                       917 - |
 RECBUF :                       400 D |  REDO :                        8FD7 C |
 REGAC :                          1 - |  REGAD :                          0 - |
*RELAXED :                        0 - |  REM :                         8E10 C |
 REM1 :                        8E12 C |  RESDIV :                      9F14 C |
 RESDIV1 :                     9F16 C |  RESDIV2 :                     9F23 C |
 RESEED :                     0A50C C |  RESET :                        8A1 - |
 RESTNL :                      8C07 C |  RESTOR :                      8BEE C |
 RESZER :                      9D15 C |  RETADR :                      9560 C |
 RETINT :                      9FDB C |  RETLIN :                      8E01 C |
 RETNAD :                      889E C |  RETNUL :                      9564 C |
 RETNUM :                      92DE C |  RETREL :                      9FC7 C |
 RETREL1 :                     9FC9 C |  RETURN :                      8DD6 C |
 RETURN1 :                     8DD9 C |  RETURN2 :                     8DE9 C |
 RG :                             4 - |  RIGHT :                       9B49 C |
 RIGHT1 :                      9B10 C | *RINPUT :                       898 - |
 RLTLP :                       91E7 C |  RLTLP1 :                      91FE C |
 RND :                        0A493 C |  RND0 :                       0A4A7 C |
 RND1 :                       0A4DC C |  RND2 :                       0A503 C |
 RNDTAB :                     0A516 C |  RNGTST :                     0A351 C |
 RNGTST1 :                    0A362 C |  ROM :                         8000 - |
 RONDB :                       9D45 C |  RONDB1 :                      9D4F C |
 RONDUP :                      9D43 C |  ROUND :                       9C66 C |
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 112 - 2023/09/19 18時02分31秒


 RSCALE :                     0A1F7 C |  RSLNBK :                      8AD6 C |
 RSTSTR :                      9B76 C |  RSTSTR1 :                     9B8F C |
 RSTSTR2 :                     9B9C C |  RTSHIG :                        17 - |
 RTSLOW :                        37 - |  RUN :                         8D85 C |
 RUN1 :                        8D8A C |  RUNCNT :                      8B76 C |
 RUNCNT1 :                     8B8A C |  RUNCNT2 :                     8B99 C |
 RUNFST :                      879C C |  RUNLIN :                      8DAC C |
 SAVEXP :                      9D17 C |  SAVSTP :                      8B5F C |
 SAVSTR :                      9813 C |  SBSCPT :                      9570 C |
 SCALE :                       9DB5 C |  SCALLP :                      9DB7 C |
 SCALMI :                     0A1A4 C |  SCALMI1 :                    0A1A9 C |
 SCALPL :                     0A1C9 C |  SCNEND :                      99D2 C |
 SCNEND1 :                     99DB C |  SCPTLP :                      957C C |
 SEARCH :                      884F C |  SEED :                         866 - |
 SETIO :                       9C1C C |  SETLIN :                      8AA4 C |
 SETLIT :                      88BA C |  SETPTR :                      872A C |
 SETTOP :                      8259 C |  SFTPRG :                      86D3 C |
 SGN :                         9FD3 C |  SGNEXP :                      9349 C |
 SGNEXP1 :                     9350 C |  SGNEXP2 :                     9355 C |
 SGNEXP3 :                     935C C |  SGNEXP4 :                     9361 C |
 SGNRES :                       932 - |  SHRITE :                      9DC5 C |
 SHRLP :                       9DC9 C |  SHRLP1 :                      9DD0 C |
 SHRT1 :                       9DD2 C |  SIGNON :                      82BD C |
 SIGNS :                      0A050 C |  SIN :                        0A528 C |
 SIN1 :                       0A558 C |  SIN2 :                       0A563 C |
 SIN3 :                       0A572 C |  SINTAB :                     0A580 C |
 SIXDIG :                     0A255 C |  SMPVAR :                      993D C |
 SMSER1 :                     0A466 C |  SN :                             2 - |
 SNERR :                       860B C |  SPCFST :                     0A239 C |
 SPCFST1 :                    0A244 C |  SPCFST2 :                    0A24A C |
 SPCLP :                       8FC9 C |  SQR :                        0A384 C |
 SRCHLN :                      8753 C |  SRCHLP :                      8757 C |
 SRCHLP1 :                     8764 C |  SRCHLP2 :                     877F C |
 SRCHLP3 :                     8783 C |  SSTSA :                       9A61 C |
 ST :                            1E - |  STACK :                        8B0 - |
 STAKFP :                      9FFD C |  STALL :                       8C27 C |
 STALL1 :                      8C2F C |  START :                       8081 C |
 STARTB :                      820D C |  STKTHS :                      924A C |
 STLOOK :                       9A7 - |  STOP :                        8C3A C |
 STOP1 :                       8C3D C |  STORED :                      8D53 C |
 STORED1 :                     8D64 C |  STORED2 :                     8D76 C |
 STPOOL :                      998F C |  STR :                         9803 C |
 STR1 :                        9809 C |  STRADD :                      9992 C |
 STRADD1 :                     99A1 C |  STRADD2 :                     99A6 C |
 STRADD3 :                     99B4 C |  STRADD4 :                     99C8 C |
 STRBOT :                       90D - |  STRENT :                      90AC C |
 STRSPC :                       8A4 - |  STTLIN :                      8F52 C |
 SUBCDE :                      9C75 C |  SUBPHL :                      9C6E C |
 SUMLP :                      0A473 C |  SUMLP1 :                     0A476 C |
 SUMLP2 :                     0A47D C |  SUMSER :                     0A457 C |
 SUPTLZ :                     0A310 C |  SVNAM2 :                      949E C |
 SVSTAD :                      983E C |  SYSSTK :                       500 - |
 TAN :                        0A595 C |  TESTOS :                      98FE C |
 TESTOS1 :                     9909 C |  TESTR :                       98CA C |
*TIME :               "18\-026\-103\-12602\-027\-120\-12231\-025\-089\-110" - |
 TM :                            18 - |  TMERR :                       8621 C |
 TMPSTR :                       909 - |  TMSTPL :                       8FD - |
 TMSTPT :                       8FB - |  TOPOOL :                      9B07 C |
 TOSTRA :                      9A72 C | *TRUE :                           1 - |
 TRYAGN :                     0A2D6 C |  TSALP :                       9A74 C |
 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 113 - 2023/09/19 18時02分31秒


 TSALP1 :                      9A79 C | *TSTBIT :                     0A77E C |
 TSTBRK :                      8C11 C |  TSTBRK1 :                     8C17 C |
 TSTNUM :                      91AD C |  TSTOPL :                      987D C |
 TSTOPL1 :                     989D C |  TSTRED :                      93AF C |
 TSTRED1 :                     93C6 C |  TSTREM :                      88BD C |
 TSTREM1 :                     88C4 C |  TSTSGN :                      9FB8 C |
 TSTSGN1 :                     9FC0 C |  TSTSTR :                      91B1 C |
 TTYLIN :                      892D C |  TYPE :                         8F7 - |
 UF :                            22 - |  UFERR :                       8619 C |
 UL :                            0E - |  ULERR :                       8DD1 C |
 UNITY :                       9DEA C |  UPDATA :                      8C0A C |
 USR :                          848 - |  VAL :                         9B9F C |
 VAL0 :                        9BA7 C |  VAL1 :                        9BCA C |
 VAL2 :                        9BD3 C |  VAL3 :                        9BD6 C |
 VAREND :                       922 - |  VBRKEM :                       3F8 D |
*VERSION :                     142F - |  VGETCH :                       3EC D |
 VKBHIT :                       3F0 D |  VPUTCH :                       3F4 D |
 WAIT :                        9BF9 C |  WAITLP :                      9C12 C |
*WARM :                        820A C |  WARMST :                      829D C |
 WIDTH :                      0A602 C |  WORDS :                       836E C |
 WORDTB :                      848D C |  WRKSPC :                       845 - |
 XXXXX :                       82AC C |  ZDATA :                         83 - |
*ZDIV :                         0AF - |  ZEND :                          80 - |
 ZEQUAL :                       0B4 - |  ZERARY :                      9676 C |
 ZERBYT :                      8586 - |  ZEROLP :                      954A C |
 ZEROSUP :                    0A70A C |  ZFN :                          0A7 - |
 ZFOR :                          81 - |  ZGOSUB :                        8C - |
 ZGOTO :                         88 - |  ZGTR :                         0B3 - |
 ZLEFT :                        0CF - |  ZLTH :                         0B5 - |
 ZMINUS :                       0AD - |  ZNEW :                         0A4 - |
 ZNOT :                         0AA - |  ZONELP :                      8F99 C |
 ZOR :                          0B2 - |  ZPLUS :                        0AC - |
*ZPOINT :                       0C7 - |  ZPRINT :                        9E - |
 ZREM :                          8E - |  ZSGN :                         0B6 - |
 ZSPC :                         0A8 - |  ZSTEP :                        0AB - |
 ZTAB :                         0A5 - |  ZTHEN :                        0A9 - |
*ZTIMES :                       0AE - |  ZTO :                          0A6 - |

    907 symbols
     42 unused symbols

 AS V1.42 Beta [Bld 229] - Source File 8088basic.asm - Page 114 - 2023/09/19 18時02分31秒


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.06 seconds assembly time

   6272 lines source file
      5 passes
      0 errors
      0 warnings
